// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PayologyCheckCaptureSDK
import AVFoundation
import CoreGraphics
import CoreMedia
import Foundation
import Network
import Swift
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Swift.Decodable {
  public init(jsonDictionary: [Swift.String : Any]) throws
  public init?(jsonString: Swift.String?) throws
}
public protocol PayologyPhotoCaptureIntroDelegate : PayologyCheckCaptureSDK.PayologyViewControllerDelegate {
  func userTappedPhotoCaptureIntroNextButton(_ sender: PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController)
}
extension PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroDelegate {
  public func userTappedPhotoCaptureIntroNextButton(_ sender: PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController)
}
public protocol PayologyNetworkReviewStatus {
  var hasValidResponse: Swift.Bool { get }
  var isAwaitingServerResponse: Swift.Bool { get }
  var hasActiveTask: Swift.Bool { get }
}
public enum PayologyPhotoReviewStatus : PayologyCheckCaptureSDK.PayologyNetworkReviewStatus {
  case awaitingPhotoCapture
  case photoHasBeenCaptured(photo: PayologyCheckCaptureSDK.PayologyPhoto, willStartNetworkRequest: Swift.Bool)
  case croppedHasBeenSentToServer(croppedImage: UIKit.UIImage)
  case receivedCroppedResponse(isValid: Swift.Bool)
  case originalHasBeenSentToServer(originalImage: UIKit.UIImage)
  case receivedOriginalImageResponse(isValid: Swift.Bool)
}
extension PayologyCheckCaptureSDK.PayologyPhotoReviewStatus {
  public var hasValidResponse: Swift.Bool {
    get
  }
  public var isAwaitingServerResponse: Swift.Bool {
    get
  }
  public var hasActiveTask: Swift.Bool {
    get
  }
  public var isAwaitingPhotoCapture: Swift.Bool {
    get
  }
  public var photoHasBeenCapturedButNotSentToServer: Swift.Bool {
    get
  }
}
public struct PayologyCheckRearResponseModel : PayologyCheckCaptureSDK.PayologyNetworkResponseModel {
  public let tempID: Swift.String
  public let MICR: Swift.String?
  public let croppedMICR: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case tempID
    case MICR
    case croppedMICR
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_Concurrency.MainActor(unsafe) public class TemplateCheckboxView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(checkboxButton: PayologyCheckCaptureSDK.PayologyButton, configuration: PayologyCheckCaptureSDK.TemplateCheckboxView.Configuration, checkboxButtonIsSelected: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateCheckboxView {
  @_Concurrency.MainActor(unsafe) public func updateCheckboxButtonState(isSelected: Swift.Bool)
}
extension PayologyCheckCaptureSDK.TemplateCheckboxView {
  public struct Configuration {
    public var attributedText: Foundation.NSAttributedString?
    public var textViewContainerInset: UIKit.UIEdgeInsets
    public var textViewBackgroundColor: UIKit.UIColor
    public var textViewCornerRadius: CoreFoundation.CGFloat
    public var textViewBorderWidth: CoreFoundation.CGFloat
    public var textViewBorderColor: UIKit.UIColor
    public var checkboxSize: CoreFoundation.CGSize
    public var checkboxCornerRadius: CoreFoundation.CGFloat
    public var checkboxBorderWidth: CoreFoundation.CGFloat
    public var checkboxSelectedImage: UIKit.UIImage?
    public var checkboxDeselectedImage: UIKit.UIImage?
    public var checkboxSelectedTintColor: UIKit.UIColor
    public var checkboxDeselectedTintColor: UIKit.UIColor
    public var checkboxSelectedBackgroundColor: UIKit.UIColor
    public var checkboxDeselectedBackgroundColor: UIKit.UIColor
    public var checkboxSelectedBorderColor: UIKit.UIColor
    public var checkboxDeselectedBorderColor: UIKit.UIColor
    public init(attributedText: Foundation.NSAttributedString?, textViewContainerInset: UIKit.UIEdgeInsets, textViewBackgroundColor: UIKit.UIColor, textViewCornerRadius: CoreFoundation.CGFloat, textViewBorderWidth: CoreFoundation.CGFloat, textViewBorderColor: UIKit.UIColor, checkboxSize: CoreFoundation.CGSize, checkboxCornerRadius: CoreFoundation.CGFloat, checkboxBorderWidth: CoreFoundation.CGFloat, checkboxSelectedImage: UIKit.UIImage?, checkboxDeselectedImage: UIKit.UIImage?, checkboxSelectedTintColor: UIKit.UIColor, checkboxDeselectedTintColor: UIKit.UIColor, checkboxSelectedBackgroundColor: UIKit.UIColor, checkboxDeselectedBackgroundColor: UIKit.UIColor, checkboxSelectedBorderColor: UIKit.UIColor, checkboxDeselectedBorderColor: UIKit.UIColor)
    public var checkboxSelectedConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
      get
    }
    public var checkboxDeselectedConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
      get
    }
    public var textViewConfiguration: PayologyCheckCaptureSDK.TemplateTextView.Configuration {
      get
    }
  }
}
extension PayologyCheckCaptureSDK.TemplateCheckboxView {
  public struct AttributeConfiguration {
    public var textAttributes: [Foundation.NSAttributedString.Key : Any]
    public var textViewContainerInset: UIKit.UIEdgeInsets
    public var textViewBackgroundColor: UIKit.UIColor
    public var textViewCornerRadius: CoreFoundation.CGFloat
    public var textViewBorderWidth: CoreFoundation.CGFloat
    public var textViewBorderColor: UIKit.UIColor
    public var checkboxSize: CoreFoundation.CGSize
    public var checkboxCornerRadius: CoreFoundation.CGFloat
    public var checkboxBorderWidth: CoreFoundation.CGFloat
    public var checkboxSelectedImage: UIKit.UIImage?
    public var checkboxDeselectedImage: UIKit.UIImage?
    public var checkboxSelectedTintColor: UIKit.UIColor
    public var checkboxDeselectedTintColor: UIKit.UIColor
    public var checkboxSelectedBackgroundColor: UIKit.UIColor
    public var checkboxDeselectedBackgroundColor: UIKit.UIColor
    public var checkboxSelectedBorderColor: UIKit.UIColor
    public var checkboxDeselectedBorderColor: UIKit.UIColor
    public init(textAttributes: [Foundation.NSAttributedString.Key : Any], textViewContainerInset: UIKit.UIEdgeInsets, textViewBackgroundColor: UIKit.UIColor, textViewCornerRadius: CoreFoundation.CGFloat, textViewBorderWidth: CoreFoundation.CGFloat, textViewBorderColor: UIKit.UIColor, checkboxSize: CoreFoundation.CGSize, checkboxCornerRadius: CoreFoundation.CGFloat, checkboxBorderWidth: CoreFoundation.CGFloat, checkboxSelectedImage: UIKit.UIImage?, checkboxDeselectedImage: UIKit.UIImage?, checkboxSelectedTintColor: UIKit.UIColor, checkboxDeselectedTintColor: UIKit.UIColor, checkboxSelectedBackgroundColor: UIKit.UIColor, checkboxDeselectedBackgroundColor: UIKit.UIColor, checkboxSelectedBorderColor: UIKit.UIColor, checkboxDeselectedBorderColor: UIKit.UIColor)
    public func configuration(text: Swift.String?) -> PayologyCheckCaptureSDK.TemplateCheckboxView.Configuration
  }
}
extension PayologyCheckCaptureSDK.TemplateCheckboxView.AttributeConfiguration {
  public static var standard: PayologyCheckCaptureSDK.TemplateCheckboxView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateCheckboxView.Configuration {
  public static var standardProfileRegistration: PayologyCheckCaptureSDK.TemplateCheckboxView.Configuration {
    get
  }
  public static func getProfileRegistrationConfiguration(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateCheckboxView.Configuration
}
public enum PayologyFormatterError : PayologyCheckCaptureSDK.PayologyCriticalError {
  case invalidNumber(fileID: Swift.String, function: Swift.String)
  case invalidIndex(fileID: Swift.String, function: Swift.String)
  case USABankNumberMissing(fileID: Swift.String, function: Swift.String)
  case invalidAmountOfDigits(fileID: Swift.String, function: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyErrorResponder {
  public func handle(formatterError: PayologyCheckCaptureSDK.PayologyFormatterError)
}
extension CoreImage.CIImage {
  convenience public init?(cgImage: CoreGraphics.CGImage?)
}
extension CoreImage.CIImage {
  public func createCGImage(cgContext: CoreGraphics.CGContext? = nil, options: [CoreImage.CIContextOption : Any]? = nil) -> CoreGraphics.CGImage?
}
@available(iOS 15.0, *)
extension CoreImage.CIImage {
  public var documentRectangleObservation: Vision.VNRectangleObservation? {
    get
  }
  public func cropImageWithObservation(_ rectangleObservation: Vision.VNRectangleObservation?) -> CoreImage.CIImage?
}
public protocol PayologyCriticalError : Swift.Decodable, Swift.Encodable, Swift.Error {
  func errorContext(id: Foundation.UUID, appending message: Swift.String?) -> Swift.String
  func userMessage(id: Foundation.UUID) -> Swift.String
}
extension PayologyCheckCaptureSDK.PayologyCriticalError {
  public func errorContext(id: Foundation.UUID, appending message: Swift.String?) -> Swift.String
  public func userMessage(id: Foundation.UUID) -> Swift.String
}
extension PayologyCheckCaptureSDK.TemplateControllerConfiguration {
  public struct CodableAttributes : Swift.Codable {
    public var titleTextAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var navigationItemTextAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var navigationItemHasImage: Swift.Bool
    public var prefersLargeTitles: Swift.Bool
    public var accentColor: PayologyCheckCaptureSDK.CodableColor
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var navigationBarBackgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var lightStatusBarBackground: PayologyCheckCaptureSDK.CodableColor
    public var darkStatusBarBackground: PayologyCheckCaptureSDK.CodableColor
    public var navigationBarTintColor: PayologyCheckCaptureSDK.CodableColor
    public init(titleTextAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, navigationItemTextAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, navigationItemHasImage: Swift.Bool, prefersLargeTitles: Swift.Bool, accentColor: PayologyCheckCaptureSDK.CodableColor, backgroundColor: PayologyCheckCaptureSDK.CodableColor, navigationBarBackgroundColor: PayologyCheckCaptureSDK.CodableColor, lightStatusBarBackground: PayologyCheckCaptureSDK.CodableColor, darkStatusBarBackground: PayologyCheckCaptureSDK.CodableColor, navigationBarTintColor: PayologyCheckCaptureSDK.CodableColor)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension PayologyCheckCaptureSDK.TemplateControllerConfiguration.CodableAttributes {
  public init(_ attributes: PayologyCheckCaptureSDK.TemplateControllerConfiguration.Attributes)
}
extension PayologyCheckCaptureSDK.TemplateControllerConfiguration.CodableAttributes {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateControllerConfiguration.Attributes {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControllerConfiguration.Attributes {
  public var codableValue: PayologyCheckCaptureSDK.TemplateControllerConfiguration.CodableAttributes {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControllerConfiguration.CodableAttributes : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateControllerConfiguration.CodableAttributes
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
public enum PayologyCurrency : Swift.String, Swift.CaseIterable, Swift.Hashable, Swift.Codable {
  case USD
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyCurrency]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyCurrency] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyCurrency {
  public var currencySymbol: Swift.String {
    get
  }
  public var preferredLocale: PayologyCheckCaptureSDK.PayologyLocale {
    get
  }
  public var currencyCode: Swift.String {
    get
  }
}
open class PayologyAmountEntryConfiguration : PayologyCheckCaptureSDK.PayologyViewControllerConfiguration {
  weak public var amountEntryDelegate: (any PayologyCheckCaptureSDK.PayologyAmountEntryDelegate)?
  final public let amountConstraint: PayologyCheckCaptureSDK.PayologyAmountConstraint
  public init(amountEntryDelegate: any PayologyCheckCaptureSDK.PayologyAmountEntryDelegate, amountConstraint: PayologyCheckCaptureSDK.PayologyAmountConstraint)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class TemplateControlButtonView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var button: PayologyCheckCaptureSDK.PayologyButton?
  @_Concurrency.MainActor(unsafe) public var configuration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(button: PayologyCheckCaptureSDK.PayologyButton, configuration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView {
  public struct Configuration {
    public var size: CoreFoundation.CGSize
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var attributedTitle: Foundation.NSAttributedString?
    public var image: UIKit.UIImage?
    public var tintColor: UIKit.UIColor
    public var backgroundColor: UIKit.UIColor
    public var borderColor: UIKit.UIColor
    public init(size: CoreFoundation.CGSize, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, attributedTitle: Foundation.NSAttributedString?, image: UIKit.UIImage?, tintColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, borderColor: UIKit.UIColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView {
  public struct AttributeConfiguration {
    public var size: CoreFoundation.CGSize
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var titleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var image: UIKit.UIImage?
    public var tintColor: UIKit.UIColor
    public var backgroundColor: UIKit.UIColor
    public var borderColor: UIKit.UIColor
    public init(size: CoreFoundation.CGSize, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, titleAttributes: [Foundation.NSAttributedString.Key : Any], image: UIKit.UIImage?, tintColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, borderColor: UIKit.UIColor)
    public func configuration(title: Swift.String?) -> PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration
  }
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
  public static var manualCapture: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
  public static var dismiss: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
    get
  }
  public static var close: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
  public static var flashActive: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
    get
  }
  public static var flashDeactive: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
  public static func label(text: Swift.String) -> PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration
}
public protocol PayologyMICRAttributes : Swift.Decodable, Swift.Encodable {
  var bankNumber: Swift.String { get }
  var accountNumber: Swift.String { get }
  var checkNumber: Swift.String { get }
  var isValid: Swift.Bool { get }
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func configure(with configuration: PayologyCheckCaptureSDK.TemplateTableViewConfiguration)
}
public protocol ControllerConfigurationContainer {
  var controllerConfiguration: PayologyCheckCaptureSDK.TemplateControllerConfiguration { get }
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) convenience public init(contentMode: UIKit.UIView.ContentMode)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func setTintColor(_ color: UIKit.UIColor?)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func constraintSize(targetHeight: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func constraintSize(targetWidth: CoreFoundation.CGFloat)
}
extension PayologyCheckCaptureSDK.PayologyViewControllerDelegate {
  public func getPhotoCaptureViewController(configuration: PayologyCheckCaptureSDK.PayologyPhotoCaptureConfiguration) throws -> PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController
  public func getPhotoCaptureLoadingViewController(configuration: PayologyCheckCaptureSDK.PayologyPhotoCaptureLoadingConfiguration) throws -> PayologyCheckCaptureSDK.PayologyPhotoCaptureLoadingViewController
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView {
  public struct CodableAttributeConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var heightConstant: CoreFoundation.CGFloat
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var enableTitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var enableBackgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var enableBorderColor: PayologyCheckCaptureSDK.CodableColor
    public var disableTitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var disableBackgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var disableBorderColor: PayologyCheckCaptureSDK.CodableColor
    public var highlightedTitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var highlightedBackgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var highlightedBorderColor: PayologyCheckCaptureSDK.CodableColor
    public init(heightConstant: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, enableTitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, enableBackgroundColor: PayologyCheckCaptureSDK.CodableColor, enableBorderColor: PayologyCheckCaptureSDK.CodableColor, disableTitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, disableBackgroundColor: PayologyCheckCaptureSDK.CodableColor, disableBorderColor: PayologyCheckCaptureSDK.CodableColor, highlightedTitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, highlightedBackgroundColor: PayologyCheckCaptureSDK.CodableColor, highlightedBorderColor: PayologyCheckCaptureSDK.CodableColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView.CodableAttributeConfiguration {
  public init(_ attributeConfiguration: PayologyCheckCaptureSDK.TemplateCoreButtonView.AttributeConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView.CodableAttributeConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateCoreButtonView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView.AttributeConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateCoreButtonView.CodableAttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView.CodableAttributeConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateCoreButtonView.CodableAttributeConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView {
  public struct CodableAttributeConfiguration : Swift.Codable {
    public var widthMultiplier: CoreFoundation.CGFloat
    public var textAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: PayologyCheckCaptureSDK.CodableColor
    public init(widthMultiplier: CoreFoundation.CGFloat, textAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, backgroundColor: PayologyCheckCaptureSDK.CodableColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: PayologyCheckCaptureSDK.CodableColor)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableAttributeConfiguration {
  public init(_ attributeConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration)
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableAttributeConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableAttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableAttributeConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableAttributeConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
extension UIKit.UIImage {
  convenience public init?(cgImage: CoreGraphics.CGImage?)
  convenience public init?(named: Swift.String?)
  convenience public init?(systemName: Swift.String?)
}
extension UIKit.UIImage {
  public func rotateClockwise(_ radians: CoreFoundation.CGFloat) -> UIKit.UIImage?
}
extension UIKit.UIImage {
  convenience public init?(base64String: Swift.String?)
  public func base64EncodedString(urlEncode: Swift.Bool = true, compressionQuality: CoreFoundation.CGFloat) -> Swift.String?
}
extension UIKit.UIImage {
  public var name: Swift.String? {
    get
  }
  public var systemName: Swift.String? {
    get
  }
}
extension UIKit.UIImage {
  public func withAdjustedHeight(_ targetHeight: CoreFoundation.CGFloat?) -> UIKit.UIImage?
}
extension UIKit.UIImage {
  public static func exclamationMarkTriangle(markColor: UIKit.UIColor, triangleColor: UIKit.UIColor) -> UIKit.UIImage?
  public static func checkMarkCircle(markColor: UIKit.UIColor, circleColor: UIKit.UIColor) -> UIKit.UIImage?
}
extension UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public func disableArrangedSubviewsAutoresizing()
  @_Concurrency.MainActor(unsafe) public func removeAllArrangedSubviews()
  @_Concurrency.MainActor(unsafe) public func addSpacerArrangedSubview()
}
open class PayologyPhotoCaptureConfiguration : PayologyCheckCaptureSDK.PayologyViewControllerConfiguration {
  weak public var photoCaptureDelegate: (any PayologyCheckCaptureSDK.PayologyPhotoCaptureDelegate)?
  weak public var photoCaptureRequester: (any PayologyCheckCaptureSDK.PayologyPhotoCaptureRequester)?
  final public let photoTypes: [PayologyCheckCaptureSDK.PayologyPhotoType]
  final public let autoCaptureRetryInterval: Foundation.TimeInterval
  final public let autoCaptureStartDelay: Foundation.TimeInterval
  final public let photoCaptureIntroType: PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController.Type
  public init(photoCaptureDelegate: any PayologyCheckCaptureSDK.PayologyPhotoCaptureDelegate, photoCaptureRequester: any PayologyCheckCaptureSDK.PayologyPhotoCaptureRequester, photoTypes: [PayologyCheckCaptureSDK.PayologyPhotoType], autoCaptureRetryInterval: Foundation.TimeInterval = 1.0, autoCaptureStartDelay: Foundation.TimeInterval = 2.0, photoCaptureIntroType: PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController.Type)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView {
  public struct CodableConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var borderWidth: CoreFoundation.CGFloat
    public var cornerRadius: CoreFoundation.CGFloat
    public var topLabelAttributedText: PayologyCheckCaptureSDK.CodableAttributedString?
    public var attributedTitle: PayologyCheckCaptureSDK.CodableAttributedString?
    public var attributedSubtitle: PayologyCheckCaptureSDK.CodableAttributedString?
    public var bottomLabelAttributedText: PayologyCheckCaptureSDK.CodableAttributedString?
    public var image: PayologyCheckCaptureSDK.CodableImage?
    public var configurationHasPhotoImage: Swift.Bool
    public var shouldUsePhotoImageAfterCapture: Swift.Bool
    public init(borderWidth: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat, topLabelAttributedText: PayologyCheckCaptureSDK.CodableAttributedString?, attributedTitle: PayologyCheckCaptureSDK.CodableAttributedString?, attributedSubtitle: PayologyCheckCaptureSDK.CodableAttributedString?, bottomLabelAttributedText: PayologyCheckCaptureSDK.CodableAttributedString?, image: PayologyCheckCaptureSDK.CodableImage?, configurationHasPhotoImage: Swift.Bool, shouldUsePhotoImageAfterCapture: Swift.Bool)
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.CodableConfiguration {
  public init?(_ configuration: PayologyCheckCaptureSDK.TemplateImageButtonView.Configuration)
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.CodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateImageButtonView.Configuration? {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.Configuration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateImageButtonView.CodableConfiguration? {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.CodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateImageButtonView.CodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PayologyDynamicValue : Swift.Decodable, Swift.Encodable, Swift.Hashable {
}
public protocol PayologyDateFormatter {
  var text: Swift.String? { get }
  var format: PayologyCheckCaptureSDK.PayologyDateFormat { get }
  var dateFormatter: Foundation.DateFormatter { get }
}
extension PayologyCheckCaptureSDK.PayologyDateFormatter {
  public var formattedDateString: Swift.String {
    get
  }
  public var date: Foundation.Date? {
    get
  }
  public var hasValidDate: Swift.Bool {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyDateFormatter {
  public var dateValidationResult: PayologyCheckCaptureSDK.PayologyDateValidationResult {
    get
  }
}
public struct PayologyPhoto {
  public let photoType: PayologyCheckCaptureSDK.PayologyPhotoType
  public let captureMode: PayologyCheckCaptureSDK.PayologyPhotoCaptureMode
  public let photoImage: PayologyCheckCaptureSDK.PayologyPhotoImage
  public var minimumAmbientBrightness: CoreFoundation.CGFloat
  public var maximumBackgroundBrightness: CoreFoundation.CGFloat
  public var minimumDocumentConfidence: CoreFoundation.CGFloat
  public var minimumSharpness: CoreFoundation.CGFloat
  public init?(photoType: PayologyCheckCaptureSDK.PayologyPhotoType, captureMode: PayologyCheckCaptureSDK.PayologyPhotoCaptureMode, originalUIImage: UIKit.UIImage, minimumAmbientBrightness: CoreFoundation.CGFloat = 0.50, maximumBackgroundBrightness: CoreFoundation.CGFloat = 0.60, minimumDocumentConfidence: CoreFoundation.CGFloat = 0.99, minimumSharpness: CoreFoundation.CGFloat = 0.90)
}
extension PayologyCheckCaptureSDK.PayologyPhoto {
  public var originalUIImage: UIKit.UIImage {
    get
  }
  public var originalCGImage: CoreGraphics.CGImage {
    get
  }
  public var croppedUIImage: UIKit.UIImage? {
    get
  }
  public var croppedCGImage: CoreGraphics.CGImage? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyPhoto {
  public func croppedImageCopy() -> UIKit.UIImage?
  public func originalImageCopy() -> UIKit.UIImage?
}
extension PayologyCheckCaptureSDK.PayologyPhoto {
  public var validationResult: PayologyCheckCaptureSDK.PayologyPhotoValidationResult {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyPhoto {
  public var ambientIsBrightEnough: Swift.Bool {
    get
  }
  public var ambientBrightness: CoreFoundation.CGFloat? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyPhoto {
  public var backgroundIsDarkEnough: Swift.Bool {
    get
  }
  public var backgroundBrightness: CoreFoundation.CGFloat? {
    get
  }
}
@available(iOS 15.0, *)
extension PayologyCheckCaptureSDK.PayologyPhoto {
  public var confidenceIsHighEnough: Swift.Bool {
    get
  }
  public var documentConfidence: CoreFoundation.CGFloat? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyPhoto {
  public var imageIsSharpEnough: Swift.Bool {
    get
  }
  public var textConfidence: CoreFoundation.CGFloat? {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) public class TemplateTitleView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let lineView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public init(configuration: PayologyCheckCaptureSDK.TemplateTitleView.Configuration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateTitleView {
  public struct Configuration {
    public var text: Swift.String
    public var font: UIKit.UIFont
    public var textColor: UIKit.UIColor
    public var textAlignment: UIKit.NSTextAlignment
    public var lineColor: UIKit.UIColor
    public var lineWidth: CoreFoundation.CGFloat
    public init(text: Swift.String, font: UIKit.UIFont, textColor: UIKit.UIColor, textAlignment: UIKit.NSTextAlignment, lineColor: UIKit.UIColor, lineWidth: CoreFoundation.CGFloat)
  }
}
extension PayologyCheckCaptureSDK.TemplateTitleView {
  public struct AttributeConfiguration {
    public var font: UIKit.UIFont
    public var textColor: UIKit.UIColor
    public var textAlignment: UIKit.NSTextAlignment
    public var lineColor: UIKit.UIColor
    public var lineWidth: CoreFoundation.CGFloat
    public init(font: UIKit.UIFont, textColor: UIKit.UIColor, textAlignment: UIKit.NSTextAlignment, lineColor: UIKit.UIColor, lineWidth: CoreFoundation.CGFloat)
    public func configuration(text: Swift.String) -> PayologyCheckCaptureSDK.TemplateTitleView.Configuration
    public static func getAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateTitleView.AttributeConfiguration
  }
}
extension PayologyCheckCaptureSDK.TemplateTitleView.AttributeConfiguration {
  public static var standardTitle: PayologyCheckCaptureSDK.TemplateTitleView.AttributeConfiguration {
    get
  }
}
public enum PayologyTemplate : Swift.String, PayologyCheckCaptureSDK.PayologyType {
  case standard
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyTemplate]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyTemplate] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyTemplate {
  public var description: Swift.String {
    get
  }
}
public protocol PayologyNetworkRegistrar : AnyObject {
  var reviewStatus: any PayologyCheckCaptureSDK.PayologyNetworkReviewStatus { get }
  func resetRegistrarCache()
  func cleanMemoryUsage()
}
extension PayologyCheckCaptureSDK.PayologyNetworkRegistrar {
  public var hasValidResponse: Swift.Bool {
    get
  }
  public var isAwaitingServerResponse: Swift.Bool {
    get
  }
  public var hasActiveTask: Swift.Bool {
    get
  }
}
public protocol PayologyImageProcessorTypeContainer : PayologyCheckCaptureSDK.PayologyTypeContainer {
  var photoCaptureType: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController.Type { get }
  var photoCaptureIntroType: PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController.Type { get }
  var photoCaptureLoadingType: PayologyCheckCaptureSDK.PayologyPhotoCaptureLoadingViewController.Type { get }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView {
  public struct CodableAttributeConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var borderWidth: CoreFoundation.CGFloat
    public var cornerRadius: CoreFoundation.CGFloat
    public var topLabelTextAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes?
    public var titleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes?
    public var subtitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes?
    public var bottomLabelTextAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes?
    public var image: PayologyCheckCaptureSDK.CodableImage?
    public var configurationHasPhotoImage: Swift.Bool
    public var shouldUsePhotoImageAfterCapture: Swift.Bool
    public init(borderWidth: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat, topLabelTextAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes?, titleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes?, subtitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes?, bottomLabelTextAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes?, image: PayologyCheckCaptureSDK.CodableImage?, configurationHasPhotoImage: Swift.Bool, shouldUsePhotoImageAfterCapture: Swift.Bool)
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.CodableAttributeConfiguration {
  public init(_ attributeConfiguration: PayologyCheckCaptureSDK.TemplateImageButtonView.AttributeConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.CodableAttributeConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateImageButtonView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.AttributeConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateImageButtonView.CodableAttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.CodableAttributeConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateImageButtonView.CodableAttributeConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PayologyNumberType : Swift.String, PayologyCheckCaptureSDK.PayologyType {
  case USARouting
  case USAAccount
  case USACheck
  case USAZip
  case creditCard
  case cardVerificationValue
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyNumberType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyNumberType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyNumberType {
  public func description(condensed: Swift.Bool = false, reversed: Swift.Bool = false) -> Swift.String
  public var description: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyNumberType {
  public func getNumber(using numberString: Swift.String) -> any PayologyCheckCaptureSDK.PayologyNumber
}
extension PayologyCheckCaptureSDK.PayologyNumberType {
  public var locale: PayologyCheckCaptureSDK.PayologyLocale? {
    get
  }
  public var groupingSize: Swift.Int {
    get
  }
}
extension PayologyCheckCaptureSDK.CodableAttributedString {
  public struct Atttributes : Swift.Codable {
    public var font: PayologyCheckCaptureSDK.CodableFont?
    public var foregroundColor: PayologyCheckCaptureSDK.CodableColor?
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor?
    public var kern: CoreFoundation.CGFloat?
    public var link: Swift.String?
    public var underlineStyle: Swift.Int?
    public var underlineColor: PayologyCheckCaptureSDK.CodableColor?
    public var paragraphStyle: PayologyCheckCaptureSDK.CodableParagraphStyle?
    public init(font: PayologyCheckCaptureSDK.CodableFont?, foregroundColor: PayologyCheckCaptureSDK.CodableColor?, backgroundColor: PayologyCheckCaptureSDK.CodableColor?, kern: CoreFoundation.CGFloat?, link: Swift.String?, underlineStyle: Swift.Int?, underlineColor: PayologyCheckCaptureSDK.CodableColor?, paragraphStyle: PayologyCheckCaptureSDK.CodableParagraphStyle?)
    public init(_ attributes: [Foundation.NSAttributedString.Key : Any] = [:])
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension PayologyCheckCaptureSDK.CodableAttributedString.Atttributes {
  public var nsValue: [Foundation.NSAttributedString.Key : Any] {
    get
  }
}
extension Swift.Dictionary where Key == Foundation.NSAttributedString.Key, Value == Any {
  public var codableValue: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes {
    get
  }
}
extension PayologyCheckCaptureSDK.CodableAttributedString.Atttributes : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
public struct TemplatePhotoCaptureIntroConfigurationContainer : PayologyCheckCaptureSDK.PhotoCaptureIntroConfigurationContainer {
  public var controllerConfiguration: PayologyCheckCaptureSDK.TemplateControllerConfiguration
  public var shouldPresentPhotoCaptureIntro: Swift.Bool
  public var photoCaptureIntroViewConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.Configuration
  public var photoCaptureIntroTextConfigurations: [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.TextConfiguration]
  public var nextButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration
  public var cancelButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration
  public init(_ attributeContainer: any PayologyCheckCaptureSDK.PayologyImageProcessorAttributeContainer)
}
@objc @_Concurrency.MainActor(unsafe) final public class PayologyPhoneNumberField : PayologyCheckCaptureSDK.PayologyTextField, PayologyCheckCaptureSDK.PayologyPhoneNumberFormatter {
  @_Concurrency.MainActor(unsafe) final public var locale: PayologyCheckCaptureSDK.PayologyLocale {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(locale: PayologyCheckCaptureSDK.PayologyLocale)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct TemplateImageProcessorConfiguration : PayologyCheckCaptureSDK.PayologyImageProcessorConfiguration {
  public let configurationType: PayologyCheckCaptureSDK.PayologyConfigurationType
  weak public var hostViewController: UIKit.UIViewController?
  public let dynamicKeys: [any PayologyCheckCaptureSDK.PayologyDynamicKey]
  public let designContainer: any PayologyCheckCaptureSDK.PayologyDesignContainer
  public let requestConfiguration: any PayologyCheckCaptureSDK.PayologyNetworkRequestConfiguration
  public let photoTypes: [PayologyCheckCaptureSDK.PayologyPhotoType]
  public let shouldPerformNetworkRequestAfterPhotoCapture: Swift.Bool
  public init(hostViewController: UIKit.UIViewController, dynamicKeys: [any PayologyCheckCaptureSDK.PayologyDynamicKey] = [], designContainer: any PayologyCheckCaptureSDK.PayologyImageProcessorDesignContainer = TemplateImageProcessorDesignContainer(), requestConfiguration: any PayologyCheckCaptureSDK.PayologyImageProcessorRequestConfiguration, photoTypes: [PayologyCheckCaptureSDK.PayologyPhotoType], shouldPerformNetworkRequestAfterPhotoCapture: Swift.Bool = true)
}
@objc @_Concurrency.MainActor(unsafe) open class TemplateImageLabelButtonView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var button: PayologyCheckCaptureSDK.PayologyButton?
  @_Concurrency.MainActor(unsafe) final public let leftImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let leftImageBackgroundView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let subtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let rightImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let rightImageBackgroundView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let configuration: PayologyCheckCaptureSDK.TemplateImageLabelButtonView.Configuration
  @_Concurrency.MainActor(unsafe) public init(button: PayologyCheckCaptureSDK.PayologyButton, configuration: PayologyCheckCaptureSDK.TemplateImageLabelButtonView.Configuration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateImageLabelButtonView {
  public struct Configuration {
    public var heightConstant: CoreFoundation.CGFloat
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var backgroundColor: UIKit.UIColor
    public var borderColor: UIKit.UIColor
    public var attributedTitle: Foundation.NSAttributedString
    public var attributedSubtitle: Foundation.NSAttributedString?
    public var leftImage: UIKit.UIImage?
    public var leftImageBackgroundColor: UIKit.UIColor?
    public var leftImagePadding: CoreFoundation.CGFloat
    public var rightImage: UIKit.UIImage?
    public var rightImageBackgroundColor: UIKit.UIColor?
    public var rightImagePadding: CoreFoundation.CGFloat
    public init(heightConstant: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor, borderColor: UIKit.UIColor, attributedTitle: Foundation.NSAttributedString, attributedSubtitle: Foundation.NSAttributedString?, leftImage: UIKit.UIImage?, leftImageBackgroundColor: UIKit.UIColor?, leftImagePadding: CoreFoundation.CGFloat, rightImage: UIKit.UIImage?, rightImageBackgroundColor: UIKit.UIColor?, rightImagePadding: CoreFoundation.CGFloat)
  }
}
extension PayologyCheckCaptureSDK.TemplateImageLabelButtonView {
  public struct AttributeConfiguration {
    public var heightConstant: CoreFoundation.CGFloat
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var backgroundColor: UIKit.UIColor
    public var borderColor: UIKit.UIColor
    public var titleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var subtitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var leftImageBackgroundColor: UIKit.UIColor?
    public var leftImagePadding: CoreFoundation.CGFloat
    public var rightImageBackgroundColor: UIKit.UIColor?
    public var rightImagePadding: CoreFoundation.CGFloat
    public init(heightConstant: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor, borderColor: UIKit.UIColor, titleAttributes: [Foundation.NSAttributedString.Key : Any], subtitleAttributes: [Foundation.NSAttributedString.Key : Any], leftImageBackgroundColor: UIKit.UIColor?, leftImagePadding: CoreFoundation.CGFloat, rightImageBackgroundColor: UIKit.UIColor?, rightImagePadding: CoreFoundation.CGFloat)
    public func configuration(title: Swift.String, subtitle: Swift.String?, leftImage: UIKit.UIImage?, rightImage: UIKit.UIImage?) -> PayologyCheckCaptureSDK.TemplateImageLabelButtonView.Configuration
    public static func getTransactionAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateImageLabelButtonView.AttributeConfiguration
    public static func getProfileAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateImageLabelButtonView.AttributeConfiguration
  }
}
extension PayologyCheckCaptureSDK.TemplateImageLabelButtonView.AttributeConfiguration {
  public static var standardTransaction: PayologyCheckCaptureSDK.TemplateImageLabelButtonView.AttributeConfiguration {
    get
  }
  public static var standardProfile: PayologyCheckCaptureSDK.TemplateImageLabelButtonView.AttributeConfiguration {
    get
  }
}
public protocol PayologyButtonDelegate : AnyObject {
  func userDidTapPayologyButton(_ button: PayologyCheckCaptureSDK.PayologyButton)
}
public protocol PayologyImageProcessorDesignContainer : PayologyCheckCaptureSDK.PayologyDesignContainer {
  var unauthorizedCameraAccessAlert: UIKit.UIAlertController { get }
}
extension PayologyCheckCaptureSDK.PayologyImageProcessorDesignContainer {
  public var imageProcessorAttributeContainer: (any PayologyCheckCaptureSDK.PayologyImageProcessorAttributeContainer)? {
    get
  }
  public var imageProcessorTypeContainer: (any PayologyCheckCaptureSDK.PayologyImageProcessorTypeContainer)? {
    get
  }
}
public protocol PayologyNetworkResponseModel : Swift.Decodable, Swift.Encodable {
}
extension PayologyCheckCaptureSDK.PayologyNetworkResponseModel {
  public static func getServerResponseModel(serverData: Foundation.Data) throws -> Self
}
public struct PhotoCaptureCodableConfigurationContainer : PayologyCheckCaptureSDK.ControllerCodableConfigurationContainer {
  public var controllerConfiguration: PayologyCheckCaptureSDK.TemplateControllerCodableConfiguration
  public var autoCaptureDurationInterval: Swift.Double
  public var areaIndicatorConfiguration: PayologyCheckCaptureSDK.TemplateAreaIndicatorView.CodableConfiguration
  public var titleLabelConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableConfiguration
  public var noticeLabelConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableConfiguration
  public var manualCaptureButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.CodableConfiguration
  public var dismissButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.CodableConfiguration
  public var flashActiveButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.CodableConfiguration
  public var flashDeactiveButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.CodableConfiguration
  public var photoAttributedTitleConfigurations: [Swift.String : PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableTextConfiguration]
  public var photoValidationNoticeTextConfigurations: [Swift.String : PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableTextConfiguration]
  public var flashActivationFailNoticeTextConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableTextConfiguration
  public var manualCaptureActiveNoticeTextConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableTextConfiguration
  public init(_ configurationContainer: any PayologyCheckCaptureSDK.PhotoCaptureConfigurationContainer) throws
  public init(_ attributeContainer: any PayologyCheckCaptureSDK.PayologyImageProcessorAttributeContainer) throws
}
extension PayologyCheckCaptureSDK.PhotoCaptureCodableConfigurationContainer {
  public func configurationContainer() throws -> any PayologyCheckCaptureSDK.PhotoCaptureConfigurationContainer
}
extension PayologyCheckCaptureSDK.PhotoCaptureConfigurationContainer {
  public var codableValue: PayologyCheckCaptureSDK.PhotoCaptureCodableConfigurationContainer? {
    get
  }
}
extension PayologyCheckCaptureSDK.PhotoCaptureCodableConfigurationContainer : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.PhotoCaptureCodableConfigurationContainer
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckCaptureConfirmationCodableConfigurationContainer : PayologyCheckCaptureSDK.ControllerCodableConfigurationContainer {
  public var controllerConfiguration: PayologyCheckCaptureSDK.TemplateControllerCodableConfiguration
  public var cancelNavigationButtonConfiguration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.CodableConfiguration
  public var cancelButtonAlertConfiguration: PayologyCheckCaptureSDK.TemplateButtonAlertCodableConfiguration
  public var undoNavigationButtonConfiguration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.CodableConfiguration
  public var titleViewConfiguration: PayologyCheckCaptureSDK.TemplateTitleView.CodableConfiguration
  public var noticeTextViewConfiguration: PayologyCheckCaptureSDK.TemplateTextView.CodableConfiguration
  public var confirmButtonConfiguration: PayologyCheckCaptureSDK.TemplateCoreButtonView.CodableConfiguration
  public var stackViewSpacing: CoreFoundation.CGFloat
  public var USARoutingFieldConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.CodableConfiguration
  public var USAAccountFieldConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.CodableConfiguration
  public var USACheckFieldConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.CodableConfiguration
  public var USARoutingNumberErrorMessageConfigurations: [Swift.String : PayologyCheckCaptureSDK.TemplateTextFieldView.CodableErrorMessageConfiguration]
  public var USAAccountNumberErrorMessageConfigurations: [Swift.String : PayologyCheckCaptureSDK.TemplateTextFieldView.CodableErrorMessageConfiguration]
  public var USACheckNumberErrorMessageConfigurations: [Swift.String : PayologyCheckCaptureSDK.TemplateTextFieldView.CodableErrorMessageConfiguration]
  public var USANumberCombinationHasMoreDigitsThanAllowedErrorMessageConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.CodableErrorMessageConfiguration
  public init(_ configurationContainer: any PayologyCheckCaptureSDK.CheckCaptureConfirmationConfigurationContainer) throws
  public init(_ attributeContainer: any PayologyCheckCaptureSDK.PayologyCheckCaptureAttributeContainer) throws
}
extension PayologyCheckCaptureSDK.CheckCaptureConfirmationCodableConfigurationContainer {
  public func configurationContainer() throws -> any PayologyCheckCaptureSDK.CheckCaptureConfirmationConfigurationContainer
}
extension PayologyCheckCaptureSDK.CheckCaptureConfirmationCodableConfigurationContainer : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.CheckCaptureConfirmationCodableConfigurationContainer
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PayologyPhotoCaptureDelegate : PayologyCheckCaptureSDK.PayologyImageProcessorNetworkManager, PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroDelegate {
  func getPhotoCaptureIntroViewController(_ sender: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController, photoType: PayologyCheckCaptureSDK.PayologyPhotoType) -> PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController
  func handlePhotoCapture(_ sender: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController, photo: PayologyCheckCaptureSDK.PayologyPhoto)
  func shouldDismissPhotoCapture(_ sender: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController)
}
extension PayologyCheckCaptureSDK.PayologyPhotoCaptureDelegate {
  public typealias CameraAuthorizationCompletion = (_ hasCameraPermission: Swift.Bool) -> Swift.Void
  public var hasCameraPermission: Swift.Bool {
    get
  }
  public func verifyCameraAuthorization(completion: @escaping Self.CameraAuthorizationCompletion)
}
extension PayologyCheckCaptureSDK.PayologyPhotoCaptureDelegate {
  public func getPhotoCaptureIntroViewController(_ sender: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController, photoType: PayologyCheckCaptureSDK.PayologyPhotoType) -> PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController
  public func handlePhotoCapture(_ sender: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController, photo: PayologyCheckCaptureSDK.PayologyPhoto)
  public func shouldDismissPhotoCapture(_ sender: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController)
}
@objc @_Concurrency.MainActor(unsafe) public class TemplateAreaIndicatorView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let topMaskView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let leadingMaskView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let traillingMaskView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let bottomMaskView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let areaIndicatorView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let endorsementLineView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let endorsementLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let configuration: PayologyCheckCaptureSDK.TemplateAreaIndicatorView.Configuration
  @_Concurrency.MainActor(unsafe) public init(configuration: PayologyCheckCaptureSDK.TemplateAreaIndicatorView.Configuration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateAreaIndicatorView {
  @_Concurrency.MainActor(unsafe) public func showEndorsementLine(animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func hideEndorsementLine(animated: Swift.Bool = true)
}
extension PayologyCheckCaptureSDK.TemplateAreaIndicatorView {
  public struct Configuration {
    public var areaIndicatorViewBorderWidth: CoreFoundation.CGFloat
    public var areaIndicatorViewBorderColor: UIKit.UIColor
    public var maskViewBackgroundColor: UIKit.UIColor
    public var topMaskViewMultiplier: CoreFoundation.CGFloat
    public var leadingMaskViewMultiplier: CoreFoundation.CGFloat
    public var traillingMaskViewMultiplier: CoreFoundation.CGFloat
    public var bottomMaskViewMultiplier: CoreFoundation.CGFloat
    public var endorsementAttributedText: Foundation.NSAttributedString?
    public var endorsementLineHeight: CoreFoundation.CGFloat
    public var endorsementLineColor: UIKit.UIColor
    public init(areaIndicatorViewBorderWidth: CoreFoundation.CGFloat, areaIndicatorViewBorderColor: UIKit.UIColor, maskViewBackgroundColor: UIKit.UIColor, topMaskViewMultiplier: CoreFoundation.CGFloat, leadingMaskViewMultiplier: CoreFoundation.CGFloat, traillingMaskViewMultiplier: CoreFoundation.CGFloat, bottomMaskViewMultiplier: CoreFoundation.CGFloat, endorsementAttributedText: Foundation.NSAttributedString?, endorsementLineHeight: CoreFoundation.CGFloat, endorsementLineColor: UIKit.UIColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateAreaIndicatorView.Configuration {
  public static var standard: PayologyCheckCaptureSDK.TemplateAreaIndicatorView.Configuration {
    get
  }
}
public struct PayologyPhotoImage {
  public let originalUIImage: UIKit.UIImage
  public let originalCGImage: CoreGraphics.CGImage
  public let croppedUIImage: UIKit.UIImage?
  public let croppedCGImage: CoreGraphics.CGImage?
  public init?(originalUIImage: UIKit.UIImage?)
}
public protocol PayologyCheckCaptureActivityMonitor : PayologyCheckCaptureSDK.PayologyActivityMonitor {
  func userDidCancelPayologyInterface(checkCaptureData: PayologyCheckCaptureSDK.PayologyCheckCaptureData?)
  func userDidConfirmCheckCapture(configuration: any PayologyCheckCaptureSDK.PayologyCheckCaptureConfiguration, checkCaptureData: PayologyCheckCaptureSDK.PayologyCheckCaptureData, dynamicValues: [any PayologyCheckCaptureSDK.PayologyDynamicValue])
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureActivityMonitor {
  public func presentPayologyCheckCaptureInterface(with configuration: any PayologyCheckCaptureSDK.PayologyCheckCaptureConfiguration) throws
}
public protocol PhotoCaptureLoadingInterfaceManager : PayologyCheckCaptureSDK.PayologyPhotoCaptureLoadingViewController, PayologyCheckCaptureSDK.LoadingInterfaceManager {
}
extension PayologyCheckCaptureSDK.PhotoCaptureLoadingInterfaceManager {
  public func configurePhotoCaptureLoadingUserInterface(_ configurationContainer: any PayologyCheckCaptureSDK.PhotoCaptureLoadingConfigurationContainer)
}
extension PayologyCheckCaptureSDK.PhotoCaptureLoadingInterfaceManager {
  public func updatePhotoReviewLoading(photoType: PayologyCheckCaptureSDK.PayologyPhotoType, photoReviewStatus: PayologyCheckCaptureSDK.PayologyPhotoReviewStatus, configurationContainer: any PayologyCheckCaptureSDK.PhotoCaptureLoadingConfigurationContainer)
}
public protocol PhotoCaptureConfigurationContainer : PayologyCheckCaptureSDK.ControllerConfigurationContainer {
  var autoCaptureDurationInterval: Foundation.TimeInterval { get }
  var areaIndicatorConfiguration: PayologyCheckCaptureSDK.TemplateAreaIndicatorView.Configuration { get }
  var titleLabelConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.Configuration { get }
  var noticeLabelConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.Configuration { get }
  var manualCaptureButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration { get }
  var dismissButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration { get }
  var flashActiveButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration { get }
  var flashDeactiveButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration { get }
  var photoAttributedTitleConfigurations: [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration] { get }
  var photoValidationNoticeTextConfigurations: [PayologyCheckCaptureSDK.PayologyPhotoValidationResult : PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration] { get }
  var flashActivationFailNoticeTextConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration { get }
  var manualCaptureActiveNoticeTextConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration { get }
}
public struct PayologyAmountConstraint : Swift.Codable, Swift.Hashable {
  public let minimumAmount: PayologyCheckCaptureSDK.PayologyAmount
  public let maximumAmount: PayologyCheckCaptureSDK.PayologyAmount
  public init?(currency: PayologyCheckCaptureSDK.PayologyCurrency, minimumValue: Foundation.Decimal, maximumValue: Foundation.Decimal)
  public init?(currency: PayologyCheckCaptureSDK.PayologyCurrency, exactValue: Foundation.Decimal)
  public init(exactAmount: PayologyCheckCaptureSDK.PayologyAmount)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PayologyCheckCaptureSDK.PayologyAmountConstraint, b: PayologyCheckCaptureSDK.PayologyAmountConstraint) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyAmountConstraint {
  public var hasExactAmount: Swift.Bool {
    get
  }
  public var currency: PayologyCheckCaptureSDK.PayologyCurrency {
    get
  }
  public var minimumValue: Foundation.Decimal {
    get
  }
  public var maximumValue: Foundation.Decimal {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyAmountConstraint {
  public func isCompatible(with amount: PayologyCheckCaptureSDK.PayologyAmount?) -> Swift.Bool
}
extension Swift.Dictionary where Key == Swift.String, Value == PayologyCheckCaptureSDK.CodableAttributedString {
  public var photoValidationResultValue: [PayologyCheckCaptureSDK.PayologyPhotoValidationResult : Foundation.NSAttributedString] {
    get
  }
}
extension Swift.Dictionary where Key == PayologyCheckCaptureSDK.PayologyPhotoValidationResult, Value == Foundation.NSAttributedString {
  public var codableValue: [Swift.String : PayologyCheckCaptureSDK.CodableAttributedString] {
    get
  }
}
extension Swift.Dictionary where Key == Swift.String, Value == PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableTextConfiguration {
  public var photoValidationResultValue: [PayologyCheckCaptureSDK.PayologyPhotoValidationResult : PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration] {
    get
  }
}
extension Swift.Dictionary where Key == PayologyCheckCaptureSDK.PayologyPhotoValidationResult, Value == PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration {
  public var codableValue: [Swift.String : PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableTextConfiguration] {
    get
  }
}
public protocol PayologyImageProcessorRequestConfiguration : PayologyCheckCaptureSDK.PayologyNetworkRequestConfiguration {
  var imageProcessorBaseURL: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestBaseURL { get }
  var imageProcessorAPI: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestAPI { get }
  var licenseNumber: Swift.String { get }
}
public enum PayologyTextValidationResult : Swift.String, PayologyCheckCaptureSDK.PayologyValidationResult {
  case isValid
  case isEmpty
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyTextValidationResult]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyTextValidationResult] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyTextValidationResult {
  public var isValid: Swift.Bool {
    get
  }
}
public protocol CheckCaptureEntryConfigurationContainer : PayologyCheckCaptureSDK.AmountEntryConfigurationContainer {
  var checkFrontButtonShouldPerformDualCapture: Swift.Bool { get }
  var checkFrontButtonConfiguration: PayologyCheckCaptureSDK.TemplateImageButtonView.Configuration { get }
  var checkFrontButtonReviewStatusColorConfiguration: [PayologyCheckCaptureSDK.TemplateImageButtonView.NetworkReviewStatus : PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration] { get }
  var checkRearButtonConfiguration: PayologyCheckCaptureSDK.TemplateImageButtonView.Configuration { get }
  var checkRearButtonReviewStatusColorConfiguration: [PayologyCheckCaptureSDK.TemplateImageButtonView.NetworkReviewStatus : PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration] { get }
}
@objc @_Concurrency.MainActor(unsafe) final public class PayologyAmountField : PayologyCheckCaptureSDK.PayologyTextField {
  @_Concurrency.MainActor(unsafe) final public let currencyFormatter: PayologyCheckCaptureSDK.PayologyCurrencyFormatter
  @_Concurrency.MainActor(unsafe) final public var currency: PayologyCheckCaptureSDK.PayologyCurrency {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var amountConstraint: PayologyCheckCaptureSDK.PayologyAmountConstraint? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(amountConstraint: PayologyCheckCaptureSDK.PayologyAmountConstraint)
  @_Concurrency.MainActor(unsafe) public init(currency: PayologyCheckCaptureSDK.PayologyCurrency)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyAmountField {
  @_Concurrency.MainActor(unsafe) final public var userAmount: PayologyCheckCaptureSDK.PayologyAmount? {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var decimalValue: Foundation.Decimal {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var amountString: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var numberValue: Foundation.NSNumber {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyAmountField {
  @_Concurrency.MainActor(unsafe) final public var isValid: Swift.Bool {
    get
  }
}
public class TemplateCheckCaptureDelegate : PayologyCheckCaptureSDK.PayologyCheckCaptureDelegate {
  weak public var activityMonitor: (any PayologyCheckCaptureSDK.PayologyActivityMonitor)?
  weak public var retainedReference: (any PayologyCheckCaptureSDK.PayologyDelegate)?
  public var navigationController: UIKit.UINavigationController?
  final public let configuration: any PayologyCheckCaptureSDK.PayologyFrameworkConfiguration
  public var dynamicValues: [any PayologyCheckCaptureSDK.PayologyDynamicValue]
  public var networkRegistrars: [any PayologyCheckCaptureSDK.PayologyNetworkRegistrar]
  public init(activityMonitor: any PayologyCheckCaptureSDK.PayologyCheckCaptureActivityMonitor, configuration: any PayologyCheckCaptureSDK.PayologyCheckCaptureConfiguration)
  public func shouldPerformCheckDeposit(_ sender: PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController, with checkCaptureData: PayologyCheckCaptureSDK.PayologyCheckCaptureData)
  public func shouldLogCheckCaptureDataToMonitor(checkCaptureData: PayologyCheckCaptureSDK.PayologyCheckCaptureData?, checkCaptureStatus: PayologyCheckCaptureSDK.SFCheckCaptureSubmissionData.Status)
  @objc deinit
}
public struct PayologyImageProcessorCodableDesignContainer : PayologyCheckCaptureSDK.PayologyCodableDesignContainer {
  public var photoCaptureCodableContainer: PayologyCheckCaptureSDK.PhotoCaptureCodableConfigurationContainer
  public var photoCaptureIntroCodableContainer: PayologyCheckCaptureSDK.PhotoCaptureIntroCodableConfigurationContainer
  public var unauthorizedCameraAccessAlertCodableConfiguration: PayologyCheckCaptureSDK.TemplateEventAlertCodableConfiguration
  public var unauthorizedCameraAccessAlert: UIKit.UIAlertController {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyImageProcessorCodableDesignContainer {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.PayologyImageProcessorCodableDesignContainer
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
extension Foundation.Date {
  public init?(day: Swift.Int, month: Swift.Int, year: Swift.Int, hour: Swift.Int = 12, timeZoneID: Swift.String = "GMT", calendarID: Foundation.Calendar.Identifier = .gregorian)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TemplatePhotoCaptureViewController : PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController, PayologyCheckCaptureSDK.PhotoCaptureInterfaceManager {
  @_Concurrency.MainActor(unsafe) final public let statusBarBackgroundView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var areaIndicatorView: PayologyCheckCaptureSDK.TemplateAreaIndicatorView?
  @_Concurrency.MainActor(unsafe) public var titleLabelView: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView?
  @_Concurrency.MainActor(unsafe) public var noticeLabelView: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView?
  @_Concurrency.MainActor(unsafe) public var manualCaptureButtonView: PayologyCheckCaptureSDK.TemplateControlButtonView?
  @_Concurrency.MainActor(unsafe) public var dismissButtonView: PayologyCheckCaptureSDK.TemplateControlButtonView?
  @_Concurrency.MainActor(unsafe) public var flashControlButtonView: PayologyCheckCaptureSDK.TemplateControlButtonView?
  @_Concurrency.MainActor(unsafe) public var configurationContainer: (any PayologyCheckCaptureSDK.PhotoCaptureConfigurationContainer)?
  @_Concurrency.MainActor(unsafe) override open func didCompleteInitialization()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) override open func userDidTapPayologyButton(_ button: PayologyCheckCaptureSDK.PayologyButton)
  @_Concurrency.MainActor(unsafe) override open func willPresentPhotoCaptureIntro(_ photoType: PayologyCheckCaptureSDK.PayologyPhotoType)
  @_Concurrency.MainActor(unsafe) override open func willStartPhotoCapture(_ photoType: PayologyCheckCaptureSDK.PayologyPhotoType)
  @_Concurrency.MainActor(unsafe) override open func autoCaptureValidationResultDidUpdate(_ validationResult: PayologyCheckCaptureSDK.PayologyPhotoValidationResult, _ photoType: PayologyCheckCaptureSDK.PayologyPhotoType)
  @_Concurrency.MainActor(unsafe) required public init(configuration: PayologyCheckCaptureSDK.PayologyPhotoCaptureConfiguration) throws
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct CodableImage : Swift.Codable {
  public let name: Swift.String?
  public let systemName: Swift.String?
  public let data: Foundation.Data?
  public init?(named: Swift.String?)
  public init?(systemName: Swift.String?)
  public init?(data: Foundation.Data?)
  public init?(_ uiImage: UIKit.UIImage?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.CodableImage {
  public var uiValue: UIKit.UIImage? {
    get
  }
}
extension UIKit.UIImage {
  public var codableValue: PayologyCheckCaptureSDK.CodableImage? {
    get
  }
}
extension PayologyCheckCaptureSDK.CodableImage : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.CodableImage
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
public protocol ViewCodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
}
@objc @_Concurrency.MainActor(unsafe) public class TemplatePhotoCaptureIntroView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let backgroundView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let scrollView: UIKit.UIScrollView
  @_Concurrency.MainActor(unsafe) final public let stackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let subtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let photoGuideLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let lineView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let nextButtonReferenceView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let cancelButtonReferenceView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let nextButtonSize: CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) final public let cancelButtonSize: CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) final public let configuration: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.Configuration
  @_Concurrency.MainActor(unsafe) public var textConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.TextConfiguration? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(nextButtonSize: CoreFoundation.CGSize, cancelButtonSize: CoreFoundation.CGSize, configuration: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.Configuration, textConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.TextConfiguration?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView {
  public struct Configuration {
    public var widthMultiplier: CoreFoundation.CGFloat
    public var heightMultiplier: CoreFoundation.CGFloat
    public var backgroundViewCornerRadius: CoreFoundation.CGFloat
    public var backgroundViewBorderWidth: CoreFoundation.CGFloat
    public var backgroundViewColor: UIKit.UIColor
    public var backgroundViewBorderColor: UIKit.UIColor
    public var contentInsets: UIKit.UIEdgeInsets
    public var stackViewSpacing: CoreFoundation.CGFloat
    public var lineViewColor: UIKit.UIColor
    public init(widthMultiplier: CoreFoundation.CGFloat, heightMultiplier: CoreFoundation.CGFloat, backgroundViewCornerRadius: CoreFoundation.CGFloat, backgroundViewBorderWidth: CoreFoundation.CGFloat, backgroundViewColor: UIKit.UIColor, backgroundViewBorderColor: UIKit.UIColor, contentInsets: UIKit.UIEdgeInsets, stackViewSpacing: CoreFoundation.CGFloat, lineViewColor: UIKit.UIColor)
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView {
  public struct TextConfiguration {
    public var attributedTitle: Foundation.NSAttributedString?
    public var attributedSubtitle: Foundation.NSAttributedString?
    public var photoGuideAttributedText: Foundation.NSAttributedString?
    public init(attributedTitle: Foundation.NSAttributedString?, attributedSubtitle: Foundation.NSAttributedString?, photoGuideAttributedText: Foundation.NSAttributedString?)
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView {
  public struct AttributeConfiguration {
    public var widthMultiplier: CoreFoundation.CGFloat
    public var heightMultiplier: CoreFoundation.CGFloat
    public var backgroundViewCornerRadius: CoreFoundation.CGFloat
    public var backgroundViewBorderWidth: CoreFoundation.CGFloat
    public var backgroundViewColor: UIKit.UIColor
    public var backgroundViewBorderColor: UIKit.UIColor
    public var contentInsets: UIKit.UIEdgeInsets
    public var stackViewSpacing: CoreFoundation.CGFloat
    public var lineViewColor: UIKit.UIColor
    public var titleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var subtitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var photoGuideTextAttributes: [Foundation.NSAttributedString.Key : Any]
    public init(widthMultiplier: CoreFoundation.CGFloat, heightMultiplier: CoreFoundation.CGFloat, backgroundViewCornerRadius: CoreFoundation.CGFloat, backgroundViewBorderWidth: CoreFoundation.CGFloat, backgroundViewColor: UIKit.UIColor, backgroundViewBorderColor: UIKit.UIColor, contentInsets: UIKit.UIEdgeInsets, stackViewSpacing: CoreFoundation.CGFloat, lineViewColor: UIKit.UIColor, titleAttributes: [Foundation.NSAttributedString.Key : Any], subtitleAttributes: [Foundation.NSAttributedString.Key : Any], photoGuideTextAttributes: [Foundation.NSAttributedString.Key : Any])
    public func configuration() -> PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.Configuration
    public func textConfiguration(title: Swift.String?, subtitle: Swift.String?, photoGuideText: Swift.String?) -> PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.TextConfiguration
    public static func getAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.AttributeConfiguration
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.AttributeConfiguration {
  public static var standard: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.AttributeConfiguration {
    get
  }
}
open class PayologyLoadingConfiguration : PayologyCheckCaptureSDK.PayologyViewControllerConfiguration {
  weak public var loadingDelegate: (any PayologyCheckCaptureSDK.PayologyLoadingDelegate)?
  final public let loadingRequester: any PayologyCheckCaptureSDK.PayologyLoadingRequester
  public init(loadingDelegate: any PayologyCheckCaptureSDK.PayologyLoadingDelegate, loadingRequester: any PayologyCheckCaptureSDK.PayologyLoadingRequester)
  @objc deinit
}
public enum PayologyImageProcessorInitializationError : PayologyCheckCaptureSDK.PayologyInitializationError {
  case unauthorizedCameraUsage
  public static func == (a: PayologyCheckCaptureSDK.PayologyImageProcessorInitializationError, b: PayologyCheckCaptureSDK.PayologyImageProcessorInitializationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView {
  public struct CodableAttributeConfiguration : Swift.Codable {
    public var widthMultiplier: CoreFoundation.CGFloat
    public var heightMultiplier: CoreFoundation.CGFloat
    public var backgroundViewCornerRadius: CoreFoundation.CGFloat
    public var backgroundViewBorderWidth: CoreFoundation.CGFloat
    public var backgroundViewColor: PayologyCheckCaptureSDK.CodableColor
    public var backgroundViewBorderColor: PayologyCheckCaptureSDK.CodableColor
    public var contentInsets: PayologyCheckCaptureSDK.CodableEdgesInsets
    public var stackViewSpacing: CoreFoundation.CGFloat
    public var lineViewColor: PayologyCheckCaptureSDK.CodableColor
    public var titleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var subtitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var photoGuideTextAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public init(widthMultiplier: CoreFoundation.CGFloat, heightMultiplier: CoreFoundation.CGFloat, backgroundViewCornerRadius: CoreFoundation.CGFloat, backgroundViewBorderWidth: CoreFoundation.CGFloat, backgroundViewColor: PayologyCheckCaptureSDK.CodableColor, backgroundViewBorderColor: PayologyCheckCaptureSDK.CodableColor, contentInsets: PayologyCheckCaptureSDK.CodableEdgesInsets, stackViewSpacing: CoreFoundation.CGFloat, lineViewColor: PayologyCheckCaptureSDK.CodableColor, titleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, subtitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, photoGuideTextAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableAttributeConfiguration {
  public init(_ attributeConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.AttributeConfiguration)
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableAttributeConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.AttributeConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableAttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableAttributeConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableAttributeConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
public protocol PayologyTypeContainer {
}
@objc @_Concurrency.MainActor(unsafe) open class TemplateMenuButtonView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var menuButton: PayologyCheckCaptureSDK.PayologyMenuButton?
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let indicatorImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let subtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let configuration: PayologyCheckCaptureSDK.TemplateMenuButtonView.Configuration
  @_Concurrency.MainActor(unsafe) public init(menuButton: PayologyCheckCaptureSDK.PayologyMenuButton, configuration: PayologyCheckCaptureSDK.TemplateMenuButtonView.Configuration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateMenuButtonView {
  @_Concurrency.MainActor(unsafe) public func updateButtonTitle()
}
extension PayologyCheckCaptureSDK.TemplateMenuButtonView {
  public struct Configuration {
    public var titleLabelAttributedText: Foundation.NSAttributedString?
    public var subtitleLabelAttributedText: Foundation.NSAttributedString?
    public var indicatorImage: UIKit.UIImage?
    public var indicatorImageNormalColor: UIKit.UIColor?
    public var indicatorImageHighlightedColor: UIKit.UIColor?
    public var contentEdgeInsets: UIKit.UIEdgeInsets
    public var contentHorizontalAlignment: UIKit.UIControl.ContentHorizontalAlignment
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var buttonNormalTitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var buttonNormalBackgroundColor: UIKit.UIColor
    public var buttonNormalBorderColor: UIKit.UIColor
    public var buttonHighlightedTitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var buttonHighlightedBackgroundColor: UIKit.UIColor
    public var buttonHighlightedBorderColor: UIKit.UIColor
    public var menuAlertTitle: Swift.String?
    public var menuAlertMessage: Swift.String?
    public var menuAlertCancelTitle: Swift.String
    public init(titleLabelAttributedText: Foundation.NSAttributedString?, subtitleLabelAttributedText: Foundation.NSAttributedString?, indicatorImage: UIKit.UIImage?, indicatorImageNormalColor: UIKit.UIColor?, indicatorImageHighlightedColor: UIKit.UIColor?, contentEdgeInsets: UIKit.UIEdgeInsets, contentHorizontalAlignment: UIKit.UIControl.ContentHorizontalAlignment, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, buttonNormalTitleAttributes: [Foundation.NSAttributedString.Key : Any], buttonNormalBackgroundColor: UIKit.UIColor, buttonNormalBorderColor: UIKit.UIColor, buttonHighlightedTitleAttributes: [Foundation.NSAttributedString.Key : Any], buttonHighlightedBackgroundColor: UIKit.UIColor, buttonHighlightedBorderColor: UIKit.UIColor, menuAlertTitle: Swift.String?, menuAlertMessage: Swift.String?, menuAlertCancelTitle: Swift.String)
  }
}
extension PayologyCheckCaptureSDK.TemplateMenuButtonView {
  public struct AttributeConfiguration {
    public var titleLabelTextAttributes: [Foundation.NSAttributedString.Key : Any]
    public var subtitleLabelTextAttributes: [Foundation.NSAttributedString.Key : Any]
    public var indicatorImage: UIKit.UIImage?
    public var indicatorImageNormalColor: UIKit.UIColor?
    public var indicatorImageHighlightedColor: UIKit.UIColor?
    public var contentEdgeInsets: UIKit.UIEdgeInsets
    public var contentHorizontalAlignment: UIKit.UIControl.ContentHorizontalAlignment
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var buttonNormalTitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var buttonNormalBackgroundColor: UIKit.UIColor
    public var buttonNormalBorderColor: UIKit.UIColor
    public var buttonHighlightedTitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var buttonHighlightedBackgroundColor: UIKit.UIColor
    public var buttonHighlightedBorderColor: UIKit.UIColor
    public init(titleLabelTextAttributes: [Foundation.NSAttributedString.Key : Any], subtitleLabelTextAttributes: [Foundation.NSAttributedString.Key : Any], indicatorImage: UIKit.UIImage?, indicatorImageNormalColor: UIKit.UIColor?, indicatorImageHighlightedColor: UIKit.UIColor?, contentEdgeInsets: UIKit.UIEdgeInsets, contentHorizontalAlignment: UIKit.UIControl.ContentHorizontalAlignment, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, buttonNormalTitleAttributes: [Foundation.NSAttributedString.Key : Any], buttonNormalBackgroundColor: UIKit.UIColor, buttonNormalBorderColor: UIKit.UIColor, buttonHighlightedTitleAttributes: [Foundation.NSAttributedString.Key : Any], buttonHighlightedBackgroundColor: UIKit.UIColor, buttonHighlightedBorderColor: UIKit.UIColor)
    public func configuration(titleLabelText: Swift.String?, subtitleLabelText: Swift.String?, menuAlertTitle: Swift.String?, menuAlertMessage: Swift.String?, menuAlertCancelTitle: Swift.String) -> PayologyCheckCaptureSDK.TemplateMenuButtonView.Configuration
    public static func getAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateMenuButtonView.AttributeConfiguration
  }
}
extension PayologyCheckCaptureSDK.TemplateMenuButtonView.AttributeConfiguration {
  public static var standard: PayologyCheckCaptureSDK.TemplateMenuButtonView.AttributeConfiguration {
    get
  }
}
extension UIKit.NSTextAttachment {
  convenience public init?(image: UIKit.UIImage?, attributes: [Foundation.NSAttributedString.Key : Any])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TemplateCheckCaptureEntryViewController : PayologyCheckCaptureSDK.PayologyCheckCaptureEntryViewController {
  @_Concurrency.MainActor(unsafe) final public let statusBarBackgroundView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var cancelNavigationButtonView: PayologyCheckCaptureSDK.TemplateNavigationButtonView?
  @_Concurrency.MainActor(unsafe) public var titleView: PayologyCheckCaptureSDK.TemplateTitleView?
  @_Concurrency.MainActor(unsafe) public var amountFieldView: PayologyCheckCaptureSDK.TemplateTextFieldView?
  @_Concurrency.MainActor(unsafe) public var noticeTextView: PayologyCheckCaptureSDK.TemplateTextView?
  @_Concurrency.MainActor(unsafe) public var nextButtonView: PayologyCheckCaptureSDK.TemplateCoreButtonView?
  @_Concurrency.MainActor(unsafe) public var checkFrontButtonView: PayologyCheckCaptureSDK.TemplateImageButtonView?
  @_Concurrency.MainActor(unsafe) public var checkRearButtonView: PayologyCheckCaptureSDK.TemplateImageButtonView?
  @_Concurrency.MainActor(unsafe) public var configurationContainer: (any PayologyCheckCaptureSDK.CheckCaptureEntryConfigurationContainer)?
  @_Concurrency.MainActor(unsafe) override open func didCompleteInitialization()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) override open func nextButtonStateDidChange()
  @_Concurrency.MainActor(unsafe) override open func userDidEditAmountField(_ amountField: PayologyCheckCaptureSDK.PayologyAmountField)
  @_Concurrency.MainActor(unsafe) override open func userDidEndEditingAmountField(_ amountField: PayologyCheckCaptureSDK.PayologyAmountField)
  @_Concurrency.MainActor(unsafe) override open func photoReviewStatusDidUpdate(_ photoType: PayologyCheckCaptureSDK.PayologyPhotoType, photoReviewStatus: PayologyCheckCaptureSDK.PayologyPhotoReviewStatus)
  @_Concurrency.MainActor(unsafe) required public init(configuration: PayologyCheckCaptureSDK.PayologyCheckCaptureEntryConfiguration) throws
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class PayologyPhotoCaptureIntroViewController : PayologyCheckCaptureSDK.PayologyViewController {
  @_Concurrency.MainActor(unsafe) weak public var photoCaptureIntroDelegate: (any PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroDelegate)?
  @_Concurrency.MainActor(unsafe) weak public var photoCaptureViewController: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController?
  @_Concurrency.MainActor(unsafe) final public let photoType: PayologyCheckCaptureSDK.PayologyPhotoType
  @_Concurrency.MainActor(unsafe) final public let nextButton: PayologyCheckCaptureSDK.PayologyButton
  @_Concurrency.MainActor(unsafe) required public init(configuration: PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroConfiguration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override open func userDidTapPayologyButton(_ button: PayologyCheckCaptureSDK.PayologyButton)
  @objc deinit
}
public enum PayologyNumberValidationResult : Swift.String, PayologyCheckCaptureSDK.PayologyValidationResult {
  case isValid
  case isEmpty
  case hasInvalidCharacters
  case hasOnlyZeros
  case hasLessDigitsThanAllowed
  case hasMoreDigitsThanAllowed
  case isAnotherInvalid
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyNumberValidationResult]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyNumberValidationResult] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyNumberValidationResult {
  public var isValid: Swift.Bool {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextView {
  public struct CodableAttributeConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var textContainerInset: PayologyCheckCaptureSDK.CodableEdgesInsets
    public var textAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var isEditable: Swift.Bool
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: PayologyCheckCaptureSDK.CodableColor
    public init(textContainerInset: PayologyCheckCaptureSDK.CodableEdgesInsets, textAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, isEditable: Swift.Bool, backgroundColor: PayologyCheckCaptureSDK.CodableColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: PayologyCheckCaptureSDK.CodableColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateTextView.CodableAttributeConfiguration {
  public init(_ attributeConfiguration: PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateTextView.CodableAttributeConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateTextView.CodableAttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextView.CodableAttributeConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateTextView.CodableAttributeConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_Concurrency.MainActor(unsafe) public class PayologySlideAnimatedTransitioning : ObjectiveC.NSObject, UIKit.UIViewControllerAnimatedTransitioning {
  @_Concurrency.MainActor(unsafe) final public let isPresenting: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(isPresenting: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func transitionDuration(using transitionContext: (any UIKit.UIViewControllerContextTransitioning)?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc public func animateTransition(using transitionContext: any UIKit.UIViewControllerContextTransitioning)
  @objc deinit
}
extension Swift.Encodable {
  public var jsonData: Foundation.Data? {
    get
  }
  public func jsonDictionary(options: Foundation.JSONSerialization.ReadingOptions = []) -> [Swift.String : Any]?
  public func jsonString(prettyPrinted: Swift.Bool = false) -> Swift.String?
}
extension Swift.Encodable {
  public var bytes: Swift.Double? {
    get
  }
}
public protocol PayologyImageProcessorAttributeContainer : PayologyCheckCaptureSDK.PayologyAttributeContainer {
  var titlePhotoCaptureLabelAttributeConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration { get }
  var noticePhotoCaptureLabelAttributeConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration { get }
  var photoCaptureIntroAttributeConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.AttributeConfiguration { get }
  var loadingViewAttributeConfiguration: PayologyCheckCaptureSDK.TemplateLoadingView.AttributeConfiguration { get }
}
public enum PayologyViewControllerError : PayologyCheckCaptureSDK.PayologyCriticalError {
  case unknownViewControllerIsBeingPresented(fileID: Swift.String, function: Swift.String)
  case downcastingPayologyTextFieldFailure(fileID: Swift.String, function: Swift.String)
  case downcastingPayologyTableViewCellFailure(fileID: Swift.String, function: Swift.String)
  case invalidRequestConfiguration(fileID: Swift.String, function: Swift.String)
  case missingPayologyViewControllerDelegate(fileID: Swift.String, function: Swift.String)
  case missingViewControllerRequester(fileID: Swift.String, function: Swift.String)
  case missingTemplateView(fileID: Swift.String, function: Swift.String)
  case missingAttributeConfiguration(fileID: Swift.String, function: Swift.String)
  case missingConfigurationContainer(fileID: Swift.String, function: Swift.String)
  case missingRequiredProperty(fileID: Swift.String, function: Swift.String)
  case unableToDowncastDelegate(fileID: Swift.String, function: Swift.String)
  case unableToDowncastViewController(fileID: Swift.String, function: Swift.String)
  case unableToCompleteButtonAction(fileID: Swift.String, function: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyErrorResponder {
  public func handle(controllerError: PayologyCheckCaptureSDK.PayologyViewControllerError)
}
extension PayologyCheckCaptureSDK.PayologyAmount {
  public var amountString: Swift.String? {
    get
  }
}
public struct CodablePoint : Swift.Codable {
  public let x: CoreFoundation.CGFloat
  public let y: CoreFoundation.CGFloat
  public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  public init(_ cgPoint: CoreFoundation.CGPoint)
  public init()
  public var cgValue: CoreFoundation.CGPoint {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension CoreFoundation.CGPoint {
  public var codableValue: PayologyCheckCaptureSDK.CodablePoint {
    get
  }
}
extension PayologyCheckCaptureSDK.CodablePoint : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.CodablePoint
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
public protocol PhotoCaptureInterfaceManager : PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController, PayologyCheckCaptureSDK.ControllerInterfaceManager {
  var areaIndicatorView: PayologyCheckCaptureSDK.TemplateAreaIndicatorView? { get }
  var titleLabelView: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView? { get }
  var noticeLabelView: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView? { get }
  var manualCaptureButtonView: PayologyCheckCaptureSDK.TemplateControlButtonView? { get }
  var dismissButtonView: PayologyCheckCaptureSDK.TemplateControlButtonView? { get }
  var flashControlButtonView: PayologyCheckCaptureSDK.TemplateControlButtonView? { get }
}
extension PayologyCheckCaptureSDK.PhotoCaptureInterfaceManager {
  public func configurePhotoCaptureUserInterface(photoType: PayologyCheckCaptureSDK.PayologyPhotoType, configurationContainer: any PayologyCheckCaptureSDK.PhotoCaptureConfigurationContainer)
}
extension PayologyCheckCaptureSDK.PhotoCaptureInterfaceManager {
  public func configurePhotoCaptureTexts(photoType: PayologyCheckCaptureSDK.PayologyPhotoType, configurationContainer: any PayologyCheckCaptureSDK.PhotoCaptureConfigurationContainer)
  public func resetPhotoCaptureTexts()
}
extension PayologyCheckCaptureSDK.PhotoCaptureInterfaceManager {
  public func updateNoticeLabelText(validationResult: PayologyCheckCaptureSDK.PayologyPhotoValidationResult, configurationContainer: any PayologyCheckCaptureSDK.PhotoCaptureConfigurationContainer)
}
extension PayologyCheckCaptureSDK.PhotoCaptureInterfaceManager {
  public func activateFlashIfNeeded(_ configurationContainer: any PayologyCheckCaptureSDK.PhotoCaptureConfigurationContainer)
  public func deactivateFlashIfNeeded(_ configurationContainer: any PayologyCheckCaptureSDK.PhotoCaptureConfigurationContainer)
  public func toggleFlashState(_ configurationContainer: any PayologyCheckCaptureSDK.PhotoCaptureConfigurationContainer)
}
extension PayologyCheckCaptureSDK.PhotoCaptureInterfaceManager {
  public func revealControlButtons(animated: Swift.Bool = true)
  public func fadeControlButtons(animated: Swift.Bool = true)
}
extension PayologyCheckCaptureSDK.PhotoCaptureInterfaceManager {
  public func adjustEndorsementVisibility(animated: Swift.Bool = true)
}
public struct TemplateControllerConfiguration {
  public var title: Swift.String?
  public var titleTextAttributes: [Foundation.NSAttributedString.Key : Any]
  public var prefersLargeTitles: Swift.Bool
  public var accentColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var navigationBarBackgroundColor: UIKit.UIColor
  public var lightStatusBarBackground: UIKit.UIColor
  public var darkStatusBarBackground: UIKit.UIColor
  public var navigationBarTintColor: UIKit.UIColor
  public init(title: Swift.String?, titleTextAttributes: [Foundation.NSAttributedString.Key : Any], prefersLargeTitles: Swift.Bool, accentColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, navigationBarBackgroundColor: UIKit.UIColor, lightStatusBarBackground: UIKit.UIColor, darkStatusBarBackground: UIKit.UIColor, navigationBarTintColor: UIKit.UIColor)
}
extension PayologyCheckCaptureSDK.TemplateControllerConfiguration {
  public struct Attributes {
    public var titleTextAttributes: [Foundation.NSAttributedString.Key : Any]
    public var navigationItemTextAttributes: [Foundation.NSAttributedString.Key : Any]
    public var navigationItemHasImage: Swift.Bool
    public var prefersLargeTitles: Swift.Bool
    public var accentColor: UIKit.UIColor
    public var backgroundColor: UIKit.UIColor
    public var navigationBarBackgroundColor: UIKit.UIColor
    public var lightStatusBarBackground: UIKit.UIColor
    public var darkStatusBarBackground: UIKit.UIColor
    public var navigationBarTintColor: UIKit.UIColor
    public init(titleTextAttributes: [Foundation.NSAttributedString.Key : Any], navigationItemTextAttributes: [Foundation.NSAttributedString.Key : Any], prefersLargeTitles: Swift.Bool, navigationItemHasImage: Swift.Bool, accentColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, navigationBarBackgroundColor: UIKit.UIColor, lightStatusBarBackground: UIKit.UIColor, darkStatusBarBackground: UIKit.UIColor, navigationBarTintColor: UIKit.UIColor)
    public func configuration(title: Swift.String?) -> PayologyCheckCaptureSDK.TemplateControllerConfiguration
    public func navigationItemAttributedText(string: Swift.String, image: UIKit.UIImage?) -> Foundation.NSAttributedString
    public static func getFullScreenAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateControllerConfiguration.Attributes
    public static func getPaymentScreenAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateControllerConfiguration.Attributes
  }
}
extension PayologyCheckCaptureSDK.TemplateControllerConfiguration {
  public static var clean: PayologyCheckCaptureSDK.TemplateControllerConfiguration {
    get
  }
  public static var darkened: PayologyCheckCaptureSDK.TemplateControllerConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControllerConfiguration.Attributes {
  public static var standardFullScreen: PayologyCheckCaptureSDK.TemplateControllerConfiguration.Attributes {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControllerConfiguration.Attributes {
  public static var standardPaymentScreen: PayologyCheckCaptureSDK.TemplateControllerConfiguration.Attributes {
    get
  }
}
extension CoreFoundation.CGFloat : PayologyCheckCaptureSDK.PayologyJSONValue {
  public init?(_ component: PayologyCheckCaptureSDK.PayologyJSONComponent)
  public func jsonComponent(label: Swift.String, isOptional: Swift.Bool) -> PayologyCheckCaptureSDK.PayologyJSONComponent
}
@objc @_Concurrency.MainActor(unsafe) public class TemplateBottomSheetView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let lineView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let backgroundView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var dismissButton: PayologyCheckCaptureSDK.PayologyButton?
  @_Concurrency.MainActor(unsafe) public var dismissButtonView: PayologyCheckCaptureSDK.TemplateControlButtonView?
  @_Concurrency.MainActor(unsafe) public init(configuration: PayologyCheckCaptureSDK.TemplateBottomSheetView.Configuration, dismissButton: PayologyCheckCaptureSDK.PayologyButton)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateBottomSheetView {
  public struct Configuration {
    public var lineViewSize: CoreFoundation.CGSize
    public var lineViewCornerRadius: CoreFoundation.CGFloat
    public var lineViewColor: UIKit.UIColor
    public var backgroundColor: UIKit.UIColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: UIKit.UIColor
    public init(lineViewSize: CoreFoundation.CGSize, lineViewCornerRadius: CoreFoundation.CGFloat, lineViewColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor)
    public static func getBottomSheetConfiguration(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateBottomSheetView.Configuration
  }
}
extension PayologyCheckCaptureSDK.TemplateBottomSheetView.Configuration {
  public static var standard: PayologyCheckCaptureSDK.TemplateBottomSheetView.Configuration {
    get
  }
}
public struct TemplateImageProcessorAttributeContainer : PayologyCheckCaptureSDK.PayologyImageProcessorAttributeContainer {
  public var titlePhotoCaptureLabelAttributeConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration
  public var noticePhotoCaptureLabelAttributeConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration
  public var photoCaptureIntroAttributeConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.AttributeConfiguration
  public var loadingViewAttributeConfiguration: PayologyCheckCaptureSDK.TemplateLoadingView.AttributeConfiguration
  public init(template: PayologyCheckCaptureSDK.PayologyTemplate = .standard)
}
extension Swift.Dictionary where Key == PayologyCheckCaptureSDK.PayologyDateValidationResult, Value == PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration {
  public init(attributeConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration)
}
extension AVFoundation.AVCapturePhoto {
  public var image: UIKit.UIImage? {
    get
  }
}
public enum PayologyUSACroppedMICRType : Swift.String, PayologyCheckCaptureSDK.PayologyType {
  case RCA
  case CRA
  case RA
  case RAC
  case unknown
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyUSACroppedMICRType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyUSACroppedMICRType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) final public class PayologyNumberField : PayologyCheckCaptureSDK.PayologyTextField, PayologyCheckCaptureSDK.PayologyNumberFormatter {
  @_Concurrency.MainActor(unsafe) final public var numberType: PayologyCheckCaptureSDK.PayologyNumberType
  @_Concurrency.MainActor(unsafe) final public let numberFormatter: Foundation.NumberFormatter
  @_Concurrency.MainActor(unsafe) public init(numberType: PayologyCheckCaptureSDK.PayologyNumberType)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class PayologyButtonAlert {
  weak public var payologyButton: PayologyCheckCaptureSDK.PayologyButton?
  final public let alertController: UIKit.UIAlertController
  final public let confirmActionTitle: Swift.String
  final public let confirmActionStyle: UIKit.UIAlertAction.Style
  final public let denyActionTitle: Swift.String
  final public let denyActionStyle: UIKit.UIAlertAction.Style
  weak public var alertPresenter: UIKit.UIViewController?
  public init(payologyButton: PayologyCheckCaptureSDK.PayologyButton, title: Swift.String?, message: Swift.String?, preferredStyle: UIKit.UIAlertController.Style, confirmActionTitle: Swift.String, confirmActionStyle: UIKit.UIAlertAction.Style, denyActionTitle: Swift.String, denyActionStyle: UIKit.UIAlertAction.Style, alertPresenter: UIKit.UIViewController)
  @objc deinit
}
public struct TemplateButtonAlertConfiguration {
  public var title: Swift.String?
  public var message: Swift.String?
  public var confirmTitle: Swift.String
  public var denyTitle: Swift.String
  public init(title: Swift.String?, message: Swift.String?, confirmTitle: Swift.String, denyTitle: Swift.String)
}
extension PayologyCheckCaptureSDK.TemplateButtonAlertConfiguration {
  public static func cancelButtonAlertConfiguration(message: Swift.String? = nil) -> PayologyCheckCaptureSDK.TemplateButtonAlertConfiguration
  public static func backButtonAlertConfiguration(message: Swift.String? = nil) -> PayologyCheckCaptureSDK.TemplateButtonAlertConfiguration
}
extension PayologyCheckCaptureSDK.TemplateTitleView {
  public struct CodableAttributeConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var font: PayologyCheckCaptureSDK.CodableFont
    public var textColor: PayologyCheckCaptureSDK.CodableColor
    public var textAlignment: Swift.String
    public var lineColor: PayologyCheckCaptureSDK.CodableColor
    public var lineWidth: CoreFoundation.CGFloat
    public init(font: PayologyCheckCaptureSDK.CodableFont, textColor: PayologyCheckCaptureSDK.CodableColor, textAlignment: PayologyCheckCaptureSDK.CodableTextAlignment, lineColor: PayologyCheckCaptureSDK.CodableColor, lineWidth: CoreFoundation.CGFloat)
  }
}
extension PayologyCheckCaptureSDK.TemplateTitleView.CodableAttributeConfiguration {
  public init?(_ attributeConfiguration: PayologyCheckCaptureSDK.TemplateTitleView.AttributeConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateTitleView.CodableAttributeConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateTitleView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTitleView.AttributeConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateTitleView.CodableAttributeConfiguration? {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTitleView.CodableAttributeConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateTitleView.CodableAttributeConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_Concurrency.MainActor(unsafe) final public class PayologyMenuButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: (any PayologyCheckCaptureSDK.PayologyMenuButtonDelegate)?
  @_Concurrency.MainActor(unsafe) final public var payologyMenuButtonAlert: PayologyCheckCaptureSDK.PayologyMenuButtonAlert?
  @_Concurrency.MainActor(unsafe) final public var menuType: any PayologyCheckCaptureSDK.PayologyType.Type {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var selectedOption: any PayologyCheckCaptureSDK.PayologyType
  @_Concurrency.MainActor(unsafe) public init(menuType: any PayologyCheckCaptureSDK.PayologyType.Type)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyMenuButton {
  @_Concurrency.MainActor(unsafe) final public func triggerPayologyMenuButtonAction(_ selectedOptionDescription: Swift.String?)
}
public protocol PayologyImageProcessorActivityMonitor : PayologyCheckCaptureSDK.PayologyActivityMonitor {
  func payologyPhotoCaptureDidDismiss(hasBackgroundActivity: Swift.Bool)
  func photoReviewStatusHasBeenUpdated(registrar: PayologyCheckCaptureSDK.PayologyImageProcessorNetworkRegistrar, photoReviewStatus: PayologyCheckCaptureSDK.PayologyPhotoReviewStatus, payologyInterfaceIsActive: Swift.Bool)
}
extension PayologyCheckCaptureSDK.PayologyImageProcessorActivityMonitor {
  public func presentPayologyImageProcessorInterface(with configuration: any PayologyCheckCaptureSDK.PayologyImageProcessorConfiguration) throws
}
public struct TemplateTextFormatConfiguration {
  public var format: Swift.String
  public var attributes: [Foundation.NSAttributedString.Key : Any]
  public init(format: Swift.String, attributes: [Foundation.NSAttributedString.Key : Any])
  public func attributedText(arguments: any Swift.CVarArg...) -> Foundation.NSAttributedString?
}
@objc @_Concurrency.MainActor(unsafe) public class TemplateTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) public init(configuration: PayologyCheckCaptureSDK.TemplateTextView.Configuration, isScrollEnabled: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateTextView {
  public struct Configuration {
    public var textContainerInset: UIKit.UIEdgeInsets
    public var attributedText: Foundation.NSAttributedString?
    public var isEditable: Swift.Bool
    public var backgroundColor: UIKit.UIColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: UIKit.UIColor
    public init(textContainerInset: UIKit.UIEdgeInsets, attributedText: Foundation.NSAttributedString?, isEditable: Swift.Bool, backgroundColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateTextView {
  public struct AttributeConfiguration {
    public var textContainerInset: UIKit.UIEdgeInsets
    public var textAttributes: [Foundation.NSAttributedString.Key : Any]
    public var isEditable: Swift.Bool
    public var backgroundColor: UIKit.UIColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: UIKit.UIColor
    public init(textContainerInset: UIKit.UIEdgeInsets, textAttributes: [Foundation.NSAttributedString.Key : Any], isEditable: Swift.Bool, backgroundColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor)
    public func configuration(text: Swift.String?) -> PayologyCheckCaptureSDK.TemplateTextView.Configuration
    public static func getScrollableNoticeAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration
    public static func getStaticNoticeAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration
    public static func getTitleAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration
  }
}
extension PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration {
  public static var standardScrollableNotice: PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration {
  public static var standardStaticNotice: PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration {
  public static var standardTitle: PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration {
    get
  }
}
open class PayologyCroppedMICRFormatter {
  public var croppedMICR: Swift.String {
    get
  }
  public init()
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyCroppedMICRFormatter {
  public func setNumber(to newNumber: Swift.String, numberIndexes: [Swift.Int])
}
open class PayologyCheckCaptureEntryConfiguration : PayologyCheckCaptureSDK.PayologyAmountEntryConfiguration {
  weak public var checkCaptureEntryDelegate: (any PayologyCheckCaptureSDK.PayologyCheckCaptureEntryDelegate)?
  final public let checkFrontNetworkRegistrar: PayologyCheckCaptureSDK.PayologyCheckFrontNetworkRegistrar
  final public let checkRearNetworkRegistrar: PayologyCheckCaptureSDK.PayologyCheckRearNetworkRegistrar
  public init(checkCaptureEntryDelegate: any PayologyCheckCaptureSDK.PayologyCheckCaptureEntryDelegate, amountConstraint: PayologyCheckCaptureSDK.PayologyAmountConstraint, checkFrontNetworkRegistrar: PayologyCheckCaptureSDK.PayologyCheckFrontNetworkRegistrar, checkRearNetworkRegistrar: PayologyCheckCaptureSDK.PayologyCheckRearNetworkRegistrar)
  @objc deinit
}
public struct TemplateEventAlertCodableConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
  public var title: Swift.String?
  public var message: Swift.String?
  public var actionTitle: Swift.String
  public init(title: Swift.String?, message: Swift.String?, actionTitle: Swift.String)
}
extension PayologyCheckCaptureSDK.TemplateEventAlertCodableConfiguration {
  public init(_ configuration: PayologyCheckCaptureSDK.TemplateEventAlertConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateEventAlertCodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateEventAlertConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateEventAlertConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateEventAlertCodableConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateEventAlertCodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateEventAlertCodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CodableRect : Swift.Codable {
  public let origin: PayologyCheckCaptureSDK.CodablePoint
  public let size: PayologyCheckCaptureSDK.CodableSize
  public init(origin: PayologyCheckCaptureSDK.CodablePoint, size: PayologyCheckCaptureSDK.CodableSize)
  public init(_ cgRect: CoreFoundation.CGRect)
  public init()
  public var cgValue: CoreFoundation.CGRect {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension CoreFoundation.CGRect {
  public var codableValue: PayologyCheckCaptureSDK.CodableRect {
    get
  }
}
extension PayologyCheckCaptureSDK.CodableRect : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.CodableRect
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
extension Swift.Array where Element == PayologyCheckCaptureSDK.CodableRect {
  public var cgValue: [CoreFoundation.CGRect] {
    get
  }
}
extension Swift.Array where Element == CoreFoundation.CGRect {
  public var codableValue: [PayologyCheckCaptureSDK.CodableRect] {
    get
  }
}
public struct PayologyCheckFrontResponseModel : PayologyCheckCaptureSDK.PayologyNetworkResponseModel {
  public let tempID: Swift.String
  public let croppedMICR: Swift.String?
  public let routingNumber: Swift.String?
  public let accountNumber: Swift.String?
  public let checkNumber: Swift.String?
  public let recognitionResult: PayologyCheckCaptureSDK.CheckFrontRecognitionResult?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case tempID
    case croppedMICR
    case routingNumber
    case accountNumber
    case checkNumber
    case recognitionResult
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public var locale: PayologyCheckCaptureSDK.PayologyLocale? {
    get
  }
  public var amountValue: Foundation.Decimal? {
    get
  }
  public var date: Swift.String? {
    get
  }
  public var USACroppedMICRAttributes: PayologyCheckCaptureSDK.PayologyUSACroppedMICRAttributes? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckFrontRecognitionResult : Swift.Codable {
  public let request: PayologyCheckCaptureSDK.CheckFrontRecognitionRequest?
  public let response: PayologyCheckCaptureSDK.CheckFrontRecognitionResponse?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case request
    case response
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckFrontRecognitionRequest : Swift.Codable {
  public let IQASetID: Swift.String?
  public let docID: Swift.Int?
  public let MICRBuffer: Swift.String?
  public let carICRSetId: Swift.Double?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case IQASetID
    case docID
    case MICRBuffer
    case carICRSetId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckFrontRecognitionResponse : Swift.Codable {
  public let generalInformation: PayologyCheckCaptureSDK.CheckFrontRecognitionGeneralInformation?
  public let status: Swift.String?
  public let imageAnalisys: PayologyCheckCaptureSDK.CheckFrontRecognitionImageAnalysis?
  public let fields: PayologyCheckCaptureSDK.CheckFrontRecognitionFields?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case generalInformation
    case status
    case imageAnalisys
    case fields
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckFrontRecognitionGeneralInformation : Swift.Codable {
  public let country: Swift.String?
  public let errorCode: Swift.Double?
  public let errorMessage: Swift.String?
  public let engine: Swift.String?
  public let elapsedTimeInMiliSec: Swift.Double?
  public let imageOrientation: Swift.String?
  public let imageOrientationFeature: Swift.String?
  public let docType: Swift.String?
  public let paperName: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case country
    case errorCode
    case errorMessage
    case engine
    case elapsedTimeInMiliSec
    case imageOrientation
    case imageOrientationFeature
    case docType
    case paperName
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckFrontRecognitionImageAnalysis : Swift.Codable {
  public let enabled: Swift.Bool?
  public let qualityTests: PayologyCheckCaptureSDK.CheckFrontRecognitionImageAnalysisTests?
  public let usabilityTests: PayologyCheckCaptureSDK.CheckFrontRecognitionImageAnalysisTests?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case enabled
    case qualityTests
    case usabilityTests
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckFrontRecognitionImageAnalysisTests : Swift.Codable {
  public let enabled: Swift.Bool?
  public let test: [PayologyCheckCaptureSDK.CheckFrontRecognitionImageAnalysisTest]?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case enabled
    case test
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckFrontRecognitionImageAnalysisTest : Swift.Codable {
  public let name: Swift.String?
  public let content: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case name
    case content
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckFrontRecognitionFields : Swift.Codable {
  public let field: [PayologyCheckCaptureSDK.CheckFrontRecognitionField]?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case field
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckFrontRecognitionField : Swift.Codable {
  public let name: Swift.String?
  public let value: PayologyCheckCaptureSDK.CheckFrontRecognitionFieldValue?
  public let accepted: Swift.Bool?
  public let location: PayologyCheckCaptureSDK.CheckFrontRecognitionLocationField?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case name
    case value
    case accepted
    case location
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckFrontRecognitionLocationField : Swift.Codable {
  public let top: Swift.Int?
  public let left: Swift.Int?
  public let right: Swift.Int?
  public let bottom: Swift.Int?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case top
    case left
    case right
    case bottom
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum CheckFrontRecognitionFieldValue : Swift.Codable {
  case string(Swift.String)
  case double(Swift.Double)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension PayologyCheckCaptureSDK.PayologyViewControllerDelegate {
  public func getCheckCaptureEntryViewController(configuration: PayologyCheckCaptureSDK.PayologyCheckCaptureEntryConfiguration) throws -> PayologyCheckCaptureSDK.PayologyCheckCaptureEntryViewController
  public func getCheckCaptureConfirmationViewController(configuration: PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationConfiguration) throws -> PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController
}
public struct TemplateTableViewConfiguration {
  public var backgroundColor: UIKit.UIColor
  public var maximumHeight: CoreFoundation.CGFloat?
  public var cornerRadius: CoreFoundation.CGFloat
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public init(backgroundColor: UIKit.UIColor, maximumHeight: CoreFoundation.CGFloat?, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor)
}
extension PayologyCheckCaptureSDK.TemplateTableViewConfiguration {
  public static func getConfiguration(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateTableViewConfiguration
  public static var standard: PayologyCheckCaptureSDK.TemplateTableViewConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTableViewConfiguration {
  public func withMaximumHeight(equalTo maximumHeight: CoreFoundation.CGFloat) -> PayologyCheckCaptureSDK.TemplateTableViewConfiguration
}
public struct PayologyJSONComponent {
  public let codableType: PayologyCheckCaptureSDK.PayologyCodableType
  public let label: Swift.String
  public let isOptional: Swift.Bool
  public init(codableType: PayologyCheckCaptureSDK.PayologyCodableType, label: Swift.String, isOptional: Swift.Bool)
  public init(codableType: PayologyCheckCaptureSDK.PayologyCodableType, key: any Swift.CodingKey, isOptional: Swift.Bool)
}
extension PayologyCheckCaptureSDK.PayologyJSONComponent {
  public var jsonStringFormatted: Swift.String? {
    get
  }
  public var jsonStringFormatValue: Swift.String? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyJSONComponent {
  public var scriptFormatted: Swift.String? {
    get
  }
  public var scriptFormatValue: Swift.String? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyJSONComponent {
  public var scriptTypeSnippet: Swift.String {
    get
  }
}
extension Swift.Array where Element == PayologyCheckCaptureSDK.PayologyJSONComponent {
  public var jsonStringFormatValue: Swift.String {
    get
  }
}
extension Swift.Array where Element == PayologyCheckCaptureSDK.PayologyJSONComponent {
  public var scriptFormatValue: Swift.String {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) convenience public init(spacing: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func withAlphaComponent(_ alpha: CoreFoundation.CGFloat) -> Self
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func performShakeAnimation(duration: Foundation.TimeInterval = 0.4)
  @_Concurrency.MainActor(unsafe) public func performAlphaAnimation(from startAlpha: CoreFoundation.CGFloat? = nil, to finalAlpha: CoreFoundation.CGFloat, duration: Foundation.TimeInterval = 0.8, completion handler: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func setBackgroundColorWithAnimation(to color: UIKit.UIColor, duration: Foundation.TimeInterval = 0.4)
  @_Concurrency.MainActor(unsafe) public func performExpandCompressAnimation(duration: Foundation.TimeInterval = 1.0, expansionScale: CoreFoundation.CGFloat = 1.2)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func setGradientBackground(colors: [UIKit.UIColor])
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func disableSubviewsAutoresizing()
  @_Concurrency.MainActor(unsafe) public func removeAllSubviews()
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func rotateClockwise(_ radians: CoreFoundation.CGFloat)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func dismissKeyboardIfNeeded()
  @_Concurrency.MainActor(unsafe) public func addDoneToolbarItem(onDone: (target: Any, action: ObjectiveC.Selector)? = nil)
}
open class PayologyViewControllerConfiguration {
  weak public var delegate: (any PayologyCheckCaptureSDK.PayologyViewControllerDelegate)?
  public init(delegate: any PayologyCheckCaptureSDK.PayologyViewControllerDelegate)
  @objc deinit
}
public protocol PayologyImageProcessorDelegate : PayologyCheckCaptureSDK.PayologyPhotoCaptureDelegate {
}
extension PayologyCheckCaptureSDK.PayologyImageProcessorDelegate {
  public var imageProcessorConfiguration: (any PayologyCheckCaptureSDK.PayologyImageProcessorConfiguration)? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyImageProcessorDelegate {
  public func userShouldStartPhotoCapture(_ sender: any PayologyCheckCaptureSDK.PayologyPhotoCaptureRequester, photoTypes: [PayologyCheckCaptureSDK.PayologyPhotoType])
}
public protocol PayologyCheckCaptureConfiguration : PayologyCheckCaptureSDK.PayologyFrameworkConfiguration {
  var amountConstraint: PayologyCheckCaptureSDK.PayologyAmountConstraint { get }
}
extension PayologyCheckCaptureSDK.PayologyFrameworkConfiguration {
  public var checkCaptureConfiguration: (any PayologyCheckCaptureSDK.PayologyCheckCaptureConfiguration)? {
    get
  }
  public var checkCaptureDesignContainer: (any PayologyCheckCaptureSDK.PayologyCheckCaptureDesignContainer)? {
    get
  }
  public var checkCaptureTypeContainer: (any PayologyCheckCaptureSDK.PayologyCheckCaptureTypeContainer)? {
    get
  }
  public var checkCaptureAttributeContainer: (any PayologyCheckCaptureSDK.PayologyCheckCaptureAttributeContainer)? {
    get
  }
}
public struct PhotoCaptureLoadingCodableConfigurationContainer : PayologyCheckCaptureSDK.ControllerCodableConfigurationContainer {
  public init(_ configurationContainer: any PayologyCheckCaptureSDK.PhotoCaptureLoadingConfigurationContainer) throws
  public init(_ attributeContainer: any PayologyCheckCaptureSDK.PayologyImageProcessorAttributeContainer) throws
}
extension PayologyCheckCaptureSDK.PhotoCaptureLoadingCodableConfigurationContainer {
  public func configurationContainer() throws -> any PayologyCheckCaptureSDK.PhotoCaptureLoadingConfigurationContainer
}
extension PayologyCheckCaptureSDK.PhotoCaptureLoadingConfigurationContainer {
  public var codableValue: PayologyCheckCaptureSDK.PhotoCaptureLoadingCodableConfigurationContainer? {
    get
  }
}
extension PayologyCheckCaptureSDK.PhotoCaptureLoadingCodableConfigurationContainer : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.PhotoCaptureLoadingCodableConfigurationContainer
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ControllerInterfaceManager : PayologyCheckCaptureSDK.PayologyViewController {
  var statusBarBackgroundView: UIKit.UIView { get }
}
extension PayologyCheckCaptureSDK.ControllerInterfaceManager {
  public func configureControllerUserInterface(_ configurationContainer: any PayologyCheckCaptureSDK.ControllerConfigurationContainer)
}
extension PayologyCheckCaptureSDK.ControllerInterfaceManager {
  public func assertControllerAppearence(_ configurationContainer: any PayologyCheckCaptureSDK.ControllerConfigurationContainer)
}
extension Swift.Float : PayologyCheckCaptureSDK.PayologyJSONValue {
  public init?(_ component: PayologyCheckCaptureSDK.PayologyJSONComponent)
  public func jsonComponent(label: Swift.String, isOptional: Swift.Bool) -> PayologyCheckCaptureSDK.PayologyJSONComponent
}
public class PayologyUSACroppedMICRFormatter : PayologyCheckCaptureSDK.PayologyCroppedMICRFormatter {
  final public let OCRCroppedMICR: Swift.String
  final public let OCRMICRAttributes: PayologyCheckCaptureSDK.PayologyUSACroppedMICRAttributes
  final public let transitSymbol: Swift.String
  final public let onUsSymbol: Swift.String
  final public let dashSymbol: Swift.String
  public init(OCRCroppedMICR: Swift.String, OCRMICRAttributes: PayologyCheckCaptureSDK.PayologyUSACroppedMICRAttributes, userMICRAttributes: PayologyCheckCaptureSDK.PayologyUSACroppedMICRAttributes?)
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyUSACroppedMICRFormatter {
  public func setRoutingNumber(to routingNumber: Swift.String)
  public func setAccountNumber(to accountNumber: Swift.String)
  public func setCheckNumber(to checkNumber: Swift.String)
}
open class PayologyPhotoCaptureLoadingConfiguration : PayologyCheckCaptureSDK.PayologyLoadingConfiguration {
  weak public var photoCaptureRequester: (any PayologyCheckCaptureSDK.PayologyPhotoCaptureRequester)?
  final public let photoType: PayologyCheckCaptureSDK.PayologyPhotoType
  public init(loadingDelegate: any PayologyCheckCaptureSDK.PayologyLoadingDelegate, photoCaptureRequester: any PayologyCheckCaptureSDK.PayologyPhotoCaptureRequester, photoType: PayologyCheckCaptureSDK.PayologyPhotoType)
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyAssets {
  public struct StandardPhotoButtonImage {
    public static var uiImage: UIKit.UIImage? {
      get
    }
    public static var aspectRatio: CoreFoundation.CGFloat {
      get
    }
  }
}
final public class PayologyCheckImageProcessorRequest : PayologyCheckCaptureSDK.PayologyNetworkRequest {
  public init?(imageProcessorRequestConfiguration: any PayologyCheckCaptureSDK.PayologyImageProcessorRequestConfiguration, base64EncodedImage: Swift.String, tempID: Swift.String)
  @objc deinit
}
extension Swift.Dictionary where Key == Swift.String, Value == PayologyCheckCaptureSDK.TemplateImageButtonView.CodableColorConfiguration {
  public var imageButtonNetworkReviewStatusValue: [PayologyCheckCaptureSDK.TemplateImageButtonView.NetworkReviewStatus : PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration] {
    get
  }
}
extension Swift.Dictionary where Key == PayologyCheckCaptureSDK.TemplateImageButtonView.NetworkReviewStatus, Value == PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration {
  public var codableValue: [Swift.String : PayologyCheckCaptureSDK.TemplateImageButtonView.CodableColorConfiguration] {
    get
  }
}
public struct TemplateCheckCaptureConfiguration : PayologyCheckCaptureSDK.PayologyCheckCaptureConfiguration {
  public let configurationType: PayologyCheckCaptureSDK.PayologyConfigurationType
  weak public var hostViewController: UIKit.UIViewController?
  public let dynamicKeys: [any PayologyCheckCaptureSDK.PayologyDynamicKey]
  public let designContainer: any PayologyCheckCaptureSDK.PayologyDesignContainer
  public let requestConfiguration: any PayologyCheckCaptureSDK.PayologyNetworkRequestConfiguration
  public let amountConstraint: PayologyCheckCaptureSDK.PayologyAmountConstraint
  public init(hostViewController: UIKit.UIViewController, dynamicKeys: [any PayologyCheckCaptureSDK.PayologyDynamicKey] = [], designContainer: any PayologyCheckCaptureSDK.PayologyDesignContainer = TemplateCheckCaptureDesignContainer(), requestConfiguration: any PayologyCheckCaptureSDK.PayologyNetworkRequestConfiguration, amountConstraint: PayologyCheckCaptureSDK.PayologyAmountConstraint)
}
extension PayologyCheckCaptureSDK.TemplateAreaIndicatorView {
  public struct CodableConfiguration : Swift.Codable {
    public var areaIndicatorViewBorderWidth: CoreFoundation.CGFloat
    public var areaIndicatorViewBorderColor: PayologyCheckCaptureSDK.CodableColor
    public var maskViewBackgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var topMaskViewMultiplier: CoreFoundation.CGFloat
    public var leadingMaskViewMultiplier: CoreFoundation.CGFloat
    public var traillingMaskViewMultiplier: CoreFoundation.CGFloat
    public var bottomMaskViewMultiplier: CoreFoundation.CGFloat
    public var endorsementAttributedText: PayologyCheckCaptureSDK.CodableAttributedString?
    public var endorsementLineHeight: CoreFoundation.CGFloat
    public var endorsementLineColor: PayologyCheckCaptureSDK.CodableColor
    public init(areaIndicatorViewBorderWidth: CoreFoundation.CGFloat, areaIndicatorViewBorderColor: PayologyCheckCaptureSDK.CodableColor, maskViewBackgroundColor: PayologyCheckCaptureSDK.CodableColor, topMaskViewMultiplier: CoreFoundation.CGFloat, leadingMaskViewMultiplier: CoreFoundation.CGFloat, traillingMaskViewMultiplier: CoreFoundation.CGFloat, bottomMaskViewMultiplier: CoreFoundation.CGFloat, endorsementAttributedText: PayologyCheckCaptureSDK.CodableAttributedString?, endorsementLineHeight: CoreFoundation.CGFloat, endorsementLineColor: PayologyCheckCaptureSDK.CodableColor)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension PayologyCheckCaptureSDK.TemplateAreaIndicatorView.CodableConfiguration {
  public init(_ configuration: PayologyCheckCaptureSDK.TemplateAreaIndicatorView.Configuration)
}
extension PayologyCheckCaptureSDK.TemplateAreaIndicatorView.CodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateAreaIndicatorView.Configuration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateAreaIndicatorView.Configuration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateAreaIndicatorView.CodableConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateAreaIndicatorView.CodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateAreaIndicatorView.CodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView {
  public struct CodableAttributeConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var size: PayologyCheckCaptureSDK.CodableSize
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var titleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var image: PayologyCheckCaptureSDK.CodableImage?
    public var tintColor: PayologyCheckCaptureSDK.CodableColor
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var borderColor: PayologyCheckCaptureSDK.CodableColor
    public init(size: PayologyCheckCaptureSDK.CodableSize, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, titleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, image: PayologyCheckCaptureSDK.CodableImage?, tintColor: PayologyCheckCaptureSDK.CodableColor, backgroundColor: PayologyCheckCaptureSDK.CodableColor, borderColor: PayologyCheckCaptureSDK.CodableColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView.CodableAttributeConfiguration {
  public init(_ attributeConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.AttributeConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView.CodableAttributeConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateControlButtonView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView.AttributeConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateControlButtonView.CodableAttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView.CodableAttributeConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateControlButtonView.CodableAttributeConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PayologyCheckCaptureDelegate : PayologyCheckCaptureSDK.PayologyCheckCaptureEntryDelegate, PayologyCheckCaptureSDK.PayologyImageProcessorDelegate {
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureDelegate {
  public var checkCaptureConfiguration: (any PayologyCheckCaptureSDK.PayologyCheckCaptureConfiguration)? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureDelegate {
  public func terminateCheckCaptureAfterUserConfirmation(_ sender: PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController, with checkCaptureData: PayologyCheckCaptureSDK.PayologyCheckCaptureData)
}
extension UIKit.UIColor {
  public static let payologyLightPurple: UIKit.UIColor
  public static let payologyPurple: UIKit.UIColor
  public static let payologyDarkPurple: UIKit.UIColor
  public static let payologyGray: UIKit.UIColor
  public static let payologyLightGray: UIKit.UIColor
  public static let payologyLightGray2: UIKit.UIColor
  public static let payologyDarkGray: UIKit.UIColor
  public static let payologyLightBlue: UIKit.UIColor
}
extension UIKit.UIColor {
  convenience public init?(hexString: Swift.String)
  public var hexString: Swift.String {
    get
  }
}
public struct TemplateCheckCaptureEntryConfigurationContainer : PayologyCheckCaptureSDK.CheckCaptureEntryConfigurationContainer {
  public var controllerConfiguration: PayologyCheckCaptureSDK.TemplateControllerConfiguration
  public var cancelNavigationButtonConfiguration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration
  public var cancelButtonAlertConfiguration: PayologyCheckCaptureSDK.TemplateButtonAlertConfiguration
  public var titleViewConfiguration: PayologyCheckCaptureSDK.TemplateTitleView.Configuration
  public var amountFieldConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration
  public var shoudPerformAmountErrorAnimation: Swift.Bool
  public var amountSubtitleExactAmountFormatConfiguration: PayologyCheckCaptureSDK.TemplateTextFormatConfiguration?
  public var amountSubtitleRangeAmountFormatConfiguration: PayologyCheckCaptureSDK.TemplateTextFormatConfiguration?
  public var noticeTextViewConfiguration: PayologyCheckCaptureSDK.TemplateTextView.Configuration
  public var nextButtonConfiguration: PayologyCheckCaptureSDK.TemplateCoreButtonView.Configuration
  public var checkFrontButtonShouldPerformDualCapture: Swift.Bool
  public var checkFrontButtonConfiguration: PayologyCheckCaptureSDK.TemplateImageButtonView.Configuration
  public var checkFrontButtonReviewStatusColorConfiguration: [PayologyCheckCaptureSDK.TemplateImageButtonView.NetworkReviewStatus : PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration]
  public var checkRearButtonConfiguration: PayologyCheckCaptureSDK.TemplateImageButtonView.Configuration
  public var checkRearButtonReviewStatusColorConfiguration: [PayologyCheckCaptureSDK.TemplateImageButtonView.NetworkReviewStatus : PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration]
  public init(_ attributeContainer: any PayologyCheckCaptureSDK.PayologyCheckCaptureAttributeContainer)
}
@objc @_Concurrency.MainActor(unsafe) open class PayologyNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func cleanMemoryUsage()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func pushViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc deinit
}
extension Swift.Double {
  public init?(_ value: Swift.Int?)
  public var wholeNumberDigits: Swift.Int {
    get
  }
}
public protocol ControllerCodableConfigurationContainer : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
}
@objc @_Concurrency.MainActor(unsafe) open class PayologyPhotoCaptureViewController : PayologyCheckCaptureSDK.PayologyViewController {
  @_Concurrency.MainActor(unsafe) weak public var photoCaptureDelegate: (any PayologyCheckCaptureSDK.PayologyPhotoCaptureDelegate)?
  @_Concurrency.MainActor(unsafe) weak public var photoCaptureRequester: (any PayologyCheckCaptureSDK.PayologyPhotoCaptureRequester)?
  @_Concurrency.MainActor(unsafe) final public let photoTypes: [PayologyCheckCaptureSDK.PayologyPhotoType]
  @_Concurrency.MainActor(unsafe) final public let photoCaptureIntroType: PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController.Type
  @_Concurrency.MainActor(unsafe) public var currentPhotoType: PayologyCheckCaptureSDK.PayologyPhotoType {
    get
  }
  @_Concurrency.MainActor(unsafe) final public let captureSession: AVFoundation.AVCaptureSession
  @_Concurrency.MainActor(unsafe) final public let device: AVFoundation.AVCaptureDevice
  @_Concurrency.MainActor(unsafe) final public let deviceInput: AVFoundation.AVCaptureDeviceInput
  @_Concurrency.MainActor(unsafe) final public let photoOutput: AVFoundation.AVCapturePhotoOutput
  @_Concurrency.MainActor(unsafe) final public let videoOutput: AVFoundation.AVCaptureVideoDataOutput
  @_Concurrency.MainActor(unsafe) final public let videoQueue: Dispatch.DispatchQueue
  @_Concurrency.MainActor(unsafe) public var photoSettings: AVFoundation.AVCapturePhotoSettings
  @_Concurrency.MainActor(unsafe) final public let previewLayer: AVFoundation.AVCaptureVideoPreviewLayer
  @_Concurrency.MainActor(unsafe) public var autoCaptureDurationInterval: Foundation.TimeInterval?
  @_Concurrency.MainActor(unsafe) public var autoCaptureStartDelay: Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) final public let dismissButton: PayologyCheckCaptureSDK.PayologyButton
  @_Concurrency.MainActor(unsafe) final public let manualCaptureButton: PayologyCheckCaptureSDK.PayologyButton
  @_Concurrency.MainActor(unsafe) required public init(configuration: PayologyCheckCaptureSDK.PayologyPhotoCaptureConfiguration) throws
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public func userDidTapPayologyButton(_ button: PayologyCheckCaptureSDK.PayologyButton)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func autoCaptureValidationResultDidUpdate(_ validationResult: PayologyCheckCaptureSDK.PayologyPhotoValidationResult, _ photoType: PayologyCheckCaptureSDK.PayologyPhotoType)
  @_Concurrency.MainActor(unsafe) open func willPresentPhotoCaptureIntro(_ photoType: PayologyCheckCaptureSDK.PayologyPhotoType)
  @_Concurrency.MainActor(unsafe) open func willStartPhotoCapture(_ photoType: PayologyCheckCaptureSDK.PayologyPhotoType)
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController {
  @_Concurrency.MainActor(unsafe) public var isInAutoCapture: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isInManualCapture: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isDisabled: Swift.Bool {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController : AVFoundation.AVCapturePhotoCaptureDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: (any Swift.Error)?)
}
extension PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func embedChild(_ childController: UIKit.UIViewController, animated: Swift.Bool = true, completion handler: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func disembedFromParent(animated: Swift.Bool = true, completion handler: (() -> Swift.Void)? = nil)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func presentAlert(title: Swift.String?, message: Swift.String?)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func setPortraitDeviceOrientationIfNeeded()
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) convenience public init(indicatorStyle: UIKit.UIActivityIndicatorView.Style, indicatorColor: UIKit.UIColor, backgroundColor: UIKit.UIColor = .lightGray.withAlphaComponent(0.5))
}
public struct PayologyImage {
  public let image: UIKit.UIImage
  public let color: UIKit.UIColor
  public init(image: UIKit.UIImage, color: UIKit.UIColor)
  public init?(image: UIKit.UIImage?, color: UIKit.UIColor)
}
public struct PayologyCheckRearImageResponseModel : PayologyCheckCaptureSDK.PayologyNetworkResponseModel {
  public let tempID: Swift.String
  public let croppedTIFF: Swift.String?
  public let base64TIFF: Swift.String?
  public let base64JPG: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case tempID
    case croppedTIFF
    case base64TIFF
    case base64JPG
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyCheckRearImageResponseModel {
  public var croppedTIFFImage: UIKit.UIImage? {
    get
  }
  public var base64TIFFImage: UIKit.UIImage? {
    get
  }
  public var base64JPGImage: UIKit.UIImage? {
    get
  }
}
public struct TemplatePhotoCaptureLoadingConfigurationContainer : PayologyCheckCaptureSDK.PhotoCaptureLoadingConfigurationContainer {
  public var controllerConfiguration: PayologyCheckCaptureSDK.TemplateControllerConfiguration
  public var loadingViewConfiguration: PayologyCheckCaptureSDK.TemplateLoadingView.Configuration
  public var croppedPhotoReviewTextConfigurations: [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration]
  public var originalPhotoReviewTextConfigurations: [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration]
  public var failurePhotoReviewTextConfigurations: [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration]
  public init(_ attributeContainer: any PayologyCheckCaptureSDK.PayologyImageProcessorAttributeContainer)
}
public protocol PayologyAmountEntryDelegate : PayologyCheckCaptureSDK.PayologyViewControllerDelegate {
}
public protocol PayologyNetworkMonitor {
  func logPayologyApplicationRequest(request: Foundation.URLRequest)
  func logPayologyRequestParameters(parameters: [Swift.String : Any])
  func logPayologyServerResponse(data: Foundation.Data, response: Foundation.URLResponse)
}
extension PayologyCheckCaptureSDK.PayologyNetworkMonitor {
  public func logPayologyApplicationRequest(request: Foundation.URLRequest)
  public func logPayologyRequestParameters(parameters: [Swift.String : Any])
  public func logPayologyServerResponse(data: Foundation.Data, response: Foundation.URLResponse)
}
public struct PayologyImageProcessorCodableRequestConfiguration : Swift.Codable, PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public var payologyValue: any PayologyCheckCaptureSDK.PayologyImageProcessorRequestConfiguration {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyImageProcessorCodableRequestConfiguration {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.PayologyImageProcessorCodableRequestConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
public protocol PayologyCheckCaptureDesignContainer : PayologyCheckCaptureSDK.PayologyImageProcessorDesignContainer {
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureDesignContainer {
  public var checkCaptureAttributeContainer: (any PayologyCheckCaptureSDK.PayologyCheckCaptureAttributeContainer)? {
    get
  }
  public var checkCaptureTypeContainer: (any PayologyCheckCaptureSDK.PayologyCheckCaptureTypeContainer)? {
    get
  }
}
public struct TemplateImageProcessorRequestConfiguration : Swift.Codable, PayologyCheckCaptureSDK.PayologyImageProcessorRequestConfiguration {
  public var imageProcessorBaseURL: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestBaseURL
  public var imageProcessorAPI: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestAPI
  public var licenseNumber: Swift.String
  public init(imageProcessorBaseURL: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestBaseURL = .STAGE_imageProcessorV63, imageProcessorAPI: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestAPI = .mobile, licenseNumber: Swift.String)
  public init(requestConfiguration: any PayologyCheckCaptureSDK.PayologyImageProcessorRequestConfiguration)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct USAAccountNumber : PayologyCheckCaptureSDK.PayologyNumber {
  public var numberString: Swift.String
  public let numberType: PayologyCheckCaptureSDK.PayologyNumberType
  public let locale: PayologyCheckCaptureSDK.PayologyLocale?
  public let minimumDigits: Swift.Int
  public let maximumDigits: Swift.Int
  public let hasCompleteDigits: Swift.Bool
  public init(_ numberString: Swift.String = "", hasCompleteDigits: Swift.Bool = true)
  public var isAnotherInvalid: Swift.Bool? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PayologyCheckCaptureSDK.USAAccountNumber, b: PayologyCheckCaptureSDK.USAAccountNumber) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public func dismissAlertControllerIfNeeded(completion: (() -> Swift.Void)? = nil)
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public func popViewControllers(numberToPop: Swift.Int, animated: Swift.Bool)
}
public protocol PayologyViewControllerDelegate : PayologyCheckCaptureSDK.PayologyDelegate {
  var configuration: any PayologyCheckCaptureSDK.PayologyFrameworkConfiguration { get }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView {
  public struct CodableConfiguration : Swift.Codable {
    public var widthMultiplier: CoreFoundation.CGFloat
    public var heightMultiplier: CoreFoundation.CGFloat
    public var backgroundViewCornerRadius: CoreFoundation.CGFloat
    public var backgroundViewBorderWidth: CoreFoundation.CGFloat
    public var backgroundViewColor: PayologyCheckCaptureSDK.CodableColor
    public var backgroundViewBorderColor: PayologyCheckCaptureSDK.CodableColor
    public var contentInsets: PayologyCheckCaptureSDK.CodableEdgesInsets
    public var stackViewSpacing: CoreFoundation.CGFloat
    public var lineViewColor: PayologyCheckCaptureSDK.CodableColor
    public init(widthMultiplier: CoreFoundation.CGFloat, heightMultiplier: CoreFoundation.CGFloat, backgroundViewCornerRadius: CoreFoundation.CGFloat, backgroundViewBorderWidth: CoreFoundation.CGFloat, backgroundViewColor: PayologyCheckCaptureSDK.CodableColor, backgroundViewBorderColor: PayologyCheckCaptureSDK.CodableColor, contentInsets: PayologyCheckCaptureSDK.CodableEdgesInsets, stackViewSpacing: CoreFoundation.CGFloat, lineViewColor: PayologyCheckCaptureSDK.CodableColor)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableConfiguration {
  public init(_ configuration: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.Configuration)
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.Configuration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.Configuration {
  public var codableValue: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class PayologyEmailField : PayologyCheckCaptureSDK.PayologyTextField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) final public var hasValidEmail: Swift.Bool {
    get
  }
  @objc deinit
}
public protocol PayologyPaymentValidationResult : PayologyCheckCaptureSDK.PayologyValidationResult {
}
public struct PayologyUnknownError : Swift.Error {
  public init(fileID: Swift.String, function: Swift.String, error: any Swift.Error)
}
extension PayologyCheckCaptureSDK.PayologyUnknownError {
  public var errorContext: Swift.String {
    get
  }
  public var userMessage: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyErrorResponder {
  public func handle(unknownError: PayologyCheckCaptureSDK.PayologyUnknownError)
}
public protocol PayologyImageProcessorConfiguration : PayologyCheckCaptureSDK.PayologyFrameworkConfiguration {
  var photoTypes: [PayologyCheckCaptureSDK.PayologyPhotoType] { get }
  var shouldPerformNetworkRequestAfterPhotoCapture: Swift.Bool { get }
}
extension PayologyCheckCaptureSDK.PayologyImageProcessorConfiguration {
  public var hasValidPhotoTypes: Swift.Bool {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyFrameworkConfiguration {
  public var imageProcessorConfiguration: (any PayologyCheckCaptureSDK.PayologyImageProcessorConfiguration)? {
    get
  }
  public var imageProcessorDesignContainer: (any PayologyCheckCaptureSDK.PayologyImageProcessorDesignContainer)? {
    get
  }
  public var imageProcessorTypeContainer: (any PayologyCheckCaptureSDK.PayologyImageProcessorTypeContainer)? {
    get
  }
  public var imageProcessorAttributeContainer: (any PayologyCheckCaptureSDK.PayologyImageProcessorAttributeContainer)? {
    get
  }
  public var imageProcessorRequestConfiguration: (any PayologyCheckCaptureSDK.PayologyImageProcessorRequestConfiguration)? {
    get
  }
}
public protocol PayologyContactFormatter {
}
extension PayologyCheckCaptureSDK.PayologyContactFormatter {
  public func getMaskedEmail(from email: Swift.String?, maskSymbol: Swift.Character = "*") -> Swift.String?
  public func getMaskedPhoneNumber(from phoneNumber: Swift.String?, maskSymbol: Swift.Character = "*") -> Swift.String?
}
extension PayologyCheckCaptureSDK.TemplateLoadingView {
  public struct CodableAttributeConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var loadingViewWidthConstant: CoreFoundation.CGFloat
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: PayologyCheckCaptureSDK.CodableColor
    public var activityIndicatorColor: PayologyCheckCaptureSDK.CodableColor
    public var titleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var messageAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var dismissButtonTitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var dismissButtonHeightConstant: CoreFoundation.CGFloat
    public var dismissButtonBackgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var dismissButtonBorderWidth: CoreFoundation.CGFloat
    public var dismissButtonBorderColor: PayologyCheckCaptureSDK.CodableColor
    public init(loadingViewWidthConstant: CoreFoundation.CGFloat, backgroundColor: PayologyCheckCaptureSDK.CodableColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: PayologyCheckCaptureSDK.CodableColor, activityIndicatorColor: PayologyCheckCaptureSDK.CodableColor, titleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, messageAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, dismissButtonTitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, dismissButtonHeightConstant: CoreFoundation.CGFloat, dismissButtonBackgroundColor: PayologyCheckCaptureSDK.CodableColor, dismissButtonBorderWidth: CoreFoundation.CGFloat, dismissButtonBorderColor: PayologyCheckCaptureSDK.CodableColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateLoadingView.CodableAttributeConfiguration {
  public init(_ attributeConfiguration: PayologyCheckCaptureSDK.TemplateLoadingView.AttributeConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateLoadingView.CodableAttributeConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateLoadingView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateLoadingView.AttributeConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateLoadingView.CodableAttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateLoadingView.CodableAttributeConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateLoadingView.CodableAttributeConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class PayologyPhotoCaptureIntroConfiguration : PayologyCheckCaptureSDK.PayologyViewControllerConfiguration {
  weak public var photoCaptureIntroDelegate: (any PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroDelegate)?
  weak public var photoCaptureViewController: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController?
  final public let photoType: PayologyCheckCaptureSDK.PayologyPhotoType
  public init(photoCaptureIntroDelegate: any PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroDelegate, photoCaptureViewController: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController, photoType: PayologyCheckCaptureSDK.PayologyPhotoType)
  @objc deinit
}
public enum PayologyPhotoValidationResult : Swift.String, PayologyCheckCaptureSDK.PayologyValidationResult {
  case isValid
  case ambientIsNotBrightEnough
  case backgroundIsNotDarkEnough
  case imageIsNotSharpEnough
  case confidenceIsNotHighEnough
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyPhotoValidationResult]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyPhotoValidationResult] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyPhotoValidationResult {
  public var isValid: Swift.Bool {
    get
  }
}
extension Swift.String {
  public init?(format: Swift.String?, _ argument: (any Swift.CVarArg)?)
  public init?(_ doubleValue: Swift.Double?)
}
extension Swift.String {
  public var decimalDigits: Swift.String {
    get
  }
  public var hasNonDecimalCharacters: Swift.Bool {
    get
  }
  public var asIntegerArray: [Swift.Int]? {
    get
  }
}
extension Swift.String {
  public init?(_ substring: Swift.String.SubSequence?)
  public var withoutFirst: Swift.String {
    get
  }
  public var lastFourCharacters: Swift.String {
    get
  }
}
extension Swift.String {
  public init(interpolating content: Any)
  public init?(interpolating content: Any?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TemplatePhotoCaptureLoadingViewController : PayologyCheckCaptureSDK.PayologyPhotoCaptureLoadingViewController, PayologyCheckCaptureSDK.PhotoCaptureLoadingInterfaceManager {
  @_Concurrency.MainActor(unsafe) public var loadingView: PayologyCheckCaptureSDK.TemplateLoadingView?
  @_Concurrency.MainActor(unsafe) public var configurationContainer: (any PayologyCheckCaptureSDK.PhotoCaptureLoadingConfigurationContainer)?
  @_Concurrency.MainActor(unsafe) override open func didCompleteInitialization()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) override public func photoReviewStatusHasBeenUpdated(_ sender: PayologyCheckCaptureSDK.PayologyImageProcessorNetworkRegistrar, photoReviewStatus: PayologyCheckCaptureSDK.PayologyPhotoReviewStatus)
  @_Concurrency.MainActor(unsafe) required public init(configuration: PayologyCheckCaptureSDK.PayologyPhotoCaptureLoadingConfiguration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView {
  public struct CodableConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var borderColor: PayologyCheckCaptureSDK.CodableColor
    public var title: Swift.String
    public var font: PayologyCheckCaptureSDK.CodableFont
    public var tintColor: PayologyCheckCaptureSDK.CodableColor
    public var leftImage: PayologyCheckCaptureSDK.CodableImage?
    public var rightImage: PayologyCheckCaptureSDK.CodableImage?
    public init(cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, backgroundColor: PayologyCheckCaptureSDK.CodableColor, borderColor: PayologyCheckCaptureSDK.CodableColor, title: Swift.String, font: PayologyCheckCaptureSDK.CodableFont, tintColor: PayologyCheckCaptureSDK.CodableColor, leftImage: PayologyCheckCaptureSDK.CodableImage?, rightImage: PayologyCheckCaptureSDK.CodableImage?)
  }
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView.CodableConfiguration {
  public init?(_ configuration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration)
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView.CodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateNavigationButtonView.CodableConfiguration? {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView.CodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateNavigationButtonView.CodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PayologyFrameworkInitializationError : PayologyCheckCaptureSDK.PayologyInitializationError {
  case missingPayologyHostViewController
  case missingPayologyActivityMonitor
  case missingPayologyFrameworkConfiguration
  case missingPayologyNetworkManager
  case missingPayologyNetworkRegistrar
  case invalidDelegate
  case invalidConfiguration
  case invalidConfigurationType
  case invalidNetworkRequestConfiguration
  case interfaceIsAlreadyActive
  case unknownError
  public static func == (a: PayologyCheckCaptureSDK.PayologyFrameworkInitializationError, b: PayologyCheckCaptureSDK.PayologyFrameworkInitializationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PayologyAttributeContainer {
}
extension Swift.Dictionary where Key == Swift.String, Value == PayologyCheckCaptureSDK.CodableAttributedString {
  public var numberValidationResultValue: [PayologyCheckCaptureSDK.PayologyNumberValidationResult : Foundation.NSAttributedString] {
    get
  }
}
extension Swift.Dictionary where Key == PayologyCheckCaptureSDK.PayologyNumberValidationResult, Value == Foundation.NSAttributedString {
  public var codableValue: [Swift.String : PayologyCheckCaptureSDK.CodableAttributedString] {
    get
  }
}
extension Swift.Dictionary where Key == Swift.String, Value == PayologyCheckCaptureSDK.TemplateTextFieldView.CodableErrorMessageConfiguration {
  public var numberValidationResultValue: [PayologyCheckCaptureSDK.PayologyNumberValidationResult : PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration] {
    get
  }
}
extension Swift.Dictionary where Key == PayologyCheckCaptureSDK.PayologyNumberValidationResult, Value == PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration {
  public var codableValue: [Swift.String : PayologyCheckCaptureSDK.TemplateTextFieldView.CodableErrorMessageConfiguration] {
    get
  }
}
public struct USAZipNumber : PayologyCheckCaptureSDK.PayologyNumber {
  public var numberString: Swift.String
  public let numberType: PayologyCheckCaptureSDK.PayologyNumberType
  public let locale: PayologyCheckCaptureSDK.PayologyLocale?
  public let minimumDigits: Swift.Int
  public let maximumDigits: Swift.Int
  public let hasCompleteDigits: Swift.Bool
  public init(_ numberString: Swift.String = "", hasCompleteDigits: Swift.Bool = true)
  public var isAnotherInvalid: Swift.Bool? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PayologyCheckCaptureSDK.USAZipNumber, b: PayologyCheckCaptureSDK.USAZipNumber) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PayologyLoadingDelegate : PayologyCheckCaptureSDK.PayologyViewControllerDelegate {
  func userTappedLoadingDismissButton(_ sender: PayologyCheckCaptureSDK.PayologyLoadingViewController)
}
extension PayologyCheckCaptureSDK.PayologyLoadingDelegate {
  public func userTappedLoadingDismissButton(_ sender: PayologyCheckCaptureSDK.PayologyLoadingViewController)
}
public enum PayologyNetworkMinorError : PayologyCheckCaptureSDK.PayologyEnduringError {
  case unableToDecodeResponse(fileID: Swift.String, function: Swift.String, serverData: Foundation.Data)
  case unregisteredKeyword(fileID: Swift.String, function: Swift.String, keyword: Swift.String?)
  case unableToPerformRequest(fileID: Swift.String, function: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyErrorResponder {
  public func handle(networkMinorError: PayologyCheckCaptureSDK.PayologyNetworkMinorError)
}
public protocol PhotoCaptureLoadingConfigurationContainer : PayologyCheckCaptureSDK.LoadingConfigurationContainer {
  var croppedPhotoReviewTextConfigurations: [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration] { get }
  var originalPhotoReviewTextConfigurations: [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration] { get }
  var failurePhotoReviewTextConfigurations: [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration] { get }
}
@objc @_Concurrency.MainActor(unsafe) open class TemplateLoadingView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var dismissButton: UIKit.UIButton?
  @_Concurrency.MainActor(unsafe) final public let activityIndicatorView: UIKit.UIActivityIndicatorView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let messageLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let configuration: PayologyCheckCaptureSDK.TemplateLoadingView.Configuration
  @_Concurrency.MainActor(unsafe) public var textConfiguration: PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(dismissButton: UIKit.UIButton, configuration: PayologyCheckCaptureSDK.TemplateLoadingView.Configuration, textConfiguration: PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateLoadingView {
  @_Concurrency.MainActor(unsafe) public func displayDismissButton()
  @_Concurrency.MainActor(unsafe) public func hideDismissButton()
}
extension PayologyCheckCaptureSDK.TemplateLoadingView {
  @_Concurrency.MainActor(unsafe) public func displayActivityIndicator()
  @_Concurrency.MainActor(unsafe) public func hideActivityIndicator()
}
extension PayologyCheckCaptureSDK.TemplateLoadingView {
  public struct Configuration {
    public var loadingViewWidthConstant: CoreFoundation.CGFloat
    public var backgroundColor: UIKit.UIColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: UIKit.UIColor
    public var activityIndicatorColor: UIKit.UIColor
    public var dismissButtonAttributedTitle: Foundation.NSAttributedString
    public var dismissButtonHeightConstant: CoreFoundation.CGFloat
    public var dismissButtonBackgroundColor: UIKit.UIColor
    public var dismissButtonBorderWidth: CoreFoundation.CGFloat
    public var dismissButtonBorderColor: UIKit.UIColor
    public init(loadingViewWidthConstant: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor, activityIndicatorColor: UIKit.UIColor, dismissButtonAttributedTitle: Foundation.NSAttributedString, dismissButtonHeightConstant: CoreFoundation.CGFloat, dismissButtonBackgroundColor: UIKit.UIColor, dismissButtonBorderWidth: CoreFoundation.CGFloat, dismissButtonBorderColor: UIKit.UIColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateLoadingView {
  public struct TextConfiguration {
    public var attributedTitle: Foundation.NSAttributedString?
    public var attributedMessage: Foundation.NSAttributedString?
    public init(attributedTitle: Foundation.NSAttributedString?, attributedMessage: Foundation.NSAttributedString?)
  }
}
extension PayologyCheckCaptureSDK.TemplateLoadingView {
  public struct AttributeConfiguration {
    public var loadingViewWidthConstant: CoreFoundation.CGFloat
    public var backgroundColor: UIKit.UIColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: UIKit.UIColor
    public var activityIndicatorColor: UIKit.UIColor
    public var titleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var messageAttributes: [Foundation.NSAttributedString.Key : Any]
    public var dismissButtonTitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var dismissButtonHeightConstant: CoreFoundation.CGFloat
    public var dismissButtonBackgroundColor: UIKit.UIColor
    public var dismissButtonBorderWidth: CoreFoundation.CGFloat
    public var dismissButtonBorderColor: UIKit.UIColor
    public init(loadingViewWidthConstant: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor, activityIndicatorColor: UIKit.UIColor, titleAttributes: [Foundation.NSAttributedString.Key : Any], messageAttributes: [Foundation.NSAttributedString.Key : Any], dismissButtonTitleAttributes: [Foundation.NSAttributedString.Key : Any], dismissButtonHeightConstant: CoreFoundation.CGFloat, dismissButtonBackgroundColor: UIKit.UIColor, dismissButtonBorderWidth: CoreFoundation.CGFloat, dismissButtonBorderColor: UIKit.UIColor)
    public func configuration(dismissButtonTitle: Swift.String) -> PayologyCheckCaptureSDK.TemplateLoadingView.Configuration
    public func textConfiguration(title: Swift.String?, message: Swift.String?) -> PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration
    public static func getAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateLoadingView.AttributeConfiguration
  }
}
extension PayologyCheckCaptureSDK.TemplateLoadingView.AttributeConfiguration {
  public static var standard: PayologyCheckCaptureSDK.TemplateLoadingView.AttributeConfiguration {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) public class TemplateHorizontalContainerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let leftView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let rightView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public init?(leftView: UIKit.UIView?, rightView: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyNumberValidationResult {
  public func getErrorMessageFormat(numberType: PayologyCheckCaptureSDK.PayologyNumberType) -> Swift.String?
}
public class PayologyNetworkConnectionChecker {
  public var isConnected: Swift.Bool
  public init()
  @objc deinit
}
extension UIKit.UIAlertController {
  @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String?, message: Swift.String?, preferredStyle: UIKit.UIAlertController.Style, actionTitle: Swift.String)
  @_Concurrency.MainActor(unsafe) public static var standardUnauthorizedCameraAccessAlert: UIKit.UIAlertController {
    get
  }
}
public enum PayologyLocale : Swift.String, Swift.CaseIterable, Swift.Hashable, Swift.Codable {
  case USA
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyLocale]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyLocale] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyLocale {
  public var locale: Foundation.Locale {
    get
  }
  public var currency: PayologyCheckCaptureSDK.PayologyCurrency {
    get
  }
  public var countryName: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyLocale {
  public init?(country: Swift.String?)
}
public protocol PayologyPhoneNumberFormatter {
  var text: Swift.String? { get }
  var locale: PayologyCheckCaptureSDK.PayologyLocale { get }
}
extension PayologyCheckCaptureSDK.PayologyPhoneNumberFormatter {
  public var formattedPhoneNumberString: Swift.String {
    get
  }
  public var hasValidPhoneNumber: Swift.Bool {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView {
  public struct CodableAttributeConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var borderColor: PayologyCheckCaptureSDK.CodableColor
    public var font: PayologyCheckCaptureSDK.CodableFont
    public var tintColor: PayologyCheckCaptureSDK.CodableColor
    public init(cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, backgroundColor: PayologyCheckCaptureSDK.CodableColor, borderColor: PayologyCheckCaptureSDK.CodableColor, font: PayologyCheckCaptureSDK.CodableFont, tintColor: PayologyCheckCaptureSDK.CodableColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView.CodableAttributeConfiguration {
  public init?(_ attributeConfiguration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.AttributeConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView.CodableAttributeConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateNavigationButtonView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView.AttributeConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateNavigationButtonView.CodableAttributeConfiguration? {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView.CodableAttributeConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateNavigationButtonView.CodableAttributeConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PayologyCheckCaptureTypeContainer : PayologyCheckCaptureSDK.PayologyImageProcessorTypeContainer {
  var checkCaptureEntryType: PayologyCheckCaptureSDK.PayologyCheckCaptureEntryViewController.Type { get }
  var checkCaptureConfirmationType: PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController.Type { get }
}
public protocol PayologyDelegate : PayologyCheckCaptureSDK.PayologyErrorResponderDelegate, PayologyCheckCaptureSDK.PayologyNetworkManager {
  var activityMonitor: (any PayologyCheckCaptureSDK.PayologyActivityMonitor)? { get set }
  var retainedReference: (any PayologyCheckCaptureSDK.PayologyDelegate)? { get set }
  var navigationController: UIKit.UINavigationController? { get set }
  var configuration: any PayologyCheckCaptureSDK.PayologyFrameworkConfiguration { get }
  var dynamicValues: [any PayologyCheckCaptureSDK.PayologyDynamicValue] { get }
}
extension PayologyCheckCaptureSDK.PayologyDelegate {
  public func configureReferences()
  public func cleanMemoryUsage()
}
extension PayologyCheckCaptureSDK.PayologyDelegate {
  public var configurationType: PayologyCheckCaptureSDK.PayologyConfigurationType {
    get
  }
  public var hostViewController: UIKit.UIViewController? {
    get
  }
  public var dynamicKeys: [any PayologyCheckCaptureSDK.PayologyDynamicKey] {
    get
  }
  public var designContainer: any PayologyCheckCaptureSDK.PayologyDesignContainer {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyDelegate {
  public var networkMonitor: (any PayologyCheckCaptureSDK.PayologyNetworkMonitor)? {
    get
  }
  public var requestConfiguration: any PayologyCheckCaptureSDK.PayologyNetworkRequestConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyDelegate {
  public var isInterfaceTest: Swift.Bool {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyDelegate {
  public func terminateNavigationInterface(completion: (() -> Swift.Void)? = nil)
}
public struct PhotoCaptureIntroCodableConfigurationContainer : PayologyCheckCaptureSDK.ControllerCodableConfigurationContainer {
  public var controllerConfiguration: PayologyCheckCaptureSDK.TemplateControllerCodableConfiguration
  public var shouldPresentPhotoCaptureIntro: Swift.Bool
  public var photoCaptureIntroViewConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableConfiguration
  public var photoCaptureIntroTextConfigurations: [Swift.String : PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableTextConfiguration]
  public var nextButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.CodableConfiguration
  public var cancelButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.CodableConfiguration
  public init(_ configurationContainer: any PayologyCheckCaptureSDK.PhotoCaptureIntroConfigurationContainer) throws
  public init(_ attributeContainer: any PayologyCheckCaptureSDK.PayologyImageProcessorAttributeContainer) throws
}
extension PayologyCheckCaptureSDK.PhotoCaptureIntroCodableConfigurationContainer {
  public func configurationContainer() throws -> any PayologyCheckCaptureSDK.PhotoCaptureIntroConfigurationContainer
}
extension PayologyCheckCaptureSDK.PhotoCaptureIntroConfigurationContainer {
  public var codableValue: PayologyCheckCaptureSDK.PhotoCaptureIntroCodableConfigurationContainer? {
    get
  }
}
extension PayologyCheckCaptureSDK.PhotoCaptureIntroCodableConfigurationContainer : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.PhotoCaptureIntroCodableConfigurationContainer
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PayologyEnduringError : Swift.Decodable, Swift.Encodable, Swift.Error {
}
public enum PayologyPhotoCaptureMode : Swift.String, PayologyCheckCaptureSDK.PayologyType {
  case manualCapture
  case autoCapture
  case disabled
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyPhotoCaptureMode]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyPhotoCaptureMode] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyPhotoCaptureMode {
  public var description: Swift.String {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) public class TemplatePhotoCaptureLabelView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let label: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var textConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(configuration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.Configuration, textConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView {
  public struct Configuration {
    public var widthMultiplier: CoreFoundation.CGFloat
    public var backgroundColor: UIKit.UIColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: UIKit.UIColor
    public init(widthMultiplier: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor)
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView {
  public struct TextConfiguration {
    public var attributedText: Foundation.NSAttributedString?
    public init(attributedText: Foundation.NSAttributedString?)
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView {
  public struct AttributeConfiguration {
    public var widthMultiplier: CoreFoundation.CGFloat
    public var textAttributes: [Foundation.NSAttributedString.Key : Any]
    public var backgroundColor: UIKit.UIColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: UIKit.UIColor
    public init(widthMultiplier: CoreFoundation.CGFloat, textAttributes: [Foundation.NSAttributedString.Key : Any], backgroundColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor)
    public func configuration() -> PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.Configuration
    public func textConfiguration(text: Swift.String?) -> PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration
    public static func getAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration {
  public static var standard: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView {
  @_Concurrency.MainActor(unsafe) public static func photoTypeAttributedTitle(_ attributeConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration) -> [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration]
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView {
  @_Concurrency.MainActor(unsafe) public static func photoValidationNoticeText(_ attributeConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration) -> [PayologyCheckCaptureSDK.PayologyPhotoValidationResult : PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration]
}
public struct TemplateControllerCodableConfiguration : Swift.Codable {
  public var title: Swift.String?
  public var titleTextAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
  public var prefersLargeTitles: Swift.Bool
  public var accentColor: PayologyCheckCaptureSDK.CodableColor
  public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
  public var navigationBarBackgroundColor: PayologyCheckCaptureSDK.CodableColor
  public var lightStatusBarBackground: PayologyCheckCaptureSDK.CodableColor
  public var darkStatusBarBackground: PayologyCheckCaptureSDK.CodableColor
  public var navigationBarTintColor: PayologyCheckCaptureSDK.CodableColor
  public init(title: Swift.String?, titleTextAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, prefersLargeTitles: Swift.Bool, accentColor: PayologyCheckCaptureSDK.CodableColor, backgroundColor: PayologyCheckCaptureSDK.CodableColor, navigationBarBackgroundColor: PayologyCheckCaptureSDK.CodableColor, lightStatusBarBackground: PayologyCheckCaptureSDK.CodableColor, darkStatusBarBackground: PayologyCheckCaptureSDK.CodableColor, navigationBarTintColor: PayologyCheckCaptureSDK.CodableColor)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.TemplateControllerCodableConfiguration {
  public init(_ configuration: PayologyCheckCaptureSDK.TemplateControllerConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateControllerCodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateControllerConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControllerConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateControllerCodableConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControllerCodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateControllerCodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class PayologyAmountEntryViewController : PayologyCheckCaptureSDK.PayologyViewController {
  @_Concurrency.MainActor(unsafe) weak public var amountEntryDelegate: (any PayologyCheckCaptureSDK.PayologyAmountEntryDelegate)?
  @_Concurrency.MainActor(unsafe) final public let amountConstraint: PayologyCheckCaptureSDK.PayologyAmountConstraint
  @_Concurrency.MainActor(unsafe) final public let amountField: PayologyCheckCaptureSDK.PayologyAmountField
  @_Concurrency.MainActor(unsafe) final public let cancelButton: PayologyCheckCaptureSDK.PayologyButton
  @_Concurrency.MainActor(unsafe) final public let nextButton: PayologyCheckCaptureSDK.PayologyButton
  @_Concurrency.MainActor(unsafe) public init(configuration: PayologyCheckCaptureSDK.PayologyAmountEntryConfiguration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func userAmountDidChange()
  @_Concurrency.MainActor(unsafe) open var isReadyForConfirmation: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open func userDidConfirmAmountEntry()
  @_Concurrency.MainActor(unsafe) open func userDidCancelAmountEntry()
  @_Concurrency.MainActor(unsafe) open func nextButtonStateDidChange()
  @_Concurrency.MainActor(unsafe) open func userDidEditAmountField(_ amountField: PayologyCheckCaptureSDK.PayologyAmountField)
  @_Concurrency.MainActor(unsafe) open func userDidEndEditingAmountField(_ amountField: PayologyCheckCaptureSDK.PayologyAmountField)
  @_Concurrency.MainActor(unsafe) override open func userDidTapPayologyButton(_ button: PayologyCheckCaptureSDK.PayologyButton)
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyAmountEntryViewController {
  @_Concurrency.MainActor(unsafe) public var userAmount: PayologyCheckCaptureSDK.PayologyAmount? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyAmountEntryViewController {
  @_Concurrency.MainActor(unsafe) public func handleNextButtonState()
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView {
  public struct CodableErrorMessageConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var attributedErrorMessage: PayologyCheckCaptureSDK.CodableAttributedString?
    public var isErrorAnimationEnabled: Swift.Bool
    public init(attributedErrorMessage: PayologyCheckCaptureSDK.CodableAttributedString?, isErrorAnimationEnabled: Swift.Bool)
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.CodableErrorMessageConfiguration {
  public init(_ errorMessageConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.CodableErrorMessageConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateTextFieldView.CodableErrorMessageConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.CodableErrorMessageConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateTextFieldView.CodableErrorMessageConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Dictionary where Key == Swift.String, Value == PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableTextConfiguration {
  public var photoTypeValue: [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.TextConfiguration] {
    get
  }
}
extension Swift.Dictionary where Key == PayologyCheckCaptureSDK.PayologyPhotoType, Value == PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.TextConfiguration {
  public var codableValue: [Swift.String : PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableTextConfiguration] {
    get
  }
}
extension Swift.Dictionary where Key == Swift.String, Value == PayologyCheckCaptureSDK.TemplateLoadingView.CodableTextConfiguration {
  public var photoTypeValue: [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration] {
    get
  }
}
extension Swift.Dictionary where Key == PayologyCheckCaptureSDK.PayologyPhotoType, Value == PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration {
  public var codableValue: [Swift.String : PayologyCheckCaptureSDK.TemplateLoadingView.CodableTextConfiguration] {
    get
  }
}
extension Swift.Dictionary where Key == Swift.String, Value == PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableTextConfiguration {
  public var photoTypeValue: [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration] {
    get
  }
}
extension Swift.Dictionary where Key == PayologyCheckCaptureSDK.PayologyPhotoType, Value == PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration {
  public var codableValue: [Swift.String : PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableTextConfiguration] {
    get
  }
}
extension Vision.VNRectangleObservation {
  public struct VNRectangle {
    public let boundingBox: CoreFoundation.CGRect
    public let topLeft: CoreFoundation.CGPoint
    public let topRight: CoreFoundation.CGPoint
    public let bottomLeft: CoreFoundation.CGPoint
    public let bottomRight: CoreFoundation.CGPoint
    public init(boundingBox: CoreFoundation.CGRect, topLeft: CoreFoundation.CGPoint, topRight: CoreFoundation.CGPoint, bottomLeft: CoreFoundation.CGPoint, bottomRight: CoreFoundation.CGPoint)
  }
  public func perspectiveCorrectedRectangle(with transform: CoreFoundation.CGAffineTransform) -> Vision.VNRectangleObservation.VNRectangle
}
public struct CodableEdgesInsets : Swift.Codable {
  public let top: CoreFoundation.CGFloat
  public let left: CoreFoundation.CGFloat
  public let bottom: CoreFoundation.CGFloat
  public let right: CoreFoundation.CGFloat
  public init(top: CoreFoundation.CGFloat, left: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat, right: CoreFoundation.CGFloat)
  public init(_ uiValue: UIKit.UIEdgeInsets)
  public init()
  public var uiValue: UIKit.UIEdgeInsets {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIEdgeInsets {
  public var codableValue: PayologyCheckCaptureSDK.CodableEdgesInsets {
    get
  }
}
extension PayologyCheckCaptureSDK.CodableEdgesInsets : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.CodableEdgesInsets
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
extension UIKit.NSMutableParagraphStyle {
  convenience public init(alignment: UIKit.NSTextAlignment?, lineBreakMode: UIKit.NSLineBreakMode? = nil, firstLineHeadIndent: CoreFoundation.CGFloat? = nil, headIndent: CoreFoundation.CGFloat? = nil, tailIndent: CoreFoundation.CGFloat? = nil, lineHeightMultiple: CoreFoundation.CGFloat? = nil, maximumLineHeight: CoreFoundation.CGFloat? = nil, minimumLineHeight: CoreFoundation.CGFloat? = nil, lineSpacing: CoreFoundation.CGFloat? = nil, paragraphSpacing: CoreFoundation.CGFloat? = nil, paragraphSpacingBefore: CoreFoundation.CGFloat? = nil)
}
@objc @_Concurrency.MainActor(unsafe) open class PayologyViewController : UIKit.UIViewController, PayologyCheckCaptureSDK.PayologyButtonDelegate, PayologyCheckCaptureSDK.PayologyMenuButtonDelegate {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any PayologyCheckCaptureSDK.PayologyViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) final public let scrollView: UIKit.UIScrollView
  @_Concurrency.MainActor(unsafe) public init(configuration: PayologyCheckCaptureSDK.PayologyViewControllerConfiguration)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func didCompleteInitialization()
  @_Concurrency.MainActor(unsafe) open func userDidTapPayologyButton(_ button: PayologyCheckCaptureSDK.PayologyButton)
  @_Concurrency.MainActor(unsafe) open func userDidSelectPayologyMenuButtonOption(_ menuButton: PayologyCheckCaptureSDK.PayologyMenuButton)
}
public struct PayologyC21MICRFormatter {
  public let transitSymbol: Swift.String
  public let OCRRoutingNumber: Swift.String
  public let OCRAccountNumber: Swift.String
  public let OCRCheckNumber: Swift.String
  public let croppedMICR: Swift.String
  public init(OCRRoutingNumber: Swift.String, OCRAccountNumber: Swift.String, OCRCheckNumber: Swift.String, croppedMICR: Swift.String)
}
extension PayologyCheckCaptureSDK.PayologyC21MICRFormatter {
  public typealias DividedMICR = (size: Swift.Int, symbols: [Swift.String], numbers: [Swift.String])
}
public enum CodableLineBreakMode : Swift.String, Swift.Codable, Swift.Hashable {
  case byWordWrapping
  case byCharWrapping
  case byClipping
  case byTruncatingHead
  case byTruncatingTail
  case byTruncatingMiddle
  public var nsValue: UIKit.NSLineBreakMode {
    get
  }
  public init()
  public init?(_ rawValue: Swift.String?)
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.NSLineBreakMode {
  public init?(description: Swift.String?)
  public var codableValue: PayologyCheckCaptureSDK.CodableLineBreakMode {
    get
  }
}
public struct CodableParagraphStyle : Swift.Codable, Swift.Hashable {
  public var alignment: Swift.String?
  public var lineBreakMode: Swift.String?
  public var firstLineHeadIndent: CoreFoundation.CGFloat?
  public var headIndent: CoreFoundation.CGFloat?
  public var tailIndent: CoreFoundation.CGFloat?
  public var lineHeightMultiple: CoreFoundation.CGFloat?
  public var maximumLineHeight: CoreFoundation.CGFloat?
  public var minimumLineHeight: CoreFoundation.CGFloat?
  public var lineSpacing: CoreFoundation.CGFloat?
  public var paragraphSpacing: CoreFoundation.CGFloat?
  public var paragraphSpacingBefore: CoreFoundation.CGFloat?
  public init(alignment: PayologyCheckCaptureSDK.CodableTextAlignment? = nil, lineBreakMode: PayologyCheckCaptureSDK.CodableLineBreakMode? = nil, firstLineHeadIndent: CoreFoundation.CGFloat? = nil, headIndent: CoreFoundation.CGFloat? = nil, tailIndent: CoreFoundation.CGFloat? = nil, lineHeightMultiple: CoreFoundation.CGFloat? = nil, maximumLineHeight: CoreFoundation.CGFloat? = nil, minimumLineHeight: CoreFoundation.CGFloat? = nil, lineSpacing: CoreFoundation.CGFloat? = nil, paragraphSpacing: CoreFoundation.CGFloat? = nil, paragraphSpacingBefore: CoreFoundation.CGFloat? = nil)
  public init(_ paragraphStyle: UIKit.NSParagraphStyle)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PayologyCheckCaptureSDK.CodableParagraphStyle, b: PayologyCheckCaptureSDK.CodableParagraphStyle) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.CodableParagraphStyle {
  public var nsValue: UIKit.NSParagraphStyle {
    get
  }
}
extension UIKit.NSParagraphStyle {
  public var codableValue: PayologyCheckCaptureSDK.CodableParagraphStyle {
    get
  }
}
extension PayologyCheckCaptureSDK.CodableParagraphStyle : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.CodableParagraphStyle
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
public enum PayologyDateFormat {
  case MMyy
  public static func == (a: PayologyCheckCaptureSDK.PayologyDateFormat, b: PayologyCheckCaptureSDK.PayologyDateFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyDateFormat {
  public var dateFormat: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView {
  public struct CodableConfiguration : Swift.Codable {
    public var widthMultiplier: CoreFoundation.CGFloat
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: PayologyCheckCaptureSDK.CodableColor
    public init(widthMultiplier: CoreFoundation.CGFloat, backgroundColor: PayologyCheckCaptureSDK.CodableColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: PayologyCheckCaptureSDK.CodableColor)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableConfiguration {
  public init(_ configuration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.Configuration)
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.Configuration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.Configuration {
  public var codableValue: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
@_hasMissingDesignatedInitializers public class PayologyErrorResponder {
  final public let frameworkVersion: Swift.String
  public static var shared: PayologyCheckCaptureSDK.PayologyErrorResponder
  public var hasDelegates: Swift.Bool {
    get
  }
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyErrorResponder {
  public func respond(criticalError: any PayologyCheckCaptureSDK.PayologyCriticalError)
  public func respond(enduringError: any PayologyCheckCaptureSDK.PayologyEnduringError)
  public func respond(unknownError: PayologyCheckCaptureSDK.PayologyUnknownError)
}
extension PayologyCheckCaptureSDK.PayologyErrorResponder {
  public func registry(unknownError: PayologyCheckCaptureSDK.PayologyUnknownError)
}
extension PayologyCheckCaptureSDK.PayologyErrorResponder {
  public func terminateNavigationInterface(completion: (() -> Swift.Void)? = nil)
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView {
  public struct CodableAttributeConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var titleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var subtitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var placeholderAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var errorMessageAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
    public var textContainerInset: PayologyCheckCaptureSDK.CodableEdgesInsets
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: PayologyCheckCaptureSDK.CodableColor
    public var foregroundColor: PayologyCheckCaptureSDK.CodableColor
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var lineColor: PayologyCheckCaptureSDK.CodableColor?
    public var font: PayologyCheckCaptureSDK.CodableFont
    public var textAlignment: Swift.String
    public var isErrorAnimationEnabled: Swift.Bool
    public init(titleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, subtitleAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, placeholderAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, errorMessageAttributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes, textContainerInset: PayologyCheckCaptureSDK.CodableEdgesInsets, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: PayologyCheckCaptureSDK.CodableColor, foregroundColor: PayologyCheckCaptureSDK.CodableColor, backgroundColor: PayologyCheckCaptureSDK.CodableColor, lineColor: PayologyCheckCaptureSDK.CodableColor?, font: PayologyCheckCaptureSDK.CodableFont, textAlignment: PayologyCheckCaptureSDK.CodableTextAlignment, isErrorAnimationEnabled: Swift.Bool)
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.CodableAttributeConfiguration {
  public init?(_ attributeConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.CodableAttributeConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateTextFieldView.CodableAttributeConfiguration? {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.CodableAttributeConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateTextFieldView.CodableAttributeConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyCodableType {
  public static var checkCaptureJSONRepresentableTypes: [any PayologyCheckCaptureSDK.PayologyJSONRepresentable.Type] {
    get
  }
}
public struct TemplateImageProcessorDesignContainer : PayologyCheckCaptureSDK.PayologyImageProcessorDesignContainer {
  public let attributeContainer: any PayologyCheckCaptureSDK.PayologyAttributeContainer
  public let typeContainer: any PayologyCheckCaptureSDK.PayologyTypeContainer
  weak public var transitioningDelegate: (any UIKit.UIViewControllerTransitioningDelegate)?
  public let unauthorizedCameraAccessAlert: UIKit.UIAlertController
  public init(attributeContainer: any PayologyCheckCaptureSDK.PayologyImageProcessorAttributeContainer = TemplateImageProcessorAttributeContainer(), typeContainer: any PayologyCheckCaptureSDK.PayologyImageProcessorTypeContainer = TemplateImageProcessorTypeContainer(), transitioningDelegate: (any UIKit.UIViewControllerTransitioningDelegate)? = nil, unauthorizedCameraAccessAlert: UIKit.UIAlertController = .standardUnauthorizedCameraAccessAlert)
  public init(template: PayologyCheckCaptureSDK.PayologyTemplate, typeContainer: any PayologyCheckCaptureSDK.PayologyImageProcessorTypeContainer = TemplateImageProcessorTypeContainer(), transitioningDelegate: (any UIKit.UIViewControllerTransitioningDelegate)? = nil, unauthorizedCameraAccessAlert: UIKit.UIAlertController = .standardUnauthorizedCameraAccessAlert)
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var deviceType: Swift.String {
    get
  }
}
extension Swift.Array where Element : Swift.Hashable {
  public var containsDuplicates: Swift.Bool {
    get
  }
}
extension Swift.Array where Element == Swift.Character {
  public func joined() -> Swift.String
}
public struct PayologyAmount : Swift.Codable, Swift.Hashable {
  public let value: Foundation.Decimal
  public let currency: PayologyCheckCaptureSDK.PayologyCurrency
  public init?(value: Foundation.Decimal, currency: PayologyCheckCaptureSDK.PayologyCurrency)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PayologyCheckCaptureSDK.PayologyAmount, b: PayologyCheckCaptureSDK.PayologyAmount) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyAmount {
  public static var minimumUSD: PayologyCheckCaptureSDK.PayologyAmount {
    get
  }
}
extension Foundation.NSMutableAttributedString {
  convenience public init(string: Swift.String, attributes: [Foundation.NSAttributedString.Key : Any], image: UIKit.UIImage?, imagePlacement: Foundation.NSMutableAttributedString.ImagePlacement)
  public enum ImagePlacement {
    case left
    case right
    public static func == (a: Foundation.NSMutableAttributedString.ImagePlacement, b: Foundation.NSMutableAttributedString.ImagePlacement) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView {
  public struct CodableConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var size: PayologyCheckCaptureSDK.CodableSize
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var attributedTitle: PayologyCheckCaptureSDK.CodableAttributedString?
    public var image: PayologyCheckCaptureSDK.CodableImage?
    public var tintColor: PayologyCheckCaptureSDK.CodableColor
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var borderColor: PayologyCheckCaptureSDK.CodableColor
    public init(size: PayologyCheckCaptureSDK.CodableSize, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, attributedTitle: PayologyCheckCaptureSDK.CodableAttributedString?, image: PayologyCheckCaptureSDK.CodableImage?, tintColor: PayologyCheckCaptureSDK.CodableColor, backgroundColor: PayologyCheckCaptureSDK.CodableColor, borderColor: PayologyCheckCaptureSDK.CodableColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView.CodableConfiguration {
  public init(_ configuration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration)
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView.CodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateControlButtonView.CodableConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateControlButtonView.CodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateControlButtonView.CodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_Concurrency.MainActor(unsafe) open class PayologyPhotoCaptureLoadingViewController : PayologyCheckCaptureSDK.PayologyLoadingViewController, PayologyCheckCaptureSDK.PayologyImageProcessorNetworkObserver {
  @_Concurrency.MainActor(unsafe) weak public var photoCaptureRequester: (any PayologyCheckCaptureSDK.PayologyPhotoCaptureRequester)?
  @_Concurrency.MainActor(unsafe) final public let photoType: PayologyCheckCaptureSDK.PayologyPhotoType
  @_Concurrency.MainActor(unsafe) required public init(configuration: PayologyCheckCaptureSDK.PayologyPhotoCaptureLoadingConfiguration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func photoReviewStatusHasBeenUpdated(_ sender: PayologyCheckCaptureSDK.PayologyImageProcessorNetworkRegistrar, photoReviewStatus: PayologyCheckCaptureSDK.PayologyPhotoReviewStatus)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class PayologyTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setupNumberPadKeyboard()
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyTextField {
  @_Concurrency.MainActor(unsafe) public var securedText: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var textValidationResult: PayologyCheckCaptureSDK.PayologyTextValidationResult {
    get
  }
}
public protocol PayologyLoadingRequester : UIKit.UIViewController {
  func loadingWillAppear(_ loadingViewController: PayologyCheckCaptureSDK.PayologyLoadingViewController)
  func loadingDidDisappear(_ loadingViewController: PayologyCheckCaptureSDK.PayologyLoadingViewController)
}
public class TemplateImageProcessorDelegate : PayologyCheckCaptureSDK.PayologyImageProcessorDelegate {
  weak public var activityMonitor: (any PayologyCheckCaptureSDK.PayologyActivityMonitor)?
  weak public var retainedReference: (any PayologyCheckCaptureSDK.PayologyDelegate)?
  public var navigationController: UIKit.UINavigationController?
  final public let configuration: any PayologyCheckCaptureSDK.PayologyFrameworkConfiguration
  public var dynamicValues: [any PayologyCheckCaptureSDK.PayologyDynamicValue]
  public var networkRegistrars: [any PayologyCheckCaptureSDK.PayologyNetworkRegistrar]
  public init(activityMonitor: any PayologyCheckCaptureSDK.PayologyImageProcessorActivityMonitor, configuration: any PayologyCheckCaptureSDK.PayologyImageProcessorConfiguration)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class TemplateCoreButtonView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var button: PayologyCheckCaptureSDK.PayologyButton?
  @_Concurrency.MainActor(unsafe) public var configuration: PayologyCheckCaptureSDK.TemplateCoreButtonView.Configuration {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(button: PayologyCheckCaptureSDK.PayologyButton, configuration: PayologyCheckCaptureSDK.TemplateCoreButtonView.Configuration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView {
  @_Concurrency.MainActor(unsafe) public func updateButtonColors()
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView {
  public struct Configuration {
    public var heightConstant: CoreFoundation.CGFloat
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var enableAttributedTitle: Foundation.NSAttributedString
    public var enableBackgroundColor: UIKit.UIColor
    public var enableBorderColor: UIKit.UIColor
    public var disableAttributedTitle: Foundation.NSAttributedString
    public var disableBackgroundColor: UIKit.UIColor
    public var disableBorderColor: UIKit.UIColor
    public var highlightedAttributedTitle: Foundation.NSAttributedString
    public var highlightedBackgroundColor: UIKit.UIColor
    public var highlightedBorderColor: UIKit.UIColor
    public init(heightConstant: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, enableAttributedTitle: Foundation.NSAttributedString, enableBackgroundColor: UIKit.UIColor, enableBorderColor: UIKit.UIColor, disableAttributedTitle: Foundation.NSAttributedString, disableBackgroundColor: UIKit.UIColor, disableBorderColor: UIKit.UIColor, highlightedAttributedTitle: Foundation.NSAttributedString, highlightedBackgroundColor: UIKit.UIColor, highlightedBorderColor: UIKit.UIColor)
    public var attributeConfiguration: PayologyCheckCaptureSDK.TemplateCoreButtonView.AttributeConfiguration {
      get
    }
  }
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView {
  public struct AttributeConfiguration {
    public var heightConstant: CoreFoundation.CGFloat
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var enableTitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var enableBackgroundColor: UIKit.UIColor
    public var enableBorderColor: UIKit.UIColor
    public var disableTitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var disableBackgroundColor: UIKit.UIColor
    public var disableBorderColor: UIKit.UIColor
    public var highlightedTitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var highlightedBackgroundColor: UIKit.UIColor
    public var highlightedBorderColor: UIKit.UIColor
    public init(heightConstant: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, enableTitleAttributes: [Foundation.NSAttributedString.Key : Any], enableBackgroundColor: UIKit.UIColor, enableBorderColor: UIKit.UIColor, disableTitleAttributes: [Foundation.NSAttributedString.Key : Any], disableBackgroundColor: UIKit.UIColor, disableBorderColor: UIKit.UIColor, highlightedTitleAttributes: [Foundation.NSAttributedString.Key : Any], highlightedBackgroundColor: UIKit.UIColor, highlightedBorderColor: UIKit.UIColor)
    public func configuration(title: Swift.String) -> PayologyCheckCaptureSDK.TemplateCoreButtonView.Configuration
    public func configuration(format: Swift.String, arguments: [any Swift.CVarArg]) -> PayologyCheckCaptureSDK.TemplateCoreButtonView.Configuration
    public static func getPrimaryAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateCoreButtonView.AttributeConfiguration
    public static func getSecondaryAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateCoreButtonView.AttributeConfiguration
  }
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView.AttributeConfiguration {
  public static var standardPrimary: PayologyCheckCaptureSDK.TemplateCoreButtonView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView.AttributeConfiguration {
  public static var standardSecondary: PayologyCheckCaptureSDK.TemplateCoreButtonView.AttributeConfiguration {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class PayologyCheckCaptureEntryViewController : PayologyCheckCaptureSDK.PayologyAmountEntryViewController {
  @_Concurrency.MainActor(unsafe) weak public var checkCaptureEntryDelegate: (any PayologyCheckCaptureSDK.PayologyCheckCaptureEntryDelegate)?
  @_Concurrency.MainActor(unsafe) final public let checkFrontNetworkRegistrar: PayologyCheckCaptureSDK.PayologyCheckFrontNetworkRegistrar
  @_Concurrency.MainActor(unsafe) final public let checkRearNetworkRegistrar: PayologyCheckCaptureSDK.PayologyCheckRearNetworkRegistrar
  @_Concurrency.MainActor(unsafe) final public let checkFrontCaptureButton: PayologyCheckCaptureSDK.PayologyButton
  @_Concurrency.MainActor(unsafe) final public let checkRearCaptureButton: PayologyCheckCaptureSDK.PayologyButton
  @_Concurrency.MainActor(unsafe) final public let checkDualCaptureButton: PayologyCheckCaptureSDK.PayologyButton
  @_Concurrency.MainActor(unsafe) required public init(configuration: PayologyCheckCaptureSDK.PayologyCheckCaptureEntryConfiguration) throws
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public var isReadyForConfirmation: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) override public func userAmountDidChange()
  @_Concurrency.MainActor(unsafe) override public func userDidConfirmAmountEntry()
  @_Concurrency.MainActor(unsafe) override public func userDidCancelAmountEntry()
  @_Concurrency.MainActor(unsafe) override public func userDidTapPayologyButton(_ button: PayologyCheckCaptureSDK.PayologyButton)
  @_Concurrency.MainActor(unsafe) open func photoReviewStatusDidUpdate(_ photoType: PayologyCheckCaptureSDK.PayologyPhotoType, photoReviewStatus: PayologyCheckCaptureSDK.PayologyPhotoReviewStatus)
  @_Concurrency.MainActor(unsafe) open func willDisplayLoading(_ loadingViewController: PayologyCheckCaptureSDK.PayologyLoadingViewController)
  @_Concurrency.MainActor(unsafe) open func didHideLoading(_ loadingViewController: PayologyCheckCaptureSDK.PayologyLoadingViewController)
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureEntryViewController {
  @_Concurrency.MainActor(unsafe) public var isReadyForPhotoCapture: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var checkFrontIsValid: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var checkRearIsValid: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var checkFrontPhotoIsCached: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var checkRearPhotoIsCached: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isReviewingCheckFront: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isReviewingCheckRear: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var checkFrontServerResponse: PayologyCheckCaptureSDK.PayologyCheckFrontResponseModel? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var checkRearServerResponse: PayologyCheckCaptureSDK.PayologyCheckRearResponseModel? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var checkCaptureData: PayologyCheckCaptureSDK.PayologyCheckCaptureData? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureEntryViewController : PayologyCheckCaptureSDK.PayologyPhotoCaptureRequester {
  @_Concurrency.MainActor(unsafe) public func loadingWillAppear(_ loadingViewController: PayologyCheckCaptureSDK.PayologyLoadingViewController)
  @_Concurrency.MainActor(unsafe) public func loadingDidDisappear(_ loadingViewController: PayologyCheckCaptureSDK.PayologyLoadingViewController)
  @_Concurrency.MainActor(unsafe) public func photoReviewStatusHasBeenUpdated(_ sender: PayologyCheckCaptureSDK.PayologyImageProcessorNetworkRegistrar, photoReviewStatus: PayologyCheckCaptureSDK.PayologyPhotoReviewStatus)
}
extension PayologyCheckCaptureSDK.TemplateTextView {
  public struct CodableConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var textContainerInset: PayologyCheckCaptureSDK.CodableEdgesInsets
    public var attributedText: PayologyCheckCaptureSDK.CodableAttributedString?
    public var isEditable: Swift.Bool
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: PayologyCheckCaptureSDK.CodableColor
    public init(textContainerInset: PayologyCheckCaptureSDK.CodableEdgesInsets, attributedText: PayologyCheckCaptureSDK.CodableAttributedString?, isEditable: Swift.Bool, backgroundColor: PayologyCheckCaptureSDK.CodableColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: PayologyCheckCaptureSDK.CodableColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateTextView.CodableConfiguration {
  public init(_ configuration: PayologyCheckCaptureSDK.TemplateTextView.Configuration)
}
extension PayologyCheckCaptureSDK.TemplateTextView.CodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateTextView.Configuration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextView.Configuration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateTextView.CodableConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextView.CodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateTextView.CodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol AmountEntryConfigurationContainer : PayologyCheckCaptureSDK.ControllerConfigurationContainer {
  var cancelNavigationButtonConfiguration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration { get }
  var cancelButtonAlertConfiguration: PayologyCheckCaptureSDK.TemplateButtonAlertConfiguration { get }
  var titleViewConfiguration: PayologyCheckCaptureSDK.TemplateTitleView.Configuration { get }
  var amountFieldConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration { get }
  var shoudPerformAmountErrorAnimation: Swift.Bool { get }
  var amountSubtitleExactAmountFormatConfiguration: PayologyCheckCaptureSDK.TemplateTextFormatConfiguration? { get }
  var amountSubtitleRangeAmountFormatConfiguration: PayologyCheckCaptureSDK.TemplateTextFormatConfiguration? { get }
  var noticeTextViewConfiguration: PayologyCheckCaptureSDK.TemplateTextView.Configuration { get }
  var nextButtonConfiguration: PayologyCheckCaptureSDK.TemplateCoreButtonView.Configuration { get }
}
public protocol CheckCaptureConfirmationConfigurationContainer : PayologyCheckCaptureSDK.ControllerConfigurationContainer {
  var cancelNavigationButtonConfiguration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration { get }
  var cancelButtonAlertConfiguration: PayologyCheckCaptureSDK.TemplateButtonAlertConfiguration { get }
  var undoNavigationButtonConfiguration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration { get }
  var titleViewConfiguration: PayologyCheckCaptureSDK.TemplateTitleView.Configuration { get }
  var USARoutingFieldConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration { get }
  var USAAccountFieldConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration { get }
  var USACheckFieldConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration { get }
  var noticeTextViewConfiguration: PayologyCheckCaptureSDK.TemplateTextView.Configuration { get }
  var stackViewSpacing: CoreFoundation.CGFloat { get }
  var confirmButtonConfiguration: PayologyCheckCaptureSDK.TemplateCoreButtonView.Configuration { get }
  var USARoutingNumberErrorMessageConfigurations: [PayologyCheckCaptureSDK.PayologyNumberValidationResult : PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration] { get }
  var USAAccountNumberErrorMessageConfigurations: [PayologyCheckCaptureSDK.PayologyNumberValidationResult : PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration] { get }
  var USACheckNumberErrorMessageConfigurations: [PayologyCheckCaptureSDK.PayologyNumberValidationResult : PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration] { get }
  var USANumberCombinationHasMoreDigitsThanAllowedErrorMessageConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration { get }
}
public class PayologyMenuButtonAlert {
  weak public var menuButton: PayologyCheckCaptureSDK.PayologyMenuButton?
  final public let menuType: any PayologyCheckCaptureSDK.PayologyType.Type
  final public let alertController: UIKit.UIAlertController
  final public let cancelActionTitle: Swift.String
  final public let cancelActionStyle: UIKit.UIAlertAction.Style
  weak public var alertPresenter: UIKit.UIViewController?
  public init(menuButton: PayologyCheckCaptureSDK.PayologyMenuButton, title: Swift.String?, message: Swift.String?, cancelActionTitle: Swift.String, cancelActionStyle: UIKit.UIAlertAction.Style, alertPresenter: UIKit.UIViewController)
  @objc deinit
}
open class PayologyCheckCaptureConfirmationConfiguration : PayologyCheckCaptureSDK.PayologyViewControllerConfiguration {
  weak public var checkCaptureConfirmationDelegate: (any PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationDelegate)?
  final public let checkCaptureData: PayologyCheckCaptureSDK.PayologyCheckCaptureData
  public init(checkCaptureConfirmationDelegate: any PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationDelegate, checkCaptureData: PayologyCheckCaptureSDK.PayologyCheckCaptureData)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class TemplateNavigationButtonView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var button: PayologyCheckCaptureSDK.PayologyButton?
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let leftImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let rightImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var configuration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(button: PayologyCheckCaptureSDK.PayologyButton, configuration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView {
  public struct Configuration {
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var backgroundColor: UIKit.UIColor
    public var borderColor: UIKit.UIColor
    public var title: Swift.String
    public var font: UIKit.UIFont
    public var tintColor: UIKit.UIColor
    public var leftImage: UIKit.UIImage?
    public var rightImage: UIKit.UIImage?
    public init(cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor, borderColor: UIKit.UIColor, title: Swift.String, font: UIKit.UIFont, tintColor: UIKit.UIColor, leftImage: UIKit.UIImage?, rightImage: UIKit.UIImage?)
  }
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView {
  public struct AttributeConfiguration {
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var backgroundColor: UIKit.UIColor
    public var borderColor: UIKit.UIColor
    public var font: UIKit.UIFont
    public var tintColor: UIKit.UIColor
    public init(cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor, borderColor: UIKit.UIColor, font: UIKit.UIFont, tintColor: UIKit.UIColor)
    public func configuration(title: Swift.String, leftImage: UIKit.UIImage?, rightImage: UIKit.UIImage?) -> PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration
    public static func getPrimaryAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateNavigationButtonView.AttributeConfiguration
    public static func getSecondaryAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateNavigationButtonView.AttributeConfiguration
  }
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView.AttributeConfiguration {
  public static var standardPrimary: PayologyCheckCaptureSDK.TemplateNavigationButtonView.AttributeConfiguration {
    get
  }
  public static var standardSecondary: PayologyCheckCaptureSDK.TemplateNavigationButtonView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateNavigationButtonView.AttributeConfiguration {
  public var standardCancel: PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration {
    get
  }
  public var standardBack: PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration {
    get
  }
  public var standardUndo: PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration {
    get
  }
}
open class PayologyImageProcessorNetworkRegistrar : PayologyCheckCaptureSDK.PayologyNetworkRegistrar {
  final public let photoType: PayologyCheckCaptureSDK.PayologyPhotoType
  public var photoReviewStatus: PayologyCheckCaptureSDK.PayologyPhotoReviewStatus {
    get
    set
  }
  public var photo: PayologyCheckCaptureSDK.PayologyPhoto? {
    get
    set
  }
  public init(photoType: PayologyCheckCaptureSDK.PayologyPhotoType, photoReviewStatus: PayologyCheckCaptureSDK.PayologyPhotoReviewStatus = .awaitingPhotoCapture)
  open func cleanMemoryUsage()
  open func resetRegistrarCache()
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyImageProcessorNetworkRegistrar {
  public var reviewStatus: any PayologyCheckCaptureSDK.PayologyNetworkReviewStatus {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyImageProcessorNetworkRegistrar {
  public func addNetworkObservers(_ observers: any PayologyCheckCaptureSDK.PayologyImageProcessorNetworkObserver...)
}
open class PayologyNetworkRequest {
  final public let method: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestMethod
  final public let bodyType: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestBodyType
  final public let baseURL: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestBaseURL
  final public let api: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestAPI
  final public let suffix: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestSuffix
  final public let url: Foundation.URL
  public var headers: [PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestHeaderField : PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestHeaderValue] {
    get
  }
  public var parameters: [PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestParameterKey : Any] {
    get
  }
  public init?(method: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestMethod, baseURL: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestBaseURL, api: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestAPI, suffix: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestSuffix = "", bodyType: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestBodyType)
  public func getURLRequest() -> Foundation.URLRequest
  public func setHeaderValue(value: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestHeaderValue, field: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestHeaderField)
  public func setParameter(key: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestParameterKey, value: Any?)
  public var httpBodyData: Foundation.Data? {
    get
  }
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyNetworkRequest {
  public enum RequestMethod : Swift.String {
    case get
    case post
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum RequestBodyType {
    case json
    case formEncoded
    case bodyless
    public static func == (a: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestBodyType, b: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestBodyType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum RequestHeaderField : Swift.String {
    case contentType
    case accept
    case authorization
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum RequestHeaderValue {
    case applicationJSON
    case aplicationURLEncoded
    case custom(value: Swift.String)
    public var string: Swift.String {
      get
    }
  }
  public enum RequestBaseURL : Swift.Hashable, Swift.Codable {
    case STAGE_imageProcessorV63
    case DEV_ephemeralToken
    case UAT_ephemeralToken
    case DEV_payment
    case UAT_payment
    case DEV_customerVault
    case UAT_customerVault
    case DEV_report
    case UAT_report
    case custom(value: Swift.String)
    public var string: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestBaseURL, b: PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestBaseURL) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum RequestAPI : Swift.Codable {
    case mobile
    case v1
    case custom(value: Swift.String)
    public var string: Swift.String {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public typealias RequestSuffix = Swift.String
  public typealias RequestParameterKey = Swift.String
  public typealias RequestParameterValue = Any
}
extension PayologyCheckCaptureSDK.PayologyNetworkRequest {
  #if compiler(>=5.3) && $AsyncAwait
  public func performRequest<ResponseModel>(modelType: ResponseModel.Type, monitor: (any PayologyCheckCaptureSDK.PayologyNetworkMonitor)? = nil) async throws -> ResponseModel where ResponseModel : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getServerData(monitor: (any PayologyCheckCaptureSDK.PayologyNetworkMonitor)? = nil) async throws -> Foundation.Data
  #endif
  public func getServerResponseModel<ResponseModel>(serverData: Foundation.Data, modelType: ResponseModel.Type) throws -> ResponseModel where ResponseModel : Swift.Decodable
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView {
  public struct CodableTextConfiguration : Swift.Codable {
    public var attributedTitle: PayologyCheckCaptureSDK.CodableAttributedString?
    public var attributedSubtitle: PayologyCheckCaptureSDK.CodableAttributedString?
    public var photoGuideAttributedText: PayologyCheckCaptureSDK.CodableAttributedString?
    public init(attributedTitle: PayologyCheckCaptureSDK.CodableAttributedString?, attributedSubtitle: PayologyCheckCaptureSDK.CodableAttributedString?, photoGuideAttributedText: PayologyCheckCaptureSDK.CodableAttributedString?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableTextConfiguration {
  public init(_ configuration: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.TextConfiguration)
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableTextConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.TextConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.TextConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableTextConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableTextConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.CodableTextConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
public protocol LoadingInterfaceManager : PayologyCheckCaptureSDK.PayologyLoadingViewController {
  var loadingView: PayologyCheckCaptureSDK.TemplateLoadingView? { get set }
}
extension PayologyCheckCaptureSDK.LoadingInterfaceManager {
  public func configureLoadingUserInterface(_ configurationContainer: any PayologyCheckCaptureSDK.LoadingConfigurationContainer)
}
extension Swift.Array where Element == any PayologyCheckCaptureSDK.PayologyNetworkRegistrar {
  public static func createImageProcessorRegistrars() -> [any PayologyCheckCaptureSDK.PayologyNetworkRegistrar]
}
public protocol PhotoCaptureIntroInterfaceManager : PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController, PayologyCheckCaptureSDK.ControllerInterfaceManager {
  var photoCaptureIntroView: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView? { get }
  var nextButtonView: PayologyCheckCaptureSDK.TemplateControlButtonView? { get }
  var cancelButtonView: PayologyCheckCaptureSDK.TemplateControlButtonView? { get }
}
extension PayologyCheckCaptureSDK.PhotoCaptureIntroInterfaceManager {
  public func configurePhotoCaptureIntroUserInterface(photoType: PayologyCheckCaptureSDK.PayologyPhotoType, configurationContainer: any PayologyCheckCaptureSDK.PhotoCaptureIntroConfigurationContainer)
}
public enum PayologyCreditCardNetwork : Swift.String, PayologyCheckCaptureSDK.PayologyType {
  case visa
  case masterCard
  case americanExpress
  case discover
  case dinersClub
  case jcb
  case unrecognized
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyCreditCardNetwork]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyCreditCardNetwork] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyCreditCardNetwork {
  public init(description: Swift.String)
}
extension PayologyCheckCaptureSDK.PayologyCreditCardNetwork {
  public var description: Swift.String {
    get
  }
  public var image: UIKit.UIImage? {
    get
  }
}
public struct PayologyCardVerificationValueNumber : PayologyCheckCaptureSDK.PayologyNumber {
  public var numberString: Swift.String
  public let numberType: PayologyCheckCaptureSDK.PayologyNumberType
  public let minimumDigits: Swift.Int
  public let maximumDigits: Swift.Int
  public let hasCompleteDigits: Swift.Bool
  public init(_ numberString: Swift.String = "", hasCompleteDigits: Swift.Bool = true)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PayologyCheckCaptureSDK.PayologyCardVerificationValueNumber, b: PayologyCheckCaptureSDK.PayologyCardVerificationValueNumber) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyCardVerificationValueNumber {
  public var isAnotherInvalid: Swift.Bool? {
    get
  }
  public var locale: PayologyCheckCaptureSDK.PayologyLocale? {
    get
  }
}
public struct TemplateEventAlertConfiguration {
  public var title: Swift.String?
  public var message: Swift.String?
  public var actionTitle: Swift.String
  public init(title: Swift.String?, message: Swift.String?, actionTitle: Swift.String)
}
extension PayologyCheckCaptureSDK.TemplateLoadingView {
  public struct CodableConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var loadingViewWidthConstant: CoreFoundation.CGFloat
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: PayologyCheckCaptureSDK.CodableColor
    public var activityIndicatorColor: PayologyCheckCaptureSDK.CodableColor
    public var dismissButtonAttributedTitle: PayologyCheckCaptureSDK.CodableAttributedString
    public var dismissButtonHeightConstant: CoreFoundation.CGFloat
    public var dismissButtonBackgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var dismissButtonBorderWidth: CoreFoundation.CGFloat
    public var dismissButtonBorderColor: PayologyCheckCaptureSDK.CodableColor
    public init(loadingViewWidthConstant: CoreFoundation.CGFloat, backgroundColor: PayologyCheckCaptureSDK.CodableColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: PayologyCheckCaptureSDK.CodableColor, activityIndicatorColor: PayologyCheckCaptureSDK.CodableColor, dismissButtonAttributedTitle: PayologyCheckCaptureSDK.CodableAttributedString, dismissButtonHeightConstant: CoreFoundation.CGFloat, dismissButtonBackgroundColor: PayologyCheckCaptureSDK.CodableColor, dismissButtonBorderWidth: CoreFoundation.CGFloat, dismissButtonBorderColor: PayologyCheckCaptureSDK.CodableColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateLoadingView.CodableConfiguration {
  public init?(_ configuration: PayologyCheckCaptureSDK.TemplateLoadingView.Configuration)
}
extension PayologyCheckCaptureSDK.TemplateLoadingView.CodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateLoadingView.Configuration? {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateLoadingView.Configuration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateLoadingView.CodableConfiguration? {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateLoadingView.CodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateLoadingView.CodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CodableColor : Swift.Codable, Swift.Hashable {
  public let hexString: Swift.String
  public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
  public init(_ uiColor: UIKit.UIColor)
  public init()
  public var uiValue: UIKit.UIColor {
    get
  }
  public func withAlphaComponent(_ alpha: CoreFoundation.CGFloat) -> PayologyCheckCaptureSDK.CodableColor
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PayologyCheckCaptureSDK.CodableColor, b: PayologyCheckCaptureSDK.CodableColor) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIColor {
  public var codableValue: PayologyCheckCaptureSDK.CodableColor {
    get
  }
}
extension PayologyCheckCaptureSDK.CodableColor : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.CodableColor
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
public protocol PayologyCheckCaptureAttributeContainer : PayologyCheckCaptureSDK.PayologyImageProcessorAttributeContainer {
  var fullScreenControllerConfigurationAttributes: PayologyCheckCaptureSDK.TemplateControllerConfiguration.Attributes { get }
  var secondaryNavigationButtonAttributeConfiguration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.AttributeConfiguration { get }
  var titleViewAttributeConfiguration: PayologyCheckCaptureSDK.TemplateTitleView.AttributeConfiguration { get }
  var primaryCoreButtonAttributeConfiguration: PayologyCheckCaptureSDK.TemplateCoreButtonView.AttributeConfiguration { get }
  var amountFieldViewAttributeConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration { get }
  var numberFieldViewAttributeConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration { get }
  var scrollableNoticeTextViewAttributeConfiguration: PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration { get }
  var staticNoticeTextViewAttributeConfiguration: PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration { get }
  var photoCaptureButtonAttributeConfiguration: PayologyCheckCaptureSDK.TemplateImageButtonView.AttributeConfiguration { get }
  var photoCaptureButtonReviewStatusColorConfiguration: [PayologyCheckCaptureSDK.TemplateImageButtonView.NetworkReviewStatus : PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration] { get }
}
public protocol PhotoCaptureIntroConfigurationContainer : PayologyCheckCaptureSDK.ControllerConfigurationContainer {
  var shouldPresentPhotoCaptureIntro: Swift.Bool { get }
  var photoCaptureIntroViewConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.Configuration { get }
  var photoCaptureIntroTextConfigurations: [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.TextConfiguration] { get }
  var nextButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration { get }
  var cancelButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration { get }
}
public struct TemplateCheckCaptureAttributeContainer : PayologyCheckCaptureSDK.PayologyCheckCaptureAttributeContainer {
  public var fullScreenControllerConfigurationAttributes: PayologyCheckCaptureSDK.TemplateControllerConfiguration.Attributes
  public var secondaryNavigationButtonAttributeConfiguration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.AttributeConfiguration
  public var titleViewAttributeConfiguration: PayologyCheckCaptureSDK.TemplateTitleView.AttributeConfiguration
  public var primaryCoreButtonAttributeConfiguration: PayologyCheckCaptureSDK.TemplateCoreButtonView.AttributeConfiguration
  public var amountFieldViewAttributeConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration
  public var numberFieldViewAttributeConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration
  public var scrollableNoticeTextViewAttributeConfiguration: PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration
  public var staticNoticeTextViewAttributeConfiguration: PayologyCheckCaptureSDK.TemplateTextView.AttributeConfiguration
  public var photoCaptureButtonAttributeConfiguration: PayologyCheckCaptureSDK.TemplateImageButtonView.AttributeConfiguration
  public var photoCaptureButtonReviewStatusColorConfiguration: [PayologyCheckCaptureSDK.TemplateImageButtonView.NetworkReviewStatus : PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration]
  public var titlePhotoCaptureLabelAttributeConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration
  public var noticePhotoCaptureLabelAttributeConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.AttributeConfiguration
  public var photoCaptureIntroAttributeConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView.AttributeConfiguration
  public var loadingViewAttributeConfiguration: PayologyCheckCaptureSDK.TemplateLoadingView.AttributeConfiguration
  public init(template: PayologyCheckCaptureSDK.PayologyTemplate = .standard)
}
extension Swift.Int : PayologyCheckCaptureSDK.PayologyJSONValue {
  public init?(_ component: PayologyCheckCaptureSDK.PayologyJSONComponent)
  public func jsonComponent(label: Swift.String, isOptional: Swift.Bool) -> PayologyCheckCaptureSDK.PayologyJSONComponent
}
public protocol AmountEntryInterfaceManager : PayologyCheckCaptureSDK.PayologyAmountEntryViewController, PayologyCheckCaptureSDK.ControllerInterfaceManager {
  var cancelNavigationButtonView: PayologyCheckCaptureSDK.TemplateNavigationButtonView? { get }
  var titleView: PayologyCheckCaptureSDK.TemplateTitleView? { get }
  var amountFieldView: PayologyCheckCaptureSDK.TemplateTextFieldView? { get }
  var noticeTextView: PayologyCheckCaptureSDK.TemplateTextView? { get }
  var nextButtonView: PayologyCheckCaptureSDK.TemplateCoreButtonView? { get }
}
extension PayologyCheckCaptureSDK.AmountEntryInterfaceManager {
  public func configureAmountEntryUserInterface(_ configurationContainer: any PayologyCheckCaptureSDK.AmountEntryConfigurationContainer)
}
extension PayologyCheckCaptureSDK.AmountEntryInterfaceManager {
  public func configureAmountFieldViewSubtitleFormattedTexts(_ configurationContainer: any PayologyCheckCaptureSDK.AmountEntryConfigurationContainer)
  public func updateAmountFieldInterfaceWhileEditing(_ configurationContainer: any PayologyCheckCaptureSDK.AmountEntryConfigurationContainer)
  public func updateAmountFieldInterfaceAfterEdition(_ configurationContainer: any PayologyCheckCaptureSDK.AmountEntryConfigurationContainer)
}
extension CoreFoundation.CGFloat {
  public init?(_ string: Swift.String?)
  public init?(_ float: Swift.Float?)
  public init?(_ double: Swift.Double?)
  public init?(_ integer: Swift.Int?)
}
public enum PayologyNetworkError : PayologyCheckCaptureSDK.PayologyCriticalError {
  case unableToCreateURLRequest(fileID: Swift.String, function: Swift.String)
  case missingNetworkRegistrar(fileID: Swift.String, function: Swift.String)
  case missingNetworkResponse(fileID: Swift.String, function: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyErrorResponder {
  public func handle(networkError: PayologyCheckCaptureSDK.PayologyNetworkError)
}
@objc @_Concurrency.MainActor(unsafe) public class TemplateImageButtonView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var button: PayologyCheckCaptureSDK.PayologyButton?
  @_Concurrency.MainActor(unsafe) final public let topLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let subtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let bottomLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let configuration: PayologyCheckCaptureSDK.TemplateImageButtonView.Configuration
  @_Concurrency.MainActor(unsafe) public var colorConfiguration: PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(button: PayologyCheckCaptureSDK.PayologyButton, configuration: PayologyCheckCaptureSDK.TemplateImageButtonView.Configuration, colorConfiguration: PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView {
  @_Concurrency.MainActor(unsafe) public func setDocumentImageIfNeeded(_ image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) public func removeDocumentImageIfNeeded()
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView {
  public enum NetworkReviewStatus : Swift.String, PayologyCheckCaptureSDK.PayologyType {
    case disableBeforeResponse
    case enableBeforeResponse
    case disableAfterResponse
    case enableAfterResponse
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [PayologyCheckCaptureSDK.TemplateImageButtonView.NetworkReviewStatus]
    public typealias RawValue = Swift.String
    public static var allCases: [PayologyCheckCaptureSDK.TemplateImageButtonView.NetworkReviewStatus] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView {
  public struct Configuration {
    public var borderWidth: CoreFoundation.CGFloat
    public var cornerRadius: CoreFoundation.CGFloat
    public var topLabelAttributedText: Foundation.NSAttributedString?
    public var attributedTitle: Foundation.NSAttributedString?
    public var attributedSubtitle: Foundation.NSAttributedString?
    public var bottomLabelAttributedText: Foundation.NSAttributedString?
    public var image: UIKit.UIImage?
    public var configurationHasPhotoImage: Swift.Bool
    public var shouldUsePhotoImageAfterCapture: Swift.Bool
    public init(borderWidth: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat, topLabelAttributedText: Foundation.NSAttributedString?, attributedTitle: Foundation.NSAttributedString?, attributedSubtitle: Foundation.NSAttributedString?, bottomLabelAttributedText: Foundation.NSAttributedString?, image: UIKit.UIImage?, configurationHasPhotoImage: Swift.Bool, shouldUsePhotoImageAfterCapture: Swift.Bool)
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView {
  public struct ColorConfiguration {
    public var tintColor: UIKit.UIColor
    public var backgroundColor: UIKit.UIColor
    public var borderColor: UIKit.UIColor
    public init(tintColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, borderColor: UIKit.UIColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView {
  public struct AttributeConfiguration {
    public var borderWidth: CoreFoundation.CGFloat
    public var cornerRadius: CoreFoundation.CGFloat
    public var topLabelTextAttributes: [Foundation.NSAttributedString.Key : Any]?
    public var titleAttributes: [Foundation.NSAttributedString.Key : Any]?
    public var subtitleAttributes: [Foundation.NSAttributedString.Key : Any]?
    public var bottomLabelTextAttributes: [Foundation.NSAttributedString.Key : Any]?
    public var image: UIKit.UIImage?
    public var configurationHasPhotoImage: Swift.Bool
    public var shouldUsePhotoImageAfterCapture: Swift.Bool
    public init(borderWidth: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat, topLabelTextAttributes: [Foundation.NSAttributedString.Key : Any]?, titleAttributes: [Foundation.NSAttributedString.Key : Any]?, subtitleAttributes: [Foundation.NSAttributedString.Key : Any]?, bottomLabelTextAttributes: [Foundation.NSAttributedString.Key : Any]?, image: UIKit.UIImage?, configurationHasPhotoImage: Swift.Bool, shouldUsePhotoImageAfterCapture: Swift.Bool)
    public func configuration(topLabelText: Swift.String?, title: Swift.String?, subtitle: Swift.String?, bottomLabelText: Swift.String?) -> PayologyCheckCaptureSDK.TemplateImageButtonView.Configuration
    public static func getPhotoCaptureAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateImageButtonView.AttributeConfiguration
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.AttributeConfiguration {
  public static var standardPhotoCapture: PayologyCheckCaptureSDK.TemplateImageButtonView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration {
  public static var photoCaptureDisableBeforeReview: PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration {
    get
  }
  public static var photoCaptureEnableBeforeReview: PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration {
    get
  }
  public static var photoCaptureDisableAfterReview: PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration {
    get
  }
  public static var photoCaptureEnableAfterReview: PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration {
    get
  }
}
extension Swift.Dictionary where Key == PayologyCheckCaptureSDK.TemplateImageButtonView.NetworkReviewStatus, Value == PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration {
  public static var standardPhotoCapture: [PayologyCheckCaptureSDK.TemplateImageButtonView.NetworkReviewStatus : PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration] {
    get
  }
  public static func getPhotoCaptureColorDictionary(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> [PayologyCheckCaptureSDK.TemplateImageButtonView.NetworkReviewStatus : PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration]
}
public enum PayologyPhotoType : Swift.String, PayologyCheckCaptureSDK.PayologyType {
  case checkFront
  case checkRear
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyPhotoType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyPhotoType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyPhotoType {
  public func description(condensed: Swift.Bool = false, reversed: Swift.Bool = false) -> Swift.String
  public var description: Swift.String {
    get
  }
}
public protocol PayologyPhotoCaptureRequester : PayologyCheckCaptureSDK.PayologyImageProcessorNetworkObserver, PayologyCheckCaptureSDK.PayologyLoadingRequester {
}
extension PayologyCheckCaptureSDK.TemplateLoadingView {
  public struct CodableTextConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var attributedTitle: PayologyCheckCaptureSDK.CodableAttributedString?
    public var attributedMessage: PayologyCheckCaptureSDK.CodableAttributedString?
    public init(attributedTitle: PayologyCheckCaptureSDK.CodableAttributedString?, attributedMessage: PayologyCheckCaptureSDK.CodableAttributedString?)
  }
}
extension PayologyCheckCaptureSDK.TemplateLoadingView.CodableTextConfiguration {
  public init(_ textConfiguration: PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateLoadingView.CodableTextConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateLoadingView.TextConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateLoadingView.CodableTextConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateLoadingView.CodableTextConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateLoadingView.CodableTextConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Foundation.NSNumber {
  convenience public init?(_ numberString: Swift.String?)
}
public struct PayologyAssets {
  public static func getPDFImage(from base64String: Swift.String) -> UIKit.UIImage?
  public static func getPDFAnimatedImage(from base64Strings: [Swift.String], animationInterval: Foundation.TimeInterval) -> UIKit.UIImage?
}
public struct PayologyCreditCardNumber : PayologyCheckCaptureSDK.PayologyNumber {
  public var numberString: Swift.String
  public let numberType: PayologyCheckCaptureSDK.PayologyNumberType
  public let minimumDigits: Swift.Int
  public let maximumDigits: Swift.Int
  public let hasCompleteDigits: Swift.Bool
  public init(_ numberString: Swift.String = "", hasCompleteDigits: Swift.Bool = true)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PayologyCheckCaptureSDK.PayologyCreditCardNumber, b: PayologyCheckCaptureSDK.PayologyCreditCardNumber) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyCreditCardNumber {
  public var isAnotherInvalid: Swift.Bool? {
    get
  }
  public var locale: PayologyCheckCaptureSDK.PayologyLocale? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyCreditCardNumber {
  public var network: PayologyCheckCaptureSDK.PayologyCreditCardNetwork {
    get
  }
  public var satisfiesLUHNAlgorithm: Swift.Bool {
    get
  }
}
public struct TemplateCheckCaptureDesignContainer : PayologyCheckCaptureSDK.PayologyCheckCaptureDesignContainer {
  public let attributeContainer: any PayologyCheckCaptureSDK.PayologyAttributeContainer
  public let typeContainer: any PayologyCheckCaptureSDK.PayologyTypeContainer
  weak public var transitioningDelegate: (any UIKit.UIViewControllerTransitioningDelegate)?
  public let unauthorizedCameraAccessAlert: UIKit.UIAlertController
  public init(attributeContainer: any PayologyCheckCaptureSDK.PayologyCheckCaptureAttributeContainer = TemplateCheckCaptureAttributeContainer(), typeContainer: any PayologyCheckCaptureSDK.PayologyCheckCaptureTypeContainer = TemplateCheckCaptureTypeContainer(), transitioningDelegate: (any UIKit.UIViewControllerTransitioningDelegate)? = nil, unauthorizedCameraAccessAlert: UIKit.UIAlertController = .standardUnauthorizedCameraAccessAlert)
  public init(template: PayologyCheckCaptureSDK.PayologyTemplate, typeContainer: any PayologyCheckCaptureSDK.PayologyCheckCaptureTypeContainer = TemplateCheckCaptureTypeContainer(), transitioningDelegate: (any UIKit.UIViewControllerTransitioningDelegate)? = nil, unauthorizedCameraAccessAlert: UIKit.UIAlertController = .standardUnauthorizedCameraAccessAlert)
}
public protocol PayologyMenuButtonDelegate : AnyObject {
  func userDidSelectPayologyMenuButtonOption(_ menuButton: PayologyCheckCaptureSDK.PayologyMenuButton)
}
public struct CodableFont : Swift.Codable, Swift.Hashable {
  public let fontName: Swift.String
  public let pointSize: CoreFoundation.CGFloat
  public init?(name: Swift.String, size: CoreFoundation.CGFloat)
  public init(_ uiFont: UIKit.UIFont)
  public init()
  public var uiValue: UIKit.UIFont {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PayologyCheckCaptureSDK.CodableFont, b: PayologyCheckCaptureSDK.CodableFont) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIFont {
  public var codableValue: PayologyCheckCaptureSDK.CodableFont? {
    get
  }
}
extension PayologyCheckCaptureSDK.CodableFont : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.CodableFont
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
extension CoreGraphics.CGImage {
  public func pixelBrightness(position: CoreFoundation.CGPoint) -> CoreFoundation.CGFloat?
  public func averageLuminance(pixelRatio: CoreFoundation.CGFloat = 0.01, centralCropRatio: CoreFoundation.CGFloat = 0.25) -> CoreFoundation.CGFloat?
}
extension CoreGraphics.CGImage {
  public var croppedDocumentImage: CoreGraphics.CGImage? {
    get
  }
}
public protocol PayologyJSONRepresentable : Swift.Decodable, Swift.Encodable {
  static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> Self
  static var typeDescription: Swift.String { get }
  var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] { get }
}
extension PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public func jsonStringFormatted(label: Swift.String?) -> Swift.String
  public var jsonStringFormatValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public func scriptFormatted(label: Swift.String?) -> Swift.String
  public var scriptFormatValue: Swift.String {
    get
  }
  public func scriptPropertySnippet(label: Swift.String, isExportable: Swift.Bool = true) -> Swift.String
}
extension PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func interfaceSnippet(isExportable: Swift.Bool = true) -> Swift.String
}
extension PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func assertComponentsDefinition(enableMonitoring: Swift.Bool) throws
}
extension PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func getFilledDictionary<T>(keyType: T.Type) -> [Swift.String : Self] where T : PayologyCheckCaptureSDK.PayologyType
  public static func getFilledDictionary<T>(keyType: T.Type) -> [Swift.String : Self] where T : PayologyCheckCaptureSDK.PayologyValidationResult
}
public protocol PayologyNetworkRequestConfiguration {
}
@objc final public class PayologyCurrencyFormatter : Foundation.NumberFormatter {
  final public var currency: PayologyCheckCaptureSDK.PayologyCurrency {
    get
    set
  }
  final public let paymentAmount: PayologyCheckCaptureSDK.PayologyAmount?
  public init(currency: PayologyCheckCaptureSDK.PayologyCurrency, paymentAmount: PayologyCheckCaptureSDK.PayologyAmount? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct CheckCaptureEntryCodableConfigurationContainer : PayologyCheckCaptureSDK.ControllerCodableConfigurationContainer {
  public var controllerConfiguration: PayologyCheckCaptureSDK.TemplateControllerCodableConfiguration
  public var cancelNavigationButtonConfiguration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.CodableConfiguration
  public var cancelButtonAlertConfiguration: PayologyCheckCaptureSDK.TemplateButtonAlertCodableConfiguration
  public var titleViewConfiguration: PayologyCheckCaptureSDK.TemplateTitleView.CodableConfiguration
  public var amountFieldConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.CodableConfiguration
  public var shoudPerformAmountErrorAnimation: Swift.Bool
  public var amountSubtitleExactAmountFormatConfiguration: PayologyCheckCaptureSDK.TemplateTextFormatCodableConfiguration?
  public var amountSubtitleRangeAmountFormatConfiguration: PayologyCheckCaptureSDK.TemplateTextFormatCodableConfiguration?
  public var noticeTextViewConfiguration: PayologyCheckCaptureSDK.TemplateTextView.CodableConfiguration
  public var nextButtonConfiguration: PayologyCheckCaptureSDK.TemplateCoreButtonView.CodableConfiguration
  public var checkFrontButtonShouldPerformDualCapture: Swift.Bool
  public var checkFrontButtonConfiguration: PayologyCheckCaptureSDK.TemplateImageButtonView.CodableConfiguration
  public var checkFrontButtonReviewStatusColorConfiguration: [Swift.String : PayologyCheckCaptureSDK.TemplateImageButtonView.CodableColorConfiguration]
  public var checkRearButtonConfiguration: PayologyCheckCaptureSDK.TemplateImageButtonView.CodableConfiguration
  public var checkRearButtonReviewStatusColorConfiguration: [Swift.String : PayologyCheckCaptureSDK.TemplateImageButtonView.CodableColorConfiguration]
  public init(_ configurationContainer: any PayologyCheckCaptureSDK.CheckCaptureEntryConfigurationContainer) throws
  public init(_ attributeContainer: any PayologyCheckCaptureSDK.PayologyCheckCaptureAttributeContainer) throws
}
extension PayologyCheckCaptureSDK.CheckCaptureEntryCodableConfigurationContainer {
  public func configurationContainer() throws -> any PayologyCheckCaptureSDK.CheckCaptureEntryConfigurationContainer
}
extension PayologyCheckCaptureSDK.CheckCaptureEntryCodableConfigurationContainer : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.CheckCaptureEntryCodableConfigurationContainer
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PayologyNetworkManager : AnyObject {
  var networkMonitor: (any PayologyCheckCaptureSDK.PayologyNetworkMonitor)? { get }
  var networkRegistrars: [any PayologyCheckCaptureSDK.PayologyNetworkRegistrar] { get set }
  var requestConfiguration: any PayologyCheckCaptureSDK.PayologyNetworkRequestConfiguration { get }
}
extension PayologyCheckCaptureSDK.PayologyNetworkManager {
  public func cleanRegistrarsMemoryUsage()
}
public struct PayologyCheckFrontImageResponseModel : PayologyCheckCaptureSDK.PayologyNetworkResponseModel {
  public let tempID: Swift.String
  public let croppedTIFF: Swift.String?
  public let base64JPG: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case tempID
    case croppedTIFF
    case base64JPG
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyCheckFrontImageResponseModel {
  public var croppedTIFFImage: UIKit.UIImage? {
    get
  }
  public var base64JPGImage: UIKit.UIImage? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyAssets {
  public struct StandardCloseButtonImage {
    public static var uiImage: UIKit.UIImage? {
      get
    }
    public static var aspectRatio: CoreFoundation.CGFloat {
      get
    }
  }
}
public enum PayologyDateValidationResult : Swift.String, PayologyCheckCaptureSDK.PayologyValidationResult {
  case isValid
  case nonexistent
  case expiredDate
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyDateValidationResult]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyDateValidationResult] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyDateValidationResult {
  public var isValid: Swift.Bool {
    get
  }
}
public enum PayologyUSACroppedMICRValidationResult : Swift.String, PayologyCheckCaptureSDK.PayologyValidationResult {
  case isValid
  case hasInvalidNumber
  case numberCombinationHasMoreDigitsThanAllowed
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyUSACroppedMICRValidationResult]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyUSACroppedMICRValidationResult] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyUSACroppedMICRValidationResult {
  public var isValid: Swift.Bool {
    get
  }
}
extension Foundation.Decimal {
  public init?(_ numberString: Swift.String)
  public var doubleValue: Swift.Double {
    get
  }
  public var wholeNumberDigits: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class PayologyButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any PayologyCheckCaptureSDK.PayologyButtonDelegate)?
  @_Concurrency.MainActor(unsafe) public var payologyButtonAlert: PayologyCheckCaptureSDK.PayologyButtonAlert?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyButton {
  @_Concurrency.MainActor(unsafe) public func triggerButtonAction()
}
public struct TemplateTextFormatCodableConfiguration : Swift.Codable {
  public var format: Swift.String
  public var attributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes
  public init(format: Swift.String, attributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.TemplateTextFormatCodableConfiguration {
  public init(_ configuration: PayologyCheckCaptureSDK.TemplateTextFormatConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateTextFormatCodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateTextFormatConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFormatConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateTextFormatCodableConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFormatCodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateTextFormatCodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
public struct TemplateCheckCaptureTypeContainer : PayologyCheckCaptureSDK.PayologyCheckCaptureTypeContainer {
  public var photoCaptureType: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController.Type
  public var photoCaptureIntroType: PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController.Type
  public var photoCaptureLoadingType: PayologyCheckCaptureSDK.PayologyPhotoCaptureLoadingViewController.Type
  public var checkCaptureEntryType: PayologyCheckCaptureSDK.PayologyCheckCaptureEntryViewController.Type
  public var checkCaptureConfirmationType: PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController.Type
  public init(photoCaptureType: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController.Type = TemplatePhotoCaptureViewController.self, photoCaptureIntroType: PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController.Type = TemplatePhotoCaptureIntroViewController.self, photoCaptureLoadingType: PayologyCheckCaptureSDK.PayologyPhotoCaptureLoadingViewController.Type = TemplatePhotoCaptureLoadingViewController.self, checkCaptureEntryType: PayologyCheckCaptureSDK.PayologyCheckCaptureEntryViewController.Type = TemplateCheckCaptureEntryViewController.self, checkCaptureConfirmationType: PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController.Type = TemplateCheckCaptureConfirmationViewController.self)
}
extension Swift.Dictionary where Key == PayologyCheckCaptureSDK.PayologyTextValidationResult, Value == PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration {
  public init(attributeConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration, fieldName: Swift.String)
}
@objc @_Concurrency.MainActor(unsafe) open class PayologyCheckCaptureConfirmationViewController : PayologyCheckCaptureSDK.PayologyViewController {
  @_Concurrency.MainActor(unsafe) weak public var checkCaptureConfirmationDelegate: (any PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationDelegate)?
  @_Concurrency.MainActor(unsafe) public var checkCaptureData: PayologyCheckCaptureSDK.PayologyCheckCaptureData
  @_Concurrency.MainActor(unsafe) public var loadingViewController: PayologyCheckCaptureSDK.PayologyLoadingViewController?
  @_Concurrency.MainActor(unsafe) final public let connectionChecker: PayologyCheckCaptureSDK.PayologyNetworkConnectionChecker
  @_Concurrency.MainActor(unsafe) final public let stackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public let bankNumberField: PayologyCheckCaptureSDK.PayologyNumberField
  @_Concurrency.MainActor(unsafe) final public let accountNumberField: PayologyCheckCaptureSDK.PayologyNumberField
  @_Concurrency.MainActor(unsafe) final public let checkNumberField: PayologyCheckCaptureSDK.PayologyNumberField?
  @_Concurrency.MainActor(unsafe) final public let confirmButton: PayologyCheckCaptureSDK.PayologyButton
  @_Concurrency.MainActor(unsafe) final public let cancelButton: PayologyCheckCaptureSDK.PayologyButton
  @_Concurrency.MainActor(unsafe) final public let undoButton: PayologyCheckCaptureSDK.PayologyButton
  @_Concurrency.MainActor(unsafe) required public init(configuration: PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationConfiguration) throws
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public func userDidTapPayologyButton(_ button: PayologyCheckCaptureSDK.PayologyButton)
  @_Concurrency.MainActor(unsafe) open func confirmButtonStateDidChange()
  @_Concurrency.MainActor(unsafe) open func numberFieldEditionDidEnd(_ numberFields: [PayologyCheckCaptureSDK.PayologyNumberField])
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController {
  @_Concurrency.MainActor(unsafe) public func handleConfirmButtonState()
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController {
  @_Concurrency.MainActor(unsafe) public var isReadyForConfirmation: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var locale: PayologyCheckCaptureSDK.PayologyLocale {
    get
  }
  @_Concurrency.MainActor(unsafe) public var bankNumber: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var accountNumber: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var checkNumber: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var bankNumberValidation: PayologyCheckCaptureSDK.PayologyNumberValidationResult {
    get
  }
  @_Concurrency.MainActor(unsafe) public var accountNumberValidation: PayologyCheckCaptureSDK.PayologyNumberValidationResult {
    get
  }
  @_Concurrency.MainActor(unsafe) public var checkNumberValidation: PayologyCheckCaptureSDK.PayologyNumberValidationResult? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var USACroppedMICRValidation: PayologyCheckCaptureSDK.PayologyUSACroppedMICRValidationResult? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController {
  @_Concurrency.MainActor(unsafe) public func populateNumberFields(using checkFrontResponse: PayologyCheckCaptureSDK.PayologyCheckFrontResponseModel?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TemplateTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public func configureCell(with configuration: PayologyCheckCaptureSDK.TemplateTableViewCell.Configuration, isSelected: Swift.Bool)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateTableViewCell {
  public struct Configuration {
    public var selectedAttributedTitle: Foundation.NSAttributedString?
    public var deselectedAttributedTitle: Foundation.NSAttributedString?
    public var selectedAttributedSubtitle: Foundation.NSAttributedString?
    public var deselectedAttributedSubtitle: Foundation.NSAttributedString?
    public var image: UIKit.UIImage?
    public var selectedImageTintColor: UIKit.UIColor
    public var deselectedImageTintColor: UIKit.UIColor
    public var selectedBackgroundColor: UIKit.UIColor
    public var deselectedBackgroundColor: UIKit.UIColor
    public var cellHeightConstant: CoreFoundation.CGFloat
    public var imageSizeMultiplier: CoreFoundation.CGFloat
    public var cornerRadius: CoreFoundation.CGFloat
    public init(selectedAttributedTitle: Foundation.NSAttributedString?, deselectedAttributedTitle: Foundation.NSAttributedString?, selectedAttributedSubtitle: Foundation.NSAttributedString?, deselectedAttributedSubtitle: Foundation.NSAttributedString?, image: UIKit.UIImage?, selectedImageTintColor: UIKit.UIColor, deselectedImageTintColor: UIKit.UIColor, selectedBackgroundColor: UIKit.UIColor, deselectedBackgroundColor: UIKit.UIColor, cellHeightConstant: CoreFoundation.CGFloat, imageSizeMultiplier: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat)
  }
}
extension PayologyCheckCaptureSDK.TemplateTableViewCell {
  public struct AttributeConfiguration {
    public var selectedTitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var deselectedTitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var selectedSubtitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var deselectedSubtitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var selectedImageTintColor: UIKit.UIColor
    public var deselectedImageTintColor: UIKit.UIColor
    public var selectedBackgroundColor: UIKit.UIColor
    public var deselectedBackgroundColor: UIKit.UIColor
    public var cellHeightConstant: CoreFoundation.CGFloat
    public var imageSizeMultiplier: CoreFoundation.CGFloat
    public var cornerRadius: CoreFoundation.CGFloat
    public init(selectedTitleAttributes: [Foundation.NSAttributedString.Key : Any], deselectedTitleAttributes: [Foundation.NSAttributedString.Key : Any], selectedSubtitleAttributes: [Foundation.NSAttributedString.Key : Any], deselectedSubtitleAttributes: [Foundation.NSAttributedString.Key : Any], selectedImageTintColor: UIKit.UIColor, deselectedImageTintColor: UIKit.UIColor, selectedBackgroundColor: UIKit.UIColor, deselectedBackgroundColor: UIKit.UIColor, cellHeightConstant: CoreFoundation.CGFloat, imageSizeMultiplier: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat)
    public func configuration(title: Swift.String?, subtitle: Swift.String?, image: UIKit.UIImage?) -> PayologyCheckCaptureSDK.TemplateTableViewCell.Configuration
    public static func getAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateTableViewCell.AttributeConfiguration
  }
}
extension PayologyCheckCaptureSDK.TemplateTableViewCell.AttributeConfiguration {
  public static var standard: PayologyCheckCaptureSDK.TemplateTableViewCell.AttributeConfiguration {
    get
  }
}
public protocol PayologyNumber : Swift.Decodable, Swift.Encodable, Swift.Hashable {
  var numberString: Swift.String { get set }
  var numberType: PayologyCheckCaptureSDK.PayologyNumberType { get }
  var locale: PayologyCheckCaptureSDK.PayologyLocale? { get }
  var minimumDigits: Swift.Int { get }
  var maximumDigits: Swift.Int { get }
  var hasCompleteDigits: Swift.Bool { get }
  var validationResult: PayologyCheckCaptureSDK.PayologyNumberValidationResult { get }
  var isValid: Swift.Bool { get }
  var isAnotherInvalid: Swift.Bool? { get }
}
extension PayologyCheckCaptureSDK.PayologyNumber {
  public var validationResult: PayologyCheckCaptureSDK.PayologyNumberValidationResult {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public var nsValue: Foundation.NSNumber? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TemplatePhoneNumberFieldView : PayologyCheckCaptureSDK.TemplateTextFieldView {
  @_Concurrency.MainActor(unsafe) override public init(textField: PayologyCheckCaptureSDK.PayologyTextField, configuration: PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration, errorMessageConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct SFCheckCaptureSubmissionData : Swift.Codable {
  public let referenceID: Swift.String
  public let checkCaptureStatus: Swift.String
  public let userAmountValue: Swift.String?
  public let userRoutingNumber: Swift.String?
  public let userAccountNumber: Swift.String?
  public let userCheckNumber: Swift.String?
  public let ocrAmountValue: Swift.String?
  public let ocrRoutingNumber: Swift.String?
  public let ocrAccountNumber: Swift.String?
  public let ocrCheckNumber: Swift.String?
  public let ocrCroppedMICR: Swift.String?
  public let ocrDate: Swift.String?
  public var frontImage: Swift.String?
  public var rearImage: Swift.String?
  public init(referenceID: Swift.String, checkCaptureStatus: PayologyCheckCaptureSDK.SFCheckCaptureSubmissionData.Status, userAmountValue: Foundation.Decimal?, userRoutingNumber: Swift.String?, userAccountNumber: Swift.String?, userCheckNumber: Swift.String?, ocrAmountValue: Foundation.Decimal?, ocrRoutingNumber: Swift.String?, ocrAccountNumber: Swift.String?, ocrCheckNumber: Swift.String?, ocrCroppedMICR: Swift.String?, ocrDate: Swift.String?, frontImage: Swift.String?, rearImage: Swift.String?)
  public init(referenceID: Swift.String, checkCaptureStatus: PayologyCheckCaptureSDK.SFCheckCaptureSubmissionData.Status, checkCaptureData: PayologyCheckCaptureSDK.PayologyCheckCaptureData)
  public var status: PayologyCheckCaptureSDK.SFCheckCaptureSubmissionData.Status? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.SFCheckCaptureSubmissionData {
  public enum Status : Swift.String, PayologyCheckCaptureSDK.PayologyType {
    case frontCaptured
    case bothCaptured
    case completed
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [PayologyCheckCaptureSDK.SFCheckCaptureSubmissionData.Status]
    public typealias RawValue = Swift.String
    public static var allCases: [PayologyCheckCaptureSDK.SFCheckCaptureSubmissionData.Status] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
public protocol CheckCaptureConfirmationInterfaceManager : PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController, PayologyCheckCaptureSDK.ControllerInterfaceManager {
  var stackView: UIKit.UIStackView { get }
  var titleView: PayologyCheckCaptureSDK.TemplateTitleView? { get }
  var noticeTextView: PayologyCheckCaptureSDK.TemplateTextView? { get }
  var cancelNavigationButtonView: PayologyCheckCaptureSDK.TemplateNavigationButtonView? { get }
  var undoNavigationButtonView: PayologyCheckCaptureSDK.TemplateNavigationButtonView? { get }
  var bankNumberFieldView: PayologyCheckCaptureSDK.TemplateTextFieldView? { get }
  var accountNumberFieldView: PayologyCheckCaptureSDK.TemplateTextFieldView? { get }
  var checkNumberFieldView: PayologyCheckCaptureSDK.TemplateTextFieldView? { get }
  var confirmButtonView: PayologyCheckCaptureSDK.TemplateCoreButtonView? { get }
}
extension PayologyCheckCaptureSDK.CheckCaptureConfirmationInterfaceManager {
  public func configureCheckCaptureConfirmationUserInterface(_ configurationContainer: any PayologyCheckCaptureSDK.CheckCaptureConfirmationConfigurationContainer)
}
extension PayologyCheckCaptureSDK.CheckCaptureConfirmationInterfaceManager {
  public func updateNumberFieldErrorMessage(_ numberField: PayologyCheckCaptureSDK.PayologyNumberField, configurationContainer: any PayologyCheckCaptureSDK.CheckCaptureConfirmationConfigurationContainer)
}
extension PayologyCheckCaptureSDK.TemplateTitleView {
  public struct CodableConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var text: Swift.String
    public var font: PayologyCheckCaptureSDK.CodableFont
    public var textColor: PayologyCheckCaptureSDK.CodableColor
    public var textAlignment: Swift.String
    public var lineColor: PayologyCheckCaptureSDK.CodableColor
    public var lineWidth: CoreFoundation.CGFloat
    public init(text: Swift.String, font: PayologyCheckCaptureSDK.CodableFont, textColor: PayologyCheckCaptureSDK.CodableColor, textAlignment: PayologyCheckCaptureSDK.CodableTextAlignment, lineColor: PayologyCheckCaptureSDK.CodableColor, lineWidth: CoreFoundation.CGFloat)
  }
}
extension PayologyCheckCaptureSDK.TemplateTitleView.CodableConfiguration {
  public init?(_ configuration: PayologyCheckCaptureSDK.TemplateTitleView.Configuration)
}
extension PayologyCheckCaptureSDK.TemplateTitleView.CodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateTitleView.Configuration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTitleView.Configuration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateTitleView.CodableConfiguration? {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTitleView.CodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateTitleView.CodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TemplateCheckCaptureConfirmationConfigurationContainer : PayologyCheckCaptureSDK.CheckCaptureConfirmationConfigurationContainer {
  public var controllerConfiguration: PayologyCheckCaptureSDK.TemplateControllerConfiguration
  public var cancelNavigationButtonConfiguration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration
  public var cancelButtonAlertConfiguration: PayologyCheckCaptureSDK.TemplateButtonAlertConfiguration
  public var undoNavigationButtonConfiguration: PayologyCheckCaptureSDK.TemplateNavigationButtonView.Configuration
  public var titleViewConfiguration: PayologyCheckCaptureSDK.TemplateTitleView.Configuration
  public var noticeTextViewConfiguration: PayologyCheckCaptureSDK.TemplateTextView.Configuration
  public var confirmButtonConfiguration: PayologyCheckCaptureSDK.TemplateCoreButtonView.Configuration
  public var stackViewSpacing: CoreFoundation.CGFloat
  public var USARoutingFieldConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration
  public var USAAccountFieldConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration
  public var USACheckFieldConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration
  public var USARoutingNumberErrorMessageConfigurations: [PayologyCheckCaptureSDK.PayologyNumberValidationResult : PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration]
  public var USAAccountNumberErrorMessageConfigurations: [PayologyCheckCaptureSDK.PayologyNumberValidationResult : PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration]
  public var USACheckNumberErrorMessageConfigurations: [PayologyCheckCaptureSDK.PayologyNumberValidationResult : PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration]
  public var USANumberCombinationHasMoreDigitsThanAllowedErrorMessageConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration
  public init(_ attributeContainer: any PayologyCheckCaptureSDK.PayologyCheckCaptureAttributeContainer)
}
public protocol PayologyNumberFormatter {
  var text: Swift.String? { get }
  var numberType: PayologyCheckCaptureSDK.PayologyNumberType { get }
  var numberFormatter: Foundation.NumberFormatter { get }
}
extension PayologyCheckCaptureSDK.PayologyNumberFormatter {
  public var number: any PayologyCheckCaptureSDK.PayologyNumber {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public var validationResult: PayologyCheckCaptureSDK.PayologyNumberValidationResult {
    get
  }
  public var groupedNumberString: Swift.String? {
    get
  }
}
public protocol PayologyImageProcessorNetworkObserver {
  func photoReviewStatusHasBeenUpdated(_ sender: PayologyCheckCaptureSDK.PayologyImageProcessorNetworkRegistrar, photoReviewStatus: PayologyCheckCaptureSDK.PayologyPhotoReviewStatus)
}
@objc @_Concurrency.MainActor(unsafe) open class PayologyLoadingViewController : PayologyCheckCaptureSDK.PayologyViewController {
  @_Concurrency.MainActor(unsafe) weak public var loadingDelegate: (any PayologyCheckCaptureSDK.PayologyLoadingDelegate)?
  @_Concurrency.MainActor(unsafe) weak public var loadingRequester: (any PayologyCheckCaptureSDK.PayologyLoadingRequester)?
  @_Concurrency.MainActor(unsafe) public var shouldPresentLoading: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isOnScreen: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public let dismissButton: PayologyCheckCaptureSDK.PayologyButton
  @_Concurrency.MainActor(unsafe) public init(configuration: PayologyCheckCaptureSDK.PayologyLoadingConfiguration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override open func userDidTapPayologyButton(_ button: PayologyCheckCaptureSDK.PayologyButton)
  @objc deinit
}
extension PayologyCheckCaptureSDK.PayologyLoadingViewController {
  @_Concurrency.MainActor(unsafe) public func displayLoading(completion handler: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func hideLoading(completion handler: (() -> Swift.Void)? = nil)
}
public protocol PayologyValidationResult : Swift.CaseIterable, Swift.Decodable, Swift.Encodable, Swift.Hashable, Swift.RawRepresentable where Self.RawValue == Swift.String {
  var isValid: Swift.Bool { get }
}
public protocol PayologyType : Swift.CaseIterable, Swift.Decodable, Swift.Encodable, Swift.Hashable, Swift.RawRepresentable where Self.RawValue == Swift.String {
  var description: Swift.String { get }
}
extension PayologyCheckCaptureSDK.PayologyType {
  public init?(description: Swift.String?)
  public static var descriptionArray: [Swift.String] {
    get
  }
  public static var initialCase: Self {
    get
  }
}
public struct PayologyUSACroppedMICRAttributes : PayologyCheckCaptureSDK.PayologyMICRAttributes {
  public let routingNumber: Swift.String
  public let accountNumber: Swift.String
  public let checkNumber: Swift.String
  public init(routingNumber: Swift.String, accountNumber: Swift.String, checkNumber: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyUSACroppedMICRAttributes {
  public var bankNumber: Swift.String {
    get
  }
  public var usaRoutingNumber: PayologyCheckCaptureSDK.USARoutingNumber {
    get
  }
  public var usaAccountNumber: PayologyCheckCaptureSDK.USAAccountNumber {
    get
  }
  public var usaCheckNumber: PayologyCheckCaptureSDK.USACheckNumber? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyUSACroppedMICRAttributes {
  public var isValid: Swift.Bool {
    get
  }
  public var croppedMICRValidation: PayologyCheckCaptureSDK.PayologyUSACroppedMICRValidationResult {
    get
  }
}
public struct USARoutingNumber : PayologyCheckCaptureSDK.PayologyNumber {
  public var numberString: Swift.String
  public let numberType: PayologyCheckCaptureSDK.PayologyNumberType
  public let locale: PayologyCheckCaptureSDK.PayologyLocale?
  public let minimumDigits: Swift.Int
  public let maximumDigits: Swift.Int
  public let hasCompleteDigits: Swift.Bool
  public init(_ numberString: Swift.String = "", hasCompleteDigits: Swift.Bool = true)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PayologyCheckCaptureSDK.USARoutingNumber, b: PayologyCheckCaptureSDK.USARoutingNumber) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.USARoutingNumber {
  public var isAnotherInvalid: Swift.Bool? {
    get
  }
}
public struct PayologyCheckCaptureCodableDesignContainer : PayologyCheckCaptureSDK.PayologyCodableDesignContainer {
  public var photoCaptureCodableContainer: PayologyCheckCaptureSDK.PhotoCaptureCodableConfigurationContainer
  public var photoCaptureIntroCodableContainer: PayologyCheckCaptureSDK.PhotoCaptureIntroCodableConfigurationContainer
  public var photoCaptureLoadingCodableContainer: PayologyCheckCaptureSDK.PhotoCaptureLoadingCodableConfigurationContainer
  public var checkCaptureEntryCodableContainer: PayologyCheckCaptureSDK.CheckCaptureEntryCodableConfigurationContainer
  public var checkCaptureConfirmationCodableContainer: PayologyCheckCaptureSDK.CheckCaptureConfirmationCodableConfigurationContainer
  public var unauthorizedCameraAccessAlertCodableConfiguration: PayologyCheckCaptureSDK.TemplateEventAlertCodableConfiguration
  public var unauthorizedCameraAccessAlert: UIKit.UIAlertController {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureCodableDesignContainer {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.PayologyCheckCaptureCodableDesignContainer
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
final public class PayologyCheckFrontNetworkRegistrar : PayologyCheckCaptureSDK.PayologyImageProcessorNetworkRegistrar {
  final public var responseModel: PayologyCheckCaptureSDK.PayologyCheckFrontResponseModel?
  final public var imageResponseModel: PayologyCheckCaptureSDK.PayologyCheckFrontImageResponseModel?
  public init(photoReviewStatus: PayologyCheckCaptureSDK.PayologyPhotoReviewStatus = .awaitingPhotoCapture)
  override final public func cleanMemoryUsage()
  override final public func resetRegistrarCache()
  @objc deinit
}
public struct CodableAttributedString : Swift.Codable {
  public let string: Swift.String?
  public let attributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes?
  public let data: Foundation.Data?
  public let attachmentBounds: [PayologyCheckCaptureSDK.CodableRect]?
  public init()
  public init(string: Swift.String, attributes: PayologyCheckCaptureSDK.CodableAttributedString.Atttributes)
  public init?(data: Foundation.Data, attachmentBounds: [PayologyCheckCaptureSDK.CodableRect])
  public init?(_ attributedString: Foundation.NSAttributedString)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.CodableAttributedString {
  public var nsValue: Foundation.NSAttributedString? {
    get
  }
}
extension Foundation.NSAttributedString {
  public var codableValue: PayologyCheckCaptureSDK.CodableAttributedString? {
    get
  }
}
extension PayologyCheckCaptureSDK.CodableAttributedString : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.CodableAttributedString
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
public protocol PayologyCheckCaptureConfirmationDelegate : PayologyCheckCaptureSDK.PayologyViewControllerDelegate {
  func shouldPerformCheckDeposit(_ sender: PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController, with checkCaptureData: PayologyCheckCaptureSDK.PayologyCheckCaptureData)
  func terminateCheckCaptureAfterUserConfirmation(_ sender: PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController, with checkCaptureData: PayologyCheckCaptureSDK.PayologyCheckCaptureData)
  func shouldLogCheckCaptureDataToMonitor(checkCaptureData: PayologyCheckCaptureSDK.PayologyCheckCaptureData?, checkCaptureStatus: PayologyCheckCaptureSDK.SFCheckCaptureSubmissionData.Status)
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationDelegate {
  public func userDidCancelCheckCaptureConfirmation(_ sender: PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController)
  public func userDidConfirmCheckCapture(_ sender: PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController)
}
public protocol PayologyDesignContainer {
  var attributeContainer: any PayologyCheckCaptureSDK.PayologyAttributeContainer { get }
  var typeContainer: any PayologyCheckCaptureSDK.PayologyTypeContainer { get }
  var transitioningDelegate: (any UIKit.UIViewControllerTransitioningDelegate)? { get }
}
extension CoreMedia.CMSampleBuffer {
  public var image: UIKit.UIImage? {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView {
  public struct CodableColorConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public let tintColor: PayologyCheckCaptureSDK.CodableColor
    public let backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public let borderColor: PayologyCheckCaptureSDK.CodableColor
    public init(tintColor: PayologyCheckCaptureSDK.CodableColor, backgroundColor: PayologyCheckCaptureSDK.CodableColor, borderColor: PayologyCheckCaptureSDK.CodableColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.CodableColorConfiguration {
  public init(_ colorConfiguration: PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.CodableColorConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.ColorConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateImageButtonView.CodableColorConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateImageButtonView.CodableColorConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateImageButtonView.CodableColorConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PayologyJSONValue : Swift.Decodable, Swift.Encodable {
  init?(_ component: PayologyCheckCaptureSDK.PayologyJSONComponent)
  func jsonComponent(label: Swift.String, isOptional: Swift.Bool) -> PayologyCheckCaptureSDK.PayologyJSONComponent
}
@objc @_Concurrency.MainActor(unsafe) open class TemplateTextFieldView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var textField: PayologyCheckCaptureSDK.PayologyTextField?
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let paddingView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let lineView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let subtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let errorMessageLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var errorMessageConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(textField: PayologyCheckCaptureSDK.PayologyTextField, configuration: PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration, errorMessageConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView {
  public struct Configuration {
    public var attributedTitle: Foundation.NSAttributedString?
    public var attributedSubtitle: Foundation.NSAttributedString?
    public var attributedPlaceholder: Foundation.NSAttributedString?
    public var textContainerInset: UIKit.UIEdgeInsets
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: UIKit.UIColor
    public var foregroundColor: UIKit.UIColor
    public var backgroundColor: UIKit.UIColor
    public var lineColor: UIKit.UIColor?
    public var font: UIKit.UIFont
    public var textAlignment: UIKit.NSTextAlignment
    public init(attributedTitle: Foundation.NSAttributedString?, attributedSubtitle: Foundation.NSAttributedString?, attributedPlaceholder: Foundation.NSAttributedString?, textContainerInset: UIKit.UIEdgeInsets, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor, foregroundColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, lineColor: UIKit.UIColor?, font: UIKit.UIFont, textAlignment: UIKit.NSTextAlignment)
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView {
  public struct ErrorMessageConfiguration {
    public var attributedErrorMessage: Foundation.NSAttributedString?
    public var isErrorAnimationEnabled: Swift.Bool
    public init(attributedErrorMessage: Foundation.NSAttributedString?, isErrorAnimationEnabled: Swift.Bool)
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView {
  public struct AttributeConfiguration {
    public var titleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var subtitleAttributes: [Foundation.NSAttributedString.Key : Any]
    public var placeholderAttributes: [Foundation.NSAttributedString.Key : Any]
    public var errorMessageAttributes: [Foundation.NSAttributedString.Key : Any]
    public var textContainerInset: UIKit.UIEdgeInsets
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: UIKit.UIColor
    public var foregroundColor: UIKit.UIColor
    public var backgroundColor: UIKit.UIColor
    public var lineColor: UIKit.UIColor?
    public var font: UIKit.UIFont
    public var textAlignment: UIKit.NSTextAlignment
    public var isErrorAnimationEnabled: Swift.Bool
    public init(titleAttributes: [Foundation.NSAttributedString.Key : Any], subtitleAttributes: [Foundation.NSAttributedString.Key : Any], placeholderAttributes: [Foundation.NSAttributedString.Key : Any], errorMessageAttributes: [Foundation.NSAttributedString.Key : Any], textContainerInset: UIKit.UIEdgeInsets, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor, foregroundColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, lineColor: UIKit.UIColor?, font: UIKit.UIFont, textAlignment: UIKit.NSTextAlignment, isErrorAnimationEnabled: Swift.Bool)
    public func configuration(title: Swift.String?, subtitle: Swift.String?, placeholder: Swift.String?) -> PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration
    public func errorMessageConfiguration(errorMessage: Swift.String?) -> PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration
    public static func getAmountFieldAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration
    public static func getNumberFieldAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration
    public static func getDataFieldAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration
    public static func getPaymentAmountFieldAttributes(for template: PayologyCheckCaptureSDK.PayologyTemplate) -> PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration {
  public static var standardAmountField: PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration {
  public static var standardNumberField: PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration {
  public static var standardDataField: PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration {
  public static var standardPaymentAmountField: PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration {
    get
  }
}
extension Swift.Double : PayologyCheckCaptureSDK.PayologyJSONValue {
  public init?(_ component: PayologyCheckCaptureSDK.PayologyJSONComponent)
  public func jsonComponent(label: Swift.String, isOptional: Swift.Bool) -> PayologyCheckCaptureSDK.PayologyJSONComponent
}
extension Swift.String : PayologyCheckCaptureSDK.PayologyJSONValue {
  public init?(_ component: PayologyCheckCaptureSDK.PayologyJSONComponent)
  public func jsonComponent(label: Swift.String, isOptional: Swift.Bool) -> PayologyCheckCaptureSDK.PayologyJSONComponent
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TemplatePhotoCaptureIntroViewController : PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController, PayologyCheckCaptureSDK.PhotoCaptureIntroInterfaceManager {
  @_Concurrency.MainActor(unsafe) final public let statusBarBackgroundView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var photoCaptureIntroView: PayologyCheckCaptureSDK.TemplatePhotoCaptureIntroView?
  @_Concurrency.MainActor(unsafe) public var nextButtonView: PayologyCheckCaptureSDK.TemplateControlButtonView?
  @_Concurrency.MainActor(unsafe) final public let cancelButton: PayologyCheckCaptureSDK.PayologyButton
  @_Concurrency.MainActor(unsafe) public var cancelButtonView: PayologyCheckCaptureSDK.TemplateControlButtonView?
  @_Concurrency.MainActor(unsafe) public var configurationContainer: (any PayologyCheckCaptureSDK.PhotoCaptureIntroConfigurationContainer)?
  @_Concurrency.MainActor(unsafe) override open func didCompleteInitialization()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMove(toParent parent: UIKit.UIViewController?)
  @_Concurrency.MainActor(unsafe) override public func userDidTapPayologyButton(_ button: PayologyCheckCaptureSDK.PayologyButton)
  @_Concurrency.MainActor(unsafe) required public init(configuration: PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroConfiguration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol PayologyCheckCaptureEntryDelegate : PayologyCheckCaptureSDK.PayologyAmountEntryDelegate, PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationDelegate, PayologyCheckCaptureSDK.PayologyImageProcessorNetworkManager, PayologyCheckCaptureSDK.PayologyLoadingDelegate {
  func getPhotoCaptureLoadingViewController(_ requester: any PayologyCheckCaptureSDK.PayologyPhotoCaptureRequester, photoType: PayologyCheckCaptureSDK.PayologyPhotoType) throws -> PayologyCheckCaptureSDK.PayologyPhotoCaptureLoadingViewController
  func userShouldStartPhotoCapture(_ sender: any PayologyCheckCaptureSDK.PayologyPhotoCaptureRequester, photoTypes: [PayologyCheckCaptureSDK.PayologyPhotoType])
  func userDidConfirmCheckCaptureEntry(_ sender: PayologyCheckCaptureSDK.PayologyCheckCaptureEntryViewController)
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureEntryDelegate {
  public func userDidCancelCheckCaptureEntry(_ sender: PayologyCheckCaptureSDK.PayologyCheckCaptureEntryViewController)
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureEntryDelegate {
  public func userDidConfirmCheckCaptureEntry(_ sender: PayologyCheckCaptureSDK.PayologyCheckCaptureEntryViewController)
}
final public class PayologyCheckRearNetworkRegistrar : PayologyCheckCaptureSDK.PayologyImageProcessorNetworkRegistrar {
  final public var responseModel: PayologyCheckCaptureSDK.PayologyCheckRearResponseModel?
  final public var imageResponseModel: PayologyCheckCaptureSDK.PayologyCheckRearImageResponseModel?
  public init(photoReviewStatus: PayologyCheckCaptureSDK.PayologyPhotoReviewStatus = .awaitingPhotoCapture)
  override final public func cleanMemoryUsage()
  override final public func resetRegistrarCache()
  @objc deinit
}
public struct USACheckNumber : PayologyCheckCaptureSDK.PayologyNumber {
  public var numberString: Swift.String
  public let numberType: PayologyCheckCaptureSDK.PayologyNumberType
  public let locale: PayologyCheckCaptureSDK.PayologyLocale?
  public let minimumDigits: Swift.Int
  public let maximumDigits: Swift.Int
  public let hasCompleteDigits: Swift.Bool
  public init(_ numberString: Swift.String = "", hasCompleteDigits: Swift.Bool = true)
  public var isAnotherInvalid: Swift.Bool? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PayologyCheckCaptureSDK.USACheckNumber, b: PayologyCheckCaptureSDK.USACheckNumber) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum CodableTextAlignment : Swift.String, Swift.Codable, Swift.Hashable {
  case left
  case right
  case center
  case justified
  case natural
  public var nsValue: UIKit.NSTextAlignment {
    get
  }
  public init()
  public init?(_ rawValue: Swift.String?)
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.NSTextAlignment {
  public init?(description: Swift.String?)
  public var codableValue: PayologyCheckCaptureSDK.CodableTextAlignment {
    get
  }
}
public protocol PayologyFrameworkConfiguration {
  var configurationType: PayologyCheckCaptureSDK.PayologyConfigurationType { get }
  var hostViewController: UIKit.UIViewController? { get }
  var dynamicKeys: [any PayologyCheckCaptureSDK.PayologyDynamicKey] { get }
  var designContainer: any PayologyCheckCaptureSDK.PayologyDesignContainer { get }
  var requestConfiguration: any PayologyCheckCaptureSDK.PayologyNetworkRequestConfiguration { get }
}
public enum PayologyDelegateError : PayologyCheckCaptureSDK.PayologyCriticalError {
  case unknownViewControllerIsBeingPresented(fileID: Swift.String, function: Swift.String)
  case missingPayologyHostViewController(fileID: Swift.String, function: Swift.String)
  case missingPayologyFrameworkConfiguration(fileID: Swift.String, function: Swift.String)
  case missingPayologyActivityMonitor(fileID: Swift.String, function: Swift.String)
  case missingPayologyNetworkManager(fileID: Swift.String, function: Swift.String)
  case missingPayologyNetworkRequestConfiguration(fileID: Swift.String, function: Swift.String)
  case missingPayologyViewControllerType(fileID: Swift.String, function: Swift.String)
  case missingPayologyDesignContainer(fileID: Swift.String, function: Swift.String)
  case missingAttributeContainer(fileID: Swift.String, function: Swift.String)
  case invalidConfigurationType(fileID: Swift.String, function: Swift.String)
  case unableToCreateControllerConfiguration(fileID: Swift.String, function: Swift.String)
  case unableToCreateViewController(fileID: Swift.String, function: Swift.String)
  case unableToPerformOperation(fileID: Swift.String, function: Swift.String)
  case downcastingPayologyDelegateError(fileID: Swift.String, function: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyErrorResponder {
  public func handle(delegateError: PayologyCheckCaptureSDK.PayologyDelegateError)
}
public protocol PayologyInitializationError : Swift.Error {
}
public enum PayologyConfigurationType : Swift.String, PayologyCheckCaptureSDK.PayologyType {
  case imageProcessor
  case checkCapture
  case customerProfileSelection
  case agentPayment
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayologyCheckCaptureSDK.PayologyConfigurationType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayologyCheckCaptureSDK.PayologyConfigurationType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyConfigurationType {
  public var description: Swift.String {
    get
  }
}
public struct TemplateButtonAlertCodableConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
  public var title: Swift.String?
  public var message: Swift.String?
  public var confirmTitle: Swift.String
  public var denyTitle: Swift.String
  public init(title: Swift.String?, message: Swift.String?, confirmTitle: Swift.String, denyTitle: Swift.String)
}
extension PayologyCheckCaptureSDK.TemplateButtonAlertCodableConfiguration {
  public init(_ configuration: PayologyCheckCaptureSDK.TemplateButtonAlertConfiguration)
}
extension PayologyCheckCaptureSDK.TemplateButtonAlertCodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateButtonAlertConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateButtonAlertConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateButtonAlertCodableConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateButtonAlertCodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateButtonAlertCodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Dictionary where Key == PayologyCheckCaptureSDK.PayologyNumberValidationResult, Value == PayologyCheckCaptureSDK.TemplateTextFieldView.ErrorMessageConfiguration {
  public init(attributeConfiguration: PayologyCheckCaptureSDK.TemplateTextFieldView.AttributeConfiguration, numberType: PayologyCheckCaptureSDK.PayologyNumberType)
}
public struct TemplateImageProcessorTypeContainer : PayologyCheckCaptureSDK.PayologyImageProcessorTypeContainer {
  public let photoCaptureType: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController.Type
  public let photoCaptureIntroType: PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController.Type
  public let photoCaptureLoadingType: PayologyCheckCaptureSDK.PayologyPhotoCaptureLoadingViewController.Type
  public init(photoCaptureType: PayologyCheckCaptureSDK.PayologyPhotoCaptureViewController.Type = TemplatePhotoCaptureViewController.self, photoCaptureIntroType: PayologyCheckCaptureSDK.PayologyPhotoCaptureIntroViewController.Type = TemplatePhotoCaptureIntroViewController.self, photoCaptureLoadingType: PayologyCheckCaptureSDK.PayologyPhotoCaptureLoadingViewController.Type = TemplatePhotoCaptureLoadingViewController.self)
}
@objc @_Concurrency.MainActor(unsafe) final public class PayologyDateField : PayologyCheckCaptureSDK.PayologyTextField, PayologyCheckCaptureSDK.PayologyDateFormatter {
  @_Concurrency.MainActor(unsafe) final public let dateFormatter: Foundation.DateFormatter
  @_Concurrency.MainActor(unsafe) final public var format: PayologyCheckCaptureSDK.PayologyDateFormat
  @_Concurrency.MainActor(unsafe) public init(format: PayologyCheckCaptureSDK.PayologyDateFormat)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView {
  public struct CodableTextConfiguration : Swift.Codable {
    public var attributedText: PayologyCheckCaptureSDK.CodableAttributedString?
    public init(attributedText: PayologyCheckCaptureSDK.CodableAttributedString?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableTextConfiguration {
  public init(_ configuration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration)
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableTextConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration {
  public var codableValue: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableTextConfiguration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableTextConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.CodableTextConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
public protocol LoadingConfigurationContainer : PayologyCheckCaptureSDK.ControllerConfigurationContainer {
  var loadingViewConfiguration: PayologyCheckCaptureSDK.TemplateLoadingView.Configuration { get }
}
public struct CodableSize : Swift.Codable {
  public let width: CoreFoundation.CGFloat
  public let height: CoreFoundation.CGFloat
  public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  public init(_ cgSize: CoreFoundation.CGSize)
  public init()
  public var cgValue: CoreFoundation.CGSize {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension CoreFoundation.CGSize {
  public var codableValue: PayologyCheckCaptureSDK.CodableSize {
    get
  }
}
extension PayologyCheckCaptureSDK.CodableSize : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.CodableSize
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
}
public struct PayologyCheckCaptureData : Swift.Codable {
  public let locale: PayologyCheckCaptureSDK.PayologyLocale
  public let checkFrontOCRResponse: PayologyCheckCaptureSDK.PayologyCheckFrontResponseModel?
  public let checkFrontOCRImageResponse: PayologyCheckCaptureSDK.PayologyCheckFrontImageResponseModel?
  public let checkRearOCRResponse: PayologyCheckCaptureSDK.PayologyCheckRearResponseModel?
  public let checkRearOCRImageResponse: PayologyCheckCaptureSDK.PayologyCheckRearImageResponseModel?
  public let userAmount: PayologyCheckCaptureSDK.PayologyAmount
  public var userBankNumber: Swift.String?
  public var userAccountNumber: Swift.String?
  public var userCheckNumber: Swift.String?
  public init(locale: PayologyCheckCaptureSDK.PayologyLocale, checkFrontOCRResponse: PayologyCheckCaptureSDK.PayologyCheckFrontResponseModel?, checkFrontOCRImageResponse: PayologyCheckCaptureSDK.PayologyCheckFrontImageResponseModel?, checkRearOCRResponse: PayologyCheckCaptureSDK.PayologyCheckRearResponseModel?, checkRearOCRImageResponse: PayologyCheckCaptureSDK.PayologyCheckRearImageResponseModel?, userAmount: PayologyCheckCaptureSDK.PayologyAmount, userBankAccountNumber: Swift.String?, userAccountNumber: Swift.String?, userCheckNumber: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyCheckCaptureData {
  public var didCaptureValidCheckFrontPhoto: Swift.Bool {
    get
  }
  public var didCaptureValidCheckRearPhoto: Swift.Bool {
    get
  }
  public var userUSACroppedMICRAttributes: PayologyCheckCaptureSDK.PayologyUSACroppedMICRAttributes? {
    get
  }
  public var userUSACroppedMICR: Swift.String? {
    get
  }
}
public protocol PayologyDynamicKey : Swift.Decodable, Swift.Encodable, Swift.Hashable {
}
public protocol PayologyActivityMonitor : AnyObject, PayologyCheckCaptureSDK.PayologyNetworkMonitor {
  func payologyDidAutoCancel(errorID: Foundation.UUID, errorContext: Swift.String, userMessage: Swift.String)
}
public protocol BottomSheetConfigurationContainer : PayologyCheckCaptureSDK.ControllerConfigurationContainer {
  var bottomSheetConfiguration: PayologyCheckCaptureSDK.TemplateBottomSheetView.Configuration { get }
}
extension PayologyCheckCaptureSDK.PayologyLoadingDelegate {
  public func getPhotoCaptureLoadingViewController(_ requester: any PayologyCheckCaptureSDK.PayologyPhotoCaptureRequester, photoType: PayologyCheckCaptureSDK.PayologyPhotoType) throws -> PayologyCheckCaptureSDK.PayologyPhotoCaptureLoadingViewController
}
extension Foundation.NSAttributedString {
  public static func cancelButtonAttributedTitle(for attributes: PayologyCheckCaptureSDK.TemplateControllerConfiguration.Attributes) -> Foundation.NSAttributedString
}
extension Foundation.NSAttributedString {
  convenience public init?(string: Swift.String?, attributes: [Foundation.NSAttributedString.Key : Any]?)
  public var attributes: [Foundation.NSAttributedString.Key : Any] {
    get
  }
}
public protocol PayologyImageProcessorNetworkManager : PayologyCheckCaptureSDK.PayologyNetworkManager {
}
extension PayologyCheckCaptureSDK.PayologyImageProcessorNetworkManager {
  public var imageProcessorRequestConfiguration: (any PayologyCheckCaptureSDK.PayologyImageProcessorRequestConfiguration)? {
    get
  }
  public var checkFrontNetworkRegistrar: PayologyCheckCaptureSDK.PayologyCheckFrontNetworkRegistrar? {
    get
  }
  public var checkRearNetworkRegistrar: PayologyCheckCaptureSDK.PayologyCheckRearNetworkRegistrar? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyImageProcessorNetworkManager {
  #if compiler(>=5.3) && $AsyncAwait
  public func requestCheckFrontImageProcessorResponse(requestConfiguration: any PayologyCheckCaptureSDK.PayologyImageProcessorRequestConfiguration, checkFrontPhoto: PayologyCheckCaptureSDK.PayologyPhoto) async
  #endif
}
extension PayologyCheckCaptureSDK.PayologyImageProcessorNetworkManager {
  #if compiler(>=5.3) && $AsyncAwait
  public func requestCheckRearImageProcessorResponse(requestConfiguration: any PayologyCheckCaptureSDK.PayologyImageProcessorRequestConfiguration, tempID: Swift.String, checkRearPhoto: PayologyCheckCaptureSDK.PayologyPhoto) async
  #endif
}
extension PayologyCheckCaptureSDK.PayologyImageProcessorNetworkManager {
  public func resetCheckRegistrarsCacheIfNeeded()
}
public enum PayologyCodableType {
  case boolean(value: Swift.Bool?)
  case character(value: Swift.Character?)
  case string(value: Swift.String?)
  case integer(value: Swift.Int?)
  case float(value: Swift.Float?)
  case double(value: Swift.Double?)
  case cgFloat(value: CoreFoundation.CGFloat?)
  case data(value: Foundation.Data?)
  case object(value: (any PayologyCheckCaptureSDK.PayologyJSONRepresentable)?, type: any PayologyCheckCaptureSDK.PayologyJSONRepresentable.Type)
  case objectArray(value: [any PayologyCheckCaptureSDK.PayologyJSONRepresentable]?, type: any PayologyCheckCaptureSDK.PayologyJSONRepresentable.Type)
  case objectDictionary(value: [Swift.String : any PayologyCheckCaptureSDK.PayologyJSONRepresentable]?, type: any PayologyCheckCaptureSDK.PayologyJSONRepresentable.Type)
  public var value: Any? {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyCodableType {
  public enum Kind : Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case boolean
    case character
    case string
    case integer
    case float
    case double
    case cgFloat
    case data
    case object
    case objectArray
    case objectDictionary
    public static func == (a: PayologyCheckCaptureSDK.PayologyCodableType.Kind, b: PayologyCheckCaptureSDK.PayologyCodableType.Kind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [PayologyCheckCaptureSDK.PayologyCodableType.Kind]
    public static var allCases: [PayologyCheckCaptureSDK.PayologyCodableType.Kind] {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public var kind: PayologyCheckCaptureSDK.PayologyCodableType.Kind {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyCodableType {
  public var typeScriptType: Swift.String {
    get
  }
}
extension PayologyCheckCaptureSDK.PayologyCodableType {
  public static var coreJSONRepresentableTypes: [any PayologyCheckCaptureSDK.PayologyJSONRepresentable.Type] {
    get
  }
}
public protocol PayologyCodableDesignContainer : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
}
public protocol PayologyErrorResponderDelegate : AnyObject {
  func payologyInterfaceShouldAutoCancel(errorID: Foundation.UUID, errorContext: Swift.String, userMessage: Swift.String)
}
extension PayologyCheckCaptureSDK.PayologyDelegate {
  public func payologyInterfaceShouldAutoCancel(errorID: Foundation.UUID, errorContext: Swift.String, userMessage: Swift.String)
}
extension UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) public func adjustForKeyboardAppearance(_ notification: Foundation.NSNotification)
  @_Concurrency.MainActor(unsafe) public func adjustForKeyboardDisapperance()
}
public protocol PayologyInterfaceTester : PayologyCheckCaptureSDK.PayologyActivityMonitor {
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView {
  public struct CodableConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var attributedTitle: PayologyCheckCaptureSDK.CodableAttributedString?
    public var attributedSubtitle: PayologyCheckCaptureSDK.CodableAttributedString?
    public var attributedPlaceholder: PayologyCheckCaptureSDK.CodableAttributedString?
    public var textContainerInset: PayologyCheckCaptureSDK.CodableEdgesInsets
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var borderColor: PayologyCheckCaptureSDK.CodableColor
    public var foregroundColor: PayologyCheckCaptureSDK.CodableColor
    public var backgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var lineColor: PayologyCheckCaptureSDK.CodableColor?
    public var font: PayologyCheckCaptureSDK.CodableFont
    public var textAlignment: Swift.String
    public init(attributedTitle: PayologyCheckCaptureSDK.CodableAttributedString?, attributedSubtitle: PayologyCheckCaptureSDK.CodableAttributedString?, attributedPlaceholder: PayologyCheckCaptureSDK.CodableAttributedString?, textContainerInset: PayologyCheckCaptureSDK.CodableEdgesInsets, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderColor: PayologyCheckCaptureSDK.CodableColor, foregroundColor: PayologyCheckCaptureSDK.CodableColor, backgroundColor: PayologyCheckCaptureSDK.CodableColor, lineColor: PayologyCheckCaptureSDK.CodableColor?, font: PayologyCheckCaptureSDK.CodableFont, textAlignment: PayologyCheckCaptureSDK.CodableTextAlignment)
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.CodableConfiguration {
  public init?(_ configuration: PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration)
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.CodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.Configuration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateTextFieldView.CodableConfiguration? {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateTextFieldView.CodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateTextFieldView.CodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TemplatePhotoCaptureConfigurationContainer : PayologyCheckCaptureSDK.PhotoCaptureConfigurationContainer {
  public var controllerConfiguration: PayologyCheckCaptureSDK.TemplateControllerConfiguration
  public var autoCaptureDurationInterval: Foundation.TimeInterval
  public var areaIndicatorConfiguration: PayologyCheckCaptureSDK.TemplateAreaIndicatorView.Configuration
  public var titleLabelConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.Configuration
  public var noticeLabelConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.Configuration
  public var manualCaptureButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration
  public var dismissButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration
  public var flashActiveButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration
  public var flashDeactiveButtonConfiguration: PayologyCheckCaptureSDK.TemplateControlButtonView.Configuration
  public var photoAttributedTitleConfigurations: [PayologyCheckCaptureSDK.PayologyPhotoType : PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration]
  public var photoValidationNoticeTextConfigurations: [PayologyCheckCaptureSDK.PayologyPhotoValidationResult : PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration]
  public var flashActivationFailNoticeTextConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration
  public var manualCaptureActiveNoticeTextConfiguration: PayologyCheckCaptureSDK.TemplatePhotoCaptureLabelView.TextConfiguration
  public init(_ attributeContainer: any PayologyCheckCaptureSDK.PayologyImageProcessorAttributeContainer)
}
public enum PayologyCodableError : Swift.Error, Swift.Codable {
  case unableToCreateJSONData(fileID: Swift.String, function: Swift.String)
  case unableToCreateJSONDictionary(fileID: Swift.String, function: Swift.String)
  case missingFont(fileID: Swift.String, function: Swift.String)
  case unableToEncodeFont(fileID: Swift.String, function: Swift.String, description: Swift.String)
  case unableToDecodeFont(fileID: Swift.String, function: Swift.String, payologyFont: PayologyCheckCaptureSDK.CodableFont)
  case missingImage(fileID: Swift.String, function: Swift.String)
  case unableToEncodeImage(fileID: Swift.String, function: Swift.String, description: Swift.String)
  case unableToDecodeImage(fileID: Swift.String, function: Swift.String, payologyImage: PayologyCheckCaptureSDK.CodableImage)
  case missingAttributedText(fileID: Swift.String, function: Swift.String)
  case unableToEncodeAttributedText(fileID: Swift.String, function: Swift.String, description: Swift.String)
  case unableToDecodeAttributedText(fileID: Swift.String, function: Swift.String, payologyValue: PayologyCheckCaptureSDK.CodableAttributedString)
  case missignTextAlignment(fileID: Swift.String, function: Swift.String, description: Swift.String)
  case missignLineBreakMode(fileID: Swift.String, function: Swift.String, description: Swift.String)
  case missingTemplate(fileID: Swift.String, function: Swift.String)
  case unableToEncodeViewConfiguration(fileID: Swift.String, function: Swift.String)
  case unableToDecodeViewConfiguration(fileID: Swift.String, function: Swift.String)
  case unableToDetermineType(fileID: Swift.String, function: Swift.String, label: Swift.String?, interfaceDescription: Swift.String?)
  case unableToDetermineComponentType(fileID: Swift.String, function: Swift.String, label: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TemplateCheckCaptureConfirmationViewController : PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationViewController, PayologyCheckCaptureSDK.CheckCaptureConfirmationInterfaceManager {
  @_Concurrency.MainActor(unsafe) final public let statusBarBackgroundView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var titleView: PayologyCheckCaptureSDK.TemplateTitleView?
  @_Concurrency.MainActor(unsafe) public var cancelNavigationButtonView: PayologyCheckCaptureSDK.TemplateNavigationButtonView?
  @_Concurrency.MainActor(unsafe) public var undoNavigationButtonView: PayologyCheckCaptureSDK.TemplateNavigationButtonView?
  @_Concurrency.MainActor(unsafe) public var noticeTextView: PayologyCheckCaptureSDK.TemplateTextView?
  @_Concurrency.MainActor(unsafe) public var bankNumberFieldView: PayologyCheckCaptureSDK.TemplateTextFieldView?
  @_Concurrency.MainActor(unsafe) public var accountNumberFieldView: PayologyCheckCaptureSDK.TemplateTextFieldView?
  @_Concurrency.MainActor(unsafe) public var checkNumberFieldView: PayologyCheckCaptureSDK.TemplateTextFieldView?
  @_Concurrency.MainActor(unsafe) public var confirmButtonView: PayologyCheckCaptureSDK.TemplateCoreButtonView?
  @_Concurrency.MainActor(unsafe) public var configurationContainer: (any PayologyCheckCaptureSDK.CheckCaptureConfirmationConfigurationContainer)?
  @_Concurrency.MainActor(unsafe) override open func didCompleteInitialization()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) override open func confirmButtonStateDidChange()
  @_Concurrency.MainActor(unsafe) override open func numberFieldEditionDidEnd(_ numberFields: [PayologyCheckCaptureSDK.PayologyNumberField])
  @_Concurrency.MainActor(unsafe) required public init(configuration: PayologyCheckCaptureSDK.PayologyCheckCaptureConfirmationConfiguration) throws
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView {
  public struct CodableConfiguration : PayologyCheckCaptureSDK.ViewCodableConfiguration {
    public var heightConstant: CoreFoundation.CGFloat
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var enableAttributedTitle: PayologyCheckCaptureSDK.CodableAttributedString
    public var enableBackgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var enableBorderColor: PayologyCheckCaptureSDK.CodableColor
    public var disableAttributedTitle: PayologyCheckCaptureSDK.CodableAttributedString
    public var disableBackgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var disableBorderColor: PayologyCheckCaptureSDK.CodableColor
    public var highlightedAttributedTitle: PayologyCheckCaptureSDK.CodableAttributedString
    public var highlightedBackgroundColor: PayologyCheckCaptureSDK.CodableColor
    public var highlightedBorderColor: PayologyCheckCaptureSDK.CodableColor
    public init(heightConstant: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, enableAttributedTitle: PayologyCheckCaptureSDK.CodableAttributedString, enableBackgroundColor: PayologyCheckCaptureSDK.CodableColor, enableBorderColor: PayologyCheckCaptureSDK.CodableColor, disableAttributedTitle: PayologyCheckCaptureSDK.CodableAttributedString, disableBackgroundColor: PayologyCheckCaptureSDK.CodableColor, disableBorderColor: PayologyCheckCaptureSDK.CodableColor, highlightedAttributedTitle: PayologyCheckCaptureSDK.CodableAttributedString, highlightedBackgroundColor: PayologyCheckCaptureSDK.CodableColor, highlightedBorderColor: PayologyCheckCaptureSDK.CodableColor)
  }
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView.CodableConfiguration {
  public init?(_ configuration: PayologyCheckCaptureSDK.TemplateCoreButtonView.Configuration)
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView.CodableConfiguration {
  public var payologyValue: PayologyCheckCaptureSDK.TemplateCoreButtonView.Configuration? {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView.Configuration {
  public var codableValue: PayologyCheckCaptureSDK.TemplateCoreButtonView.CodableConfiguration? {
    get
  }
}
extension PayologyCheckCaptureSDK.TemplateCoreButtonView.CodableConfiguration : PayologyCheckCaptureSDK.PayologyJSONRepresentable {
  public static func defaultInstance(_ shouldSetOptionalProperties: Swift.Bool) -> PayologyCheckCaptureSDK.TemplateCoreButtonView.CodableConfiguration
  public static var typeDescription: Swift.String {
    get
  }
  public var jsonComponents: [PayologyCheckCaptureSDK.PayologyJSONComponent] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PayologyCheckCaptureSDK.PayologyCheckRearResponseModel.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.PayologyCheckRearResponseModel.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.PayologyCheckRearResponseModel.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.PayologyCurrency : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.PayologyImageProcessorInitializationError : Swift.Equatable {}
extension PayologyCheckCaptureSDK.PayologyImageProcessorInitializationError : Swift.Hashable {}
extension PayologyCheckCaptureSDK.TemplateCheckCaptureEntryViewController : PayologyCheckCaptureSDK.ControllerInterfaceManager {}
extension PayologyCheckCaptureSDK.TemplateCheckCaptureEntryViewController : PayologyCheckCaptureSDK.AmountEntryInterfaceManager {}
extension PayologyCheckCaptureSDK.PayologyCheckFrontResponseModel.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.PayologyCheckFrontResponseModel.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.PayologyCheckFrontResponseModel.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionResult.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionResult.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionResult.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionRequest.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionRequest.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionRequest.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionResponse.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionResponse.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionResponse.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionGeneralInformation.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionGeneralInformation.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionGeneralInformation.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionImageAnalysis.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionImageAnalysis.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionImageAnalysis.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionImageAnalysisTests.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionImageAnalysisTests.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionImageAnalysisTests.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionImageAnalysisTest.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionImageAnalysisTest.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionImageAnalysisTest.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionFields.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionFields.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionFields.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionField.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionField.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionField.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionLocationField.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionLocationField.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.CheckFrontRecognitionLocationField.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.PayologyCheckRearImageResponseModel.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.PayologyCheckRearImageResponseModel.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.PayologyCheckRearImageResponseModel.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.PayologyFrameworkInitializationError : Swift.Equatable {}
extension PayologyCheckCaptureSDK.PayologyFrameworkInitializationError : Swift.Hashable {}
extension PayologyCheckCaptureSDK.PayologyLocale : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.CodableLineBreakMode : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.PayologyDateFormat : Swift.Equatable {}
extension PayologyCheckCaptureSDK.PayologyDateFormat : Swift.Hashable {}
extension Foundation.NSMutableAttributedString.ImagePlacement : Swift.Equatable {}
extension Foundation.NSMutableAttributedString.ImagePlacement : Swift.Hashable {}
extension PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestMethod : Swift.Equatable {}
extension PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestMethod : Swift.Hashable {}
extension PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestMethod : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestBodyType : Swift.Equatable {}
extension PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestBodyType : Swift.Hashable {}
extension PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestHeaderField : Swift.Equatable {}
extension PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestHeaderField : Swift.Hashable {}
extension PayologyCheckCaptureSDK.PayologyNetworkRequest.RequestHeaderField : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.PayologyCheckFrontImageResponseModel.CodingKeys : Swift.Equatable {}
extension PayologyCheckCaptureSDK.PayologyCheckFrontImageResponseModel.CodingKeys : Swift.Hashable {}
extension PayologyCheckCaptureSDK.PayologyCheckFrontImageResponseModel.CodingKeys : Swift.RawRepresentable {}
extension PayologyCheckCaptureSDK.CodableTextAlignment : Swift.RawRepresentable {}
